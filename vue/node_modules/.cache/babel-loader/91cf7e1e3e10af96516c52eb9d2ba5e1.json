{"ast":null,"code":"import axios from 'axios';\nimport router from \"../router\";\nconst request = axios.create({\n  baseURL: process.env.NODE_EVE === 'production' ? process.env.VUE_APP_BASE_API : '/',\n  timeout: 5000\n}); // request 拦截器\n// 可以自请求发送前对请求做一些处理\n// // 比如统一加token，对请求参数统一加密\n// request.interceptors.request.use(config => {\n//     config.headers['Content-Type'] = 'application/json;charset=utf-8';\n//\n//     // config.headers['token'] = user.token;  // 设置请求头\n//     //取出sessionStorage里面缓存的用户信息\n//     const userJson = sessionStorage.getItem(\"user\")\n//     if (!userJson) {\n//         router.push(\"/login\")\n//     }\n//\n//     return config\n// }, error => {\n//     return Promise.reject(error)\n// });\n// response 拦截器\n// 可以在接口响应后统一处理结果\n// request.interceptors.response.use(\n//     response => {\n//         let res = response.data;\n//         // 如果是返回的文件\n//         if (response.config.responseType === 'blob') {\n//             return res\n//         }\n//         // 兼容服务端返回的字符串数据\n//         if (typeof res === 'string') {\n//             res = res ? JSON.parse(res) : res\n//         }\n//         return res;\n//     },\n//     error => {\n//         console.log('err' + error) // for debug\n//         return Promise.reject(error)\n//     }\n// )\n\nexport default request;","map":{"version":3,"names":["axios","router","request","create","baseURL","process","env","NODE_EVE","VUE_APP_BASE_API","timeout"],"sources":["C:/Users/13007/Documents/GinTest/vue/src/utils/request.js"],"sourcesContent":["import axios from 'axios'\nimport router from \"../router\";\n\nconst request = axios.create({\n    baseURL: process.env.NODE_EVE === 'production' ? process.env.VUE_APP_BASE_API : '/',\n    timeout: 5000\n})\n\n// request 拦截器\n// 可以自请求发送前对请求做一些处理\n// // 比如统一加token，对请求参数统一加密\n// request.interceptors.request.use(config => {\n//     config.headers['Content-Type'] = 'application/json;charset=utf-8';\n//\n//     // config.headers['token'] = user.token;  // 设置请求头\n//     //取出sessionStorage里面缓存的用户信息\n//     const userJson = sessionStorage.getItem(\"user\")\n//     if (!userJson) {\n//         router.push(\"/login\")\n//     }\n//\n//     return config\n// }, error => {\n//     return Promise.reject(error)\n// });\n\n// response 拦截器\n// 可以在接口响应后统一处理结果\n// request.interceptors.response.use(\n//     response => {\n//         let res = response.data;\n//         // 如果是返回的文件\n//         if (response.config.responseType === 'blob') {\n//             return res\n//         }\n//         // 兼容服务端返回的字符串数据\n//         if (typeof res === 'string') {\n//             res = res ? JSON.parse(res) : res\n//         }\n//         return res;\n//     },\n//     error => {\n//         console.log('err' + error) // for debug\n//         return Promise.reject(error)\n//     }\n// )\n\n\nexport default request\n\n"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AAEA,MAAMC,OAAO,GAAGF,KAAK,CAACG,MAAN,CAAa;EACzBC,OAAO,EAAEC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCF,OAAO,CAACC,GAAR,CAAYE,gBAApD,GAAuE,GADvD;EAEzBC,OAAO,EAAE;AAFgB,CAAb,CAAhB,C,CAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,eAAeP,OAAf"},"metadata":{},"sourceType":"module"}