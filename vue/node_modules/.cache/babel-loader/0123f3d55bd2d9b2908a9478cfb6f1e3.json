{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { keyMap } from 'simple-mind-map/src/utils/keyMap';\n/** \n * @Author: 王林 \n * @Date: 2021-04-24 15:20:46 \n * @Desc: 快捷按键、命令处理类 \n */\n\nexport default class KeyCommand {\n  /** \n   * @Author: 王林 \n   * @Date: 2021-04-24 15:21:32 \n   * @Desc: 构造函数 \n   */\n  constructor(opt) {\n    this.opt = opt;\n    this.mindMap = opt.mindMap;\n    this.shortcutMap = {//Enter: [fn]\n    };\n    this.shortcutMapCache = {};\n    this.isPause = false;\n    this.bindEvent();\n  }\n  /** \n   * @Author: 王林 \n   * @Date: 2022-08-14 08:57:55 \n   * @Desc: 暂停快捷键响应 \n   */\n\n\n  pause() {\n    this.isPause = true;\n  }\n  /** \n   * @Author: 王林 \n   * @Date: 2022-08-14 08:58:43 \n   * @Desc: 恢复快捷键响应 \n   */\n\n\n  recovery() {\n    this.isPause = false;\n  }\n  /** \n   * javascript comment \n   * @Author: 王林25 \n   * @Date: 2022-08-16 16:29:01 \n   * @Desc: 保存当前注册的快捷键数据，然后清空快捷键数据\n   */\n\n\n  save() {\n    this.shortcutMapCache = this.shortcutMap;\n    this.shortcutMap = {};\n  }\n  /** \n   * javascript comment \n   * @Author: 王林25 \n   * @Date: 2022-08-16 16:29:38 \n   * @Desc: 恢复保存的快捷键数据，然后清空缓存数据 \n   */\n\n\n  restore() {\n    this.shortcutMap = this.shortcutMapCache;\n    this.shortcutMapCache = {};\n  }\n  /** \n   * @Author: 王林 \n   * @Date: 2021-04-24 15:23:22 \n   * @Desc: 绑定事件 \n   */\n\n\n  bindEvent() {\n    window.addEventListener('keydown', e => {\n      if (this.isPause) {\n        return;\n      }\n\n      Object.keys(this.shortcutMap).forEach(key => {\n        if (this.checkKey(e, key)) {\n          e.stopPropagation();\n          e.preventDefault();\n          this.shortcutMap[key].forEach(fn => {\n            fn();\n          });\n        }\n      });\n    });\n  }\n  /** \n   * @Author: 王林 \n   * @Date: 2021-04-24 19:24:53 \n   * @Desc: 检查键值是否符合 \n   */\n\n\n  checkKey(e, key) {\n    let o = this.getOriginEventCodeArr(e);\n    let k = this.getKeyCodeArr(key);\n\n    if (o.length !== k.length) {\n      return false;\n    }\n\n    for (let i = 0; i < o.length; i++) {\n      let index = k.findIndex(item => {\n        return item === o[i];\n      });\n\n      if (index === -1) {\n        return false;\n      } else {\n        k.splice(index, 1);\n      }\n    }\n\n    return true;\n  }\n  /** \n   * @Author: 王林 \n   * @Date: 2021-04-24 19:15:19 \n   * @Desc: 获取事件对象里的键值数组 \n   */\n\n\n  getOriginEventCodeArr(e) {\n    let arr = [];\n\n    if (e.ctrlKey || e.metaKey) {\n      arr.push(keyMap['Control']);\n    }\n\n    if (e.altKey) {\n      arr.push(keyMap['Alt']);\n    }\n\n    if (e.shiftKey) {\n      arr.push(keyMap['Shift']);\n    }\n\n    if (!arr.includes(e.keyCode)) {\n      arr.push(e.keyCode);\n    }\n\n    return arr;\n  }\n  /** \n   * @Author: 王林 \n   * @Date: 2021-04-24 19:40:11 \n   * @Desc: 获取快捷键对应的键值数组 \n   */\n\n\n  getKeyCodeArr(key) {\n    let keyArr = key.split(/\\s*\\+\\s*/);\n    let arr = [];\n    keyArr.forEach(item => {\n      arr.push(keyMap[item]);\n    });\n    return arr;\n  }\n  /** \n   * @Author: 王林 \n   * @Date: 2021-04-24 15:23:00 \n   * @Desc: 添加快捷键命令 \n   * Enter\n   * Tab | Insert\n   * Shift + a\n   */\n\n\n  addShortcut(key, fn) {\n    key.split(/\\s*\\|\\s*/).forEach(item => {\n      if (this.shortcutMap[item]) {\n        this.shortcutMap[item].push(fn);\n      } else {\n        this.shortcutMap[item] = [fn];\n      }\n    });\n  }\n  /** \n   * javascript comment \n   * @Author: 王林25 \n   * @Date: 2021-07-27 14:06:16 \n   * @Desc: 移除快捷键命令 \n   */\n\n\n  removeShortcut(key, fn) {\n    key.split(/\\s*\\|\\s*/).forEach(item => {\n      if (this.shortcutMap[item]) {\n        if (fn) {\n          let index = this.shortcutMap[item].findIndex(f => {\n            return f === fn;\n          });\n\n          if (index !== -1) {\n            this.shortcutMap[item].splice(index, 1);\n          }\n        } else {\n          this.shortcutMap[item] = [];\n          delete this.shortcutMap[item];\n        }\n      }\n    });\n  }\n  /** \n   * @Author: 王林 \n   * @Date: 2022-08-14 08:49:58 \n   * @Desc: 获取指定快捷键的处理函数 \n   */\n\n\n  getShortcutFn(key) {\n    let res = [];\n    key.split(/\\s*\\|\\s*/).forEach(item => {\n      res = this.shortcutMap[item] || [];\n    });\n    return res;\n  }\n\n}","map":{"version":3,"names":["keyMap","KeyCommand","constructor","opt","mindMap","shortcutMap","shortcutMapCache","isPause","bindEvent","pause","recovery","save","restore","window","addEventListener","e","Object","keys","forEach","key","checkKey","stopPropagation","preventDefault","fn","o","getOriginEventCodeArr","k","getKeyCodeArr","length","i","index","findIndex","item","splice","arr","ctrlKey","metaKey","push","altKey","shiftKey","includes","keyCode","keyArr","split","addShortcut","removeShortcut","f","getShortcutFn","res"],"sources":["D:/新建文件夹/git项目/GinTest/vue/node_modules/simple-mind-map/src/KeyCommand.js"],"sourcesContent":["import { keyMap } from 'simple-mind-map/src/utils/keyMap';\n/** \n * @Author: 王林 \n * @Date: 2021-04-24 15:20:46 \n * @Desc: 快捷按键、命令处理类 \n */\nexport default class KeyCommand {\n    /** \n     * @Author: 王林 \n     * @Date: 2021-04-24 15:21:32 \n     * @Desc: 构造函数 \n     */\n    constructor(opt) {\n        this.opt = opt\n        this.mindMap = opt.mindMap\n        this.shortcutMap = {\n            //Enter: [fn]\n        }\n        this.shortcutMapCache = {}\n        this.isPause = false\n        this.bindEvent()\n    }\n\n    /** \n     * @Author: 王林 \n     * @Date: 2022-08-14 08:57:55 \n     * @Desc: 暂停快捷键响应 \n     */\n    pause() {\n        this.isPause = true\n    }\n\n    /** \n     * @Author: 王林 \n     * @Date: 2022-08-14 08:58:43 \n     * @Desc: 恢复快捷键响应 \n     */\n    recovery() {\n        this.isPause = false\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2022-08-16 16:29:01 \n     * @Desc: 保存当前注册的快捷键数据，然后清空快捷键数据\n     */\n    save() {\n        this.shortcutMapCache = this.shortcutMap\n        this.shortcutMap = {}\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2022-08-16 16:29:38 \n     * @Desc: 恢复保存的快捷键数据，然后清空缓存数据 \n     */\n    restore() {\n        this.shortcutMap = this.shortcutMapCache\n        this.shortcutMapCache = {}\n    }\n\n    /** \n     * @Author: 王林 \n     * @Date: 2021-04-24 15:23:22 \n     * @Desc: 绑定事件 \n     */\n    bindEvent() {\n        window.addEventListener('keydown', (e) => {\n            if (this.isPause) {\n                return\n            }\n            Object.keys(this.shortcutMap).forEach((key) => {\n                if (this.checkKey(e, key)) {\n                    e.stopPropagation()\n                    e.preventDefault()\n                    this.shortcutMap[key].forEach((fn) => {\n                        fn()\n                    })\n                }\n            })\n        })\n    }\n\n    /** \n     * @Author: 王林 \n     * @Date: 2021-04-24 19:24:53 \n     * @Desc: 检查键值是否符合 \n     */\n    checkKey(e, key) {\n        let o = this.getOriginEventCodeArr(e)\n        let k = this.getKeyCodeArr(key)\n        if (o.length !== k.length) {\n            return false\n        }\n        for (let i = 0; i < o.length; i++) {\n            let index = k.findIndex((item) => {\n                return item === o[i];\n            })\n            if (index === -1) {\n                return false\n            } else {\n                k.splice(index, 1)\n            }\n        }\n        return true\n    }\n\n    /** \n     * @Author: 王林 \n     * @Date: 2021-04-24 19:15:19 \n     * @Desc: 获取事件对象里的键值数组 \n     */\n    getOriginEventCodeArr(e) {\n        let arr = []\n        if (e.ctrlKey || e.metaKey) {\n            arr.push(keyMap['Control'])\n        }\n        if (e.altKey) {\n            arr.push(keyMap['Alt'])\n        }\n        if (e.shiftKey) {\n            arr.push(keyMap['Shift'])\n        }\n        if (!arr.includes(e.keyCode)) {\n            arr.push(e.keyCode)\n        }\n        return arr\n    }\n\n    /** \n     * @Author: 王林 \n     * @Date: 2021-04-24 19:40:11 \n     * @Desc: 获取快捷键对应的键值数组 \n     */\n    getKeyCodeArr(key) {\n        let keyArr = key.split(/\\s*\\+\\s*/)\n        let arr = []\n        keyArr.forEach((item) => {\n            arr.push(keyMap[item])\n        })\n        return arr\n    }\n\n    /** \n     * @Author: 王林 \n     * @Date: 2021-04-24 15:23:00 \n     * @Desc: 添加快捷键命令 \n     * Enter\n     * Tab | Insert\n     * Shift + a\n     */\n    addShortcut(key, fn) {\n        key.split(/\\s*\\|\\s*/).forEach((item) => {\n            if (this.shortcutMap[item]) {\n                this.shortcutMap[item].push(fn)\n            } else {\n                this.shortcutMap[item] = [fn]\n            }\n        })\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2021-07-27 14:06:16 \n     * @Desc: 移除快捷键命令 \n     */\n    removeShortcut(key, fn) {\n        key.split(/\\s*\\|\\s*/).forEach((item) => {\n            if (this.shortcutMap[item]) {\n                if (fn) {\n                    let index = this.shortcutMap[item].findIndex((f) => {\n                        return f === fn\n                    })\n                    if (index !== -1) {\n                        this.shortcutMap[item].splice(index, 1)\n                    }\n                } else {\n                    this.shortcutMap[item] = []\n                    delete this.shortcutMap[item]\n                }\n            }\n        })\n    }\n\n    /** \n     * @Author: 王林 \n     * @Date: 2022-08-14 08:49:58 \n     * @Desc: 获取指定快捷键的处理函数 \n     */\n    getShortcutFn(key) {\n        let res = []\n        key.split(/\\s*\\|\\s*/).forEach((item) => {\n            res = this.shortcutMap[item] || []\n        })\n        return res\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}