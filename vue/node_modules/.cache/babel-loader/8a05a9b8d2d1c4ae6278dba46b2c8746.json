{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport Style from './Style';\nimport Shape from './Shape';\nimport { resizeImgSize, asyncRun } from './utils';\nimport { Image, SVG, Circle, A, G, Rect, Text } from '@svgdotjs/svg.js';\nimport btnsSvg from './svg/btns';\nimport iconsSvg from './svg/icons';\n/** \n * javascript comment \n * @Author: 王林25 \n * @Date: 2021-04-06 11:26:00 \n * @Desc: 节点类\n */\n\nclass Node {\n  /** \n   * javascript comment \n   * @Author: 王林25 \n   * @Date: 2021-04-06 11:26:17 \n   * @Desc: 构造函数 \n   */\n  constructor(opt = {}) {\n    // 节点数据\n    this.nodeData = this.handleData(opt.data || {}); // id\n\n    this.uid = opt.uid; // 控制实例\n\n    this.mindMap = opt.mindMap; // 渲染实例\n\n    this.renderer = opt.renderer; // 渲染器\n\n    this.draw = opt.draw || null; // 主题配置\n\n    this.themeConfig = this.mindMap.themeConfig; // 样式实例\n\n    this.style = new Style(this, this.themeConfig); // 形状实例\n\n    this.shapeInstance = new Shape(this);\n    this.shapePadding = {\n      paddingX: 0,\n      paddingY: 0\n    }; // 是否是根节点\n\n    this.isRoot = opt.isRoot === undefined ? false : opt.isRoot; // 是否是概要节点\n\n    this.isGeneralization = opt.isGeneralization === undefined ? false : opt.isGeneralization;\n    this.generalizationBelongNode = null; // 节点层级\n\n    this.layerIndex = opt.layerIndex === undefined ? 0 : opt.layerIndex; // 节点宽\n\n    this.width = opt.width || 0; // 节点高\n\n    this.height = opt.height || 0; // left\n\n    this._left = opt.left || 0; // top\n\n    this._top = opt.top || 0; // 自定义位置\n\n    this.customLeft = opt.data.data.customLeft || undefined;\n    this.customTop = opt.data.data.customTop || undefined; // 是否正在拖拽中\n\n    this.isDrag = false; // 父节点\n\n    this.parent = opt.parent || null; // 子节点\n\n    this.children = opt.children || []; // 节点内容的容器\n\n    this.group = null; // 节点内容对象\n\n    this._imgData = null;\n    this._iconData = null;\n    this._textData = null;\n    this._hyperlinkData = null;\n    this._tagData = null;\n    this._noteData = null;\n    this.noteEl = null;\n    this._expandBtn = null;\n    this._lines = [];\n    this._generalizationLine = null;\n    this._generalizationNode = null; // 尺寸信息\n\n    this._rectInfo = {\n      imgContentWidth: 0,\n      imgContentHeight: 0,\n      textContentWidth: 0,\n      textContentHeight: 0\n    }; // 概要节点的宽高\n\n    this._generalizationNodeWidth = 0;\n    this._generalizationNodeHeight = 0; // 各种文字信息的间距\n\n    this.textContentItemMargin = this.mindMap.opt.textContentMargin; // 图片和文字节点的间距\n\n    this.blockContentMargin = this.mindMap.opt.imgTextMargin; // 展开收缩按钮尺寸\n\n    this.expandBtnSize = this.mindMap.opt.expandBtnSize; // 初始渲染\n\n    this.initRender = true; // 初始化\n    // this.createNodeData()\n\n    this.getSize();\n  } // 支持自定义位置\n\n\n  get left() {\n    return this.customLeft || this._left;\n  }\n\n  set left(val) {\n    this._left = val;\n  }\n\n  get top() {\n    return this.customTop || this._top;\n  }\n\n  set top(val) {\n    this._top = val;\n  }\n  /** \n   * @Author: 王林 \n   * @Date: 2021-07-12 07:40:47 \n   * @Desc: 更新主题配置 \n   */\n\n\n  updateThemeConfig() {\n    // 主题配置\n    this.themeConfig = this.mindMap.themeConfig; // 样式实例\n\n    this.style.updateThemeConfig(this.themeConfig);\n  }\n  /** \n   * @Author: 王林 \n   * @Date: 2021-07-05 23:11:39 \n   * @Desc: 复位部分布局时会重新设置的数据 \n   */\n\n\n  reset() {\n    this.children = [];\n    this.parent = null;\n    this.isRoot = false;\n    this.layerIndex = 0;\n    this.left = 0;\n    this.top = 0;\n  }\n  /** \n   * @Author: 王林 \n   * @Date: 2021-06-20 10:12:31 \n   * @Desc: 处理数据 \n   */\n\n\n  handleData(data) {\n    data.data.expand = data.data.expand === false ? false : true;\n    data.data.isActive = data.data.isActive === true ? true : false;\n    data.children = data.children || [];\n    return data;\n  }\n  /** \n   * javascript comment \n   * @Author: 王林25 \n   * @Date: 2022-08-02 19:53:40 \n   * @Desc: 检查节点是否存在自定义数据 \n   */\n\n\n  hasCustomPosition() {\n    return this.customLeft !== undefined && this.customTop !== undefined;\n  }\n  /** \n   * javascript comment \n   * @Author: 王林25 \n   * @Date: 2022-08-04 09:06:56 \n   * @Desc: 检查节点是否存在自定义位置的祖先节点 \n   */\n\n\n  ancestorHasCustomPosition() {\n    let node = this;\n\n    while (node) {\n      if (node.hasCustomPosition()) {\n        return true;\n      }\n\n      node = node.parent;\n    }\n\n    return false;\n  }\n  /** \n   * javascript comment \n   * @Author: 王林25 \n   * @Date: 2021-04-06 15:55:04 \n   * @Desc: 添加子节点 \n   */\n\n\n  addChildren(node) {\n    this.children.push(node);\n  }\n  /** \n   * @Author: 王林 \n   * @Date: 2021-07-06 22:08:09 \n   * @Desc: 创建节点的各个内容对象数据\n   */\n\n\n  createNodeData() {\n    this._imgData = this.createImgNode();\n    this._iconData = this.createIconNode();\n    this._textData = this.createTextNode();\n    this._hyperlinkData = this.createHyperlinkNode();\n    this._tagData = this.createTagNode();\n    this._noteData = this.createNoteNode();\n    this.createGeneralizationNode();\n  }\n  /** \n   * @Author: 王林 \n   * @Date: 2021-07-10 09:20:02 \n   * @Desc: 解绑所有事件 \n   */\n\n\n  removeAllEvent() {\n    if (this._noteData) {\n      this._noteData.node.off(['mouseover', 'mouseout']);\n    }\n\n    if (this._expandBtn) {\n      this._expandBtn.off(['mouseover', 'mouseout', 'click']);\n    }\n\n    if (this.group) {\n      this.group.off(['click', 'dblclick', 'contextmenu', 'mousedown', 'mouseup']);\n    }\n  }\n  /** \n   * @Author: 王林 \n   * @Date: 2021-07-07 21:27:24 \n   * @Desc: 移除节点内容\n   */\n\n\n  removeAllNode() {\n    // 节点内的内容\n    ;\n    [this._imgData, this._iconData, this._textData, this._hyperlinkData, this._tagData, this._noteData].forEach(item => {\n      if (item && item.node) item.node.remove();\n    });\n    this._imgData = null;\n    this._iconData = null;\n    this._textData = null;\n    this._hyperlinkData = null;\n    this._tagData = null;\n    this._noteData = null; // 展开收缩按钮\n\n    if (this._expandBtn) {\n      this._expandBtn.remove();\n\n      this._expandBtn = null;\n    } // 组\n\n\n    if (this.group) {\n      this.group.clear();\n      this.group.remove();\n      this.group = null;\n    } // 概要\n\n\n    this.removeGeneralization();\n  }\n  /** \n   * javascript comment \n   * @Author: 王林25 \n   * @Date: 2021-04-09 09:46:23 \n   * @Desc: 计算节点的宽高 \n   */\n\n\n  getSize() {\n    this.removeAllNode();\n    this.createNodeData();\n    let {\n      width,\n      height\n    } = this.getNodeRect(); // 判断节点尺寸是否有变化\n\n    let changed = this.width !== width || this.height !== height;\n    this.width = width;\n    this.height = height;\n    return changed;\n  }\n  /** \n   * javascript comment \n   * @Author: 王林25 \n   * @Date: 2021-04-06 14:52:17 \n   * @Desc: 计算节点尺寸信息 \n   */\n\n\n  getNodeRect() {\n    // 宽高\n    let imgContentWidth = 0;\n    let imgContentHeight = 0;\n    let textContentWidth = 0;\n    let textContentHeight = 0; // 存在图片\n\n    if (this._imgData) {\n      this._rectInfo.imgContentWidth = imgContentWidth = this._imgData.width;\n      this._rectInfo.imgContentHeight = imgContentHeight = this._imgData.height;\n    } // 图标\n\n\n    if (this._iconData.length > 0) {\n      textContentWidth += this._iconData.reduce((sum, cur) => {\n        textContentHeight = Math.max(textContentHeight, cur.height);\n        return sum += cur.width + this.textContentItemMargin;\n      }, 0);\n    } // 文字\n\n\n    if (this._textData) {\n      textContentWidth += this._textData.width;\n      textContentHeight = Math.max(textContentHeight, this._textData.height);\n    } // 超链接\n\n\n    if (this._hyperlinkData) {\n      textContentWidth += this._hyperlinkData.width;\n      textContentHeight = Math.max(textContentHeight, this._hyperlinkData.height);\n    } // 标签\n\n\n    if (this._tagData.length > 0) {\n      textContentWidth += this._tagData.reduce((sum, cur) => {\n        textContentHeight = Math.max(textContentHeight, cur.height);\n        return sum += cur.width + this.textContentItemMargin;\n      }, 0);\n    } // 备注\n\n\n    if (this._noteData) {\n      textContentWidth += this._noteData.width;\n      textContentHeight = Math.max(textContentHeight, this._noteData.height);\n    } // 文字内容部分的尺寸\n\n\n    this._rectInfo.textContentWidth = textContentWidth;\n    this._rectInfo.textContentHeight = textContentHeight; // 间距\n\n    let margin = imgContentHeight > 0 && textContentHeight > 0 ? this.blockContentMargin : 0;\n    let {\n      paddingX,\n      paddingY\n    } = this.getPaddingVale(); // 纯内容宽高\n\n    let _width = Math.max(imgContentWidth, textContentWidth);\n\n    let _height = imgContentHeight + textContentHeight; // 计算节点形状需要的附加内边距\n\n\n    let {\n      paddingX: shapePaddingX,\n      paddingY: shapePaddingY\n    } = this.shapeInstance.getShapePadding(_width, _height, paddingX, paddingY);\n    this.shapePadding.paddingX = shapePaddingX;\n    this.shapePadding.paddingY = shapePaddingY;\n    return {\n      width: _width + paddingX * 2 + shapePaddingX * 2,\n      height: _height + paddingY * 2 + margin + shapePaddingY * 2\n    };\n  }\n  /** \n   * javascript comment \n   * @Author: 王林25 \n   * @Date: 2021-04-09 14:06:17 \n   * @Desc: 创建图片节点 \n   */\n\n\n  createImgNode() {\n    let img = this.nodeData.data.image;\n\n    if (!img) {\n      return;\n    }\n\n    let imgSize = this.getImgShowSize();\n    let node = new Image().load(img).size(...imgSize);\n\n    if (this.nodeData.data.imageTitle) {\n      node.attr('title', this.nodeData.data.imageTitle);\n    }\n\n    return {\n      node,\n      width: imgSize[0],\n      height: imgSize[1]\n    };\n  }\n  /** \n   * javascript comment \n   * @Author: 王林25 \n   * @Date: 2021-04-09 10:12:51 \n   * @Desc: 获取图片显示宽高 \n   */\n\n\n  getImgShowSize() {\n    return resizeImgSize(this.nodeData.data.imageSize.width, this.nodeData.data.imageSize.height, this.themeConfig.imgMaxWidth, this.themeConfig.imgMaxHeight);\n  }\n  /** \n   * javascript comment \n   * @Author: 王林25 \n   * @Date: 2021-04-09 14:10:48 \n   * @Desc: 创建icon节点 \n   */\n\n\n  createIconNode() {\n    let _data = this.nodeData.data;\n\n    if (!_data.icon || _data.icon.length <= 0) {\n      return [];\n    }\n\n    let iconSize = this.themeConfig.iconSize;\n    return _data.icon.map(item => {\n      return {\n        node: SVG(iconsSvg.getNodeIconListIcon(item)).size(iconSize, iconSize),\n        width: iconSize,\n        height: iconSize\n      };\n    });\n  }\n  /** \n   * javascript comment \n   * @Author: 王林25 \n   * @Date: 2021-04-09 14:08:56 \n   * @Desc: 创建文本节点 \n   */\n\n\n  createTextNode() {\n    let g = new G();\n    let fontSize = this.getStyle('fontSize', this.isRoot, this.nodeData.data.isActive);\n    let lineHeight = this.getStyle('lineHeight', this.isRoot, this.nodeData.data.isActive);\n    this.nodeData.data.text.split(/\\n/img).forEach((item, index) => {\n      let node = new Text().text(item);\n      this.style.text(node);\n      node.y(fontSize * lineHeight * index);\n      g.add(node);\n    });\n    let {\n      width,\n      height\n    } = g.bbox();\n    return {\n      node: g,\n      width,\n      height\n    };\n  }\n  /** \n   * @Author: 王林 \n   * @Date: 2021-06-20 15:28:54 \n   * @Desc: 创建超链接节点 \n   */\n\n\n  createHyperlinkNode() {\n    let {\n      hyperlink,\n      hyperlinkTitle\n    } = this.nodeData.data;\n\n    if (!hyperlink) {\n      return;\n    }\n\n    let iconSize = this.themeConfig.iconSize;\n    let node = new SVG(); // 超链接节点\n\n    let a = new A().to(hyperlink).target('_blank');\n    a.node.addEventListener('click', e => {\n      e.stopPropagation();\n    });\n\n    if (hyperlinkTitle) {\n      a.attr('title', hyperlinkTitle);\n    } // 添加一个透明的层，作为鼠标区域\n\n\n    a.rect(iconSize, iconSize).fill({\n      color: 'transparent'\n    }); // 超链接图标\n\n    let iconNode = SVG(iconsSvg.hyperlink).size(iconSize, iconSize);\n    this.style.iconNode(iconNode);\n    a.add(iconNode);\n    node.add(a);\n    return {\n      node,\n      width: iconSize,\n      height: iconSize\n    };\n  }\n  /** \n   * @Author: 王林 \n   * @Date: 2021-06-20 19:49:15 \n   * @Desc: 创建标签节点 \n   */\n\n\n  createTagNode() {\n    let tagData = this.nodeData.data.tag;\n\n    if (!tagData || tagData.length <= 0) {\n      return [];\n    }\n\n    let nodes = [];\n    tagData.slice(0, this.mindMap.opt.maxTag).forEach((item, index) => {\n      let tag = new G(); // 标签文本\n\n      let text = new Text().text(item).x(8).cy(10);\n      this.style.tagText(text, index);\n      let {\n        width,\n        height\n      } = text.bbox(); // 标签矩形\n\n      let rect = new Rect().size(width + 16, 20);\n      this.style.tagRect(rect, index);\n      tag.add(rect).add(text);\n      nodes.push({\n        node: tag,\n        width: width + 16,\n        height: 20\n      });\n    });\n    return nodes;\n  }\n  /** \n   * @Author: 王林 \n   * @Date: 2021-06-20 21:19:36 \n   * @Desc: 创建备注节点 \n   */\n\n\n  createNoteNode() {\n    if (!this.nodeData.data.note) {\n      return null;\n    }\n\n    let iconSize = this.themeConfig.iconSize;\n    let node = new SVG().attr('cursor', 'pointer'); // 透明的层，用来作为鼠标区域\n\n    node.add(new Rect().size(iconSize, iconSize).fill({\n      color: 'transparent'\n    })); // 备注图标\n\n    let iconNode = SVG(iconsSvg.note).size(iconSize, iconSize);\n    this.style.iconNode(iconNode);\n    node.add(iconNode); // 备注tooltip\n\n    if (!this.mindMap.opt.customNoteContentShow) {\n      if (!this.noteEl) {\n        this.noteEl = document.createElement('div');\n        this.noteEl.style.cssText = `\n                    position: absolute;\n                    padding: 10px;\n                    border-radius: 5px;\n                    box-shadow: 0 2px 5px rgb(0 0 0 / 10%);\n                    display: none;\n                    background-color: #fff;\n                `;\n        document.body.appendChild(this.noteEl);\n      }\n\n      this.noteEl.innerText = this.nodeData.data.note;\n    }\n\n    node.on('mouseover', () => {\n      let {\n        left,\n        top\n      } = node.node.getBoundingClientRect();\n\n      if (!this.mindMap.opt.customNoteContentShow) {\n        this.noteEl.style.left = left + 'px';\n        this.noteEl.style.top = top + iconSize + 'px';\n        this.noteEl.style.display = 'block';\n      } else {\n        this.mindMap.opt.customNoteContentShow.show(this.nodeData.data.note, left, top + iconSize);\n      }\n    });\n    node.on('mouseout', () => {\n      if (!this.mindMap.opt.customNoteContentShow) {\n        this.noteEl.style.display = 'none';\n      } else {\n        this.mindMap.opt.customNoteContentShow.hide();\n      }\n    });\n    return {\n      node,\n      width: iconSize,\n      height: iconSize\n    };\n  }\n  /** \n   * javascript comment \n   * @Author: 王林 \n   * @Date: 2022-09-12 22:02:07 \n   * @Desc: 获取节点形状 \n   */\n\n\n  getShape() {\n    return this.style.getStyle('shape', false, false);\n  }\n  /** \n   * javascript comment \n   * @Author: 王林25 \n   * @Date: 2021-04-09 11:10:11 \n   * @Desc: 定位节点内容\n   */\n\n\n  layout() {\n    let {\n      width,\n      height,\n      textContentItemMargin\n    } = this;\n    let {\n      paddingY\n    } = this.getPaddingVale();\n    paddingY += this.shapePadding.paddingY; // 创建组\n\n    this.group = new G(); // 概要节点添加一个带所属节点id的类名\n\n    if (this.isGeneralization && this.generalizationBelongNode) {\n      this.group.addClass('generalization_' + this.generalizationBelongNode.uid);\n    }\n\n    this.draw.add(this.group);\n    this.update(true); // 节点形状\n\n    const shape = this.getShape();\n    this.style[shape === 'rectangle' ? 'rect' : 'shape'](this.shapeInstance.createShape()); // 图片节点\n\n    let imgHeight = 0;\n\n    if (this._imgData) {\n      imgHeight = this._imgData.height;\n      this.group.add(this._imgData.node);\n\n      this._imgData.node.cx(width / 2).y(paddingY);\n    } // 内容节点\n\n\n    let textContentNested = new G();\n    let textContentOffsetX = 0; // icon\n\n    let iconNested = new G();\n\n    if (this._iconData && this._iconData.length > 0) {\n      let iconLeft = 0;\n\n      this._iconData.forEach(item => {\n        item.node.x(textContentOffsetX + iconLeft).y((this._rectInfo.textContentHeight - item.height) / 2);\n        iconNested.add(item.node);\n        iconLeft += item.width + textContentItemMargin;\n      });\n\n      textContentNested.add(iconNested);\n      textContentOffsetX += iconLeft;\n    } // 文字\n\n\n    if (this._textData) {\n      this._textData.node.x(textContentOffsetX).y(0);\n\n      textContentNested.add(this._textData.node);\n      textContentOffsetX += this._textData.width + textContentItemMargin;\n    } // 超链接\n\n\n    if (this._hyperlinkData) {\n      this._hyperlinkData.node.x(textContentOffsetX).y((this._rectInfo.textContentHeight - this._hyperlinkData.height) / 2);\n\n      textContentNested.add(this._hyperlinkData.node);\n      textContentOffsetX += this._hyperlinkData.width + textContentItemMargin;\n    } // 标签\n\n\n    let tagNested = new G();\n\n    if (this._tagData && this._tagData.length > 0) {\n      let tagLeft = 0;\n\n      this._tagData.forEach(item => {\n        item.node.x(textContentOffsetX + tagLeft).y((this._rectInfo.textContentHeight - item.height) / 2);\n        tagNested.add(item.node);\n        tagLeft += item.width + textContentItemMargin;\n      });\n\n      textContentNested.add(tagNested);\n      textContentOffsetX += tagLeft;\n    } // 备注\n\n\n    if (this._noteData) {\n      this._noteData.node.x(textContentOffsetX).y((this._rectInfo.textContentHeight - this._noteData.height) / 2);\n\n      textContentNested.add(this._noteData.node);\n      textContentOffsetX += this._noteData.width;\n    } // 文字内容整体\n\n\n    textContentNested.translate(width / 2 - textContentNested.bbox().width / 2, imgHeight + paddingY + (imgHeight > 0 && this._rectInfo.textContentHeight > 0 ? this.blockContentMargin : 0));\n    this.group.add(textContentNested); // 单击事件，选中节点\n\n    this.group.on('click', e => {\n      this.mindMap.emit('node_click', this, e);\n      this.active(e);\n    });\n    this.group.on('mousedown', e => {\n      e.stopPropagation();\n      this.mindMap.emit('node_mousedown', this, e);\n    });\n    this.group.on('mouseup', e => {\n      e.stopPropagation();\n      this.mindMap.emit('node_mouseup', this, e);\n    }); // 双击事件\n\n    this.group.on('dblclick', e => {\n      if (this.mindMap.opt.readonly) {\n        return;\n      }\n\n      e.stopPropagation();\n      this.mindMap.emit('node_dblclick', this, e);\n    }); // 右键菜单事件\n\n    this.group.on('contextmenu', e => {\n      if (this.mindMap.opt.readonly || this.isGeneralization) {\n        return;\n      }\n\n      e.stopPropagation();\n      e.preventDefault();\n\n      if (this.nodeData.data.isActive) {\n        this.renderer.clearActive();\n      }\n\n      this.active(e);\n      this.mindMap.emit('node_contextmenu', e, this);\n    });\n  }\n  /** \n   * @Author: 王林 \n   * @Date: 2021-07-10 16:44:22 \n   * @Desc: 激活节点 \n   */\n\n\n  active(e) {\n    if (this.mindMap.opt.readonly) {\n      return;\n    }\n\n    e && e.stopPropagation();\n\n    if (this.nodeData.data.isActive) {\n      return;\n    }\n\n    this.mindMap.emit('before_node_active', this, this.renderer.activeNodeList);\n    this.renderer.clearActive();\n    this.mindMap.execCommand('SET_NODE_ACTIVE', this, true);\n    this.renderer.addActiveNode(this);\n    this.mindMap.emit('node_active', this, this.renderer.activeNodeList);\n  }\n  /** \n   * @Author: 王林 \n   * @Date: 2021-07-04 20:20:09 \n   * @Desc: 渲染节点到画布，会移除旧的，创建新的\n   */\n\n\n  renderNode() {\n    // 连线\n    this.renderLine();\n    this.removeAllEvent();\n    this.removeAllNode();\n    this.createNodeData();\n    this.layout();\n  }\n  /** \n   * @Author: 王林 \n   * @Date: 2021-07-04 22:47:01 \n   * @Desc: 更新节点\n   */\n\n\n  update(layout = false) {\n    if (!this.group) {\n      return;\n    } // 需要移除展开收缩按钮\n\n\n    if (this._expandBtn && this.nodeData.children.length <= 0) {\n      this.removeExpandBtn();\n    } else if (!this._expandBtn && this.nodeData.children.length > 0) {\n      // 需要添加展开收缩按钮\n      this.renderExpandBtn();\n    } else {\n      this.updateExpandBtnPos();\n    }\n\n    this.renderGeneralization();\n    let t = this.group.transform();\n\n    if (!layout) {\n      this.group.animate(300).translate(this.left - t.translateX, this.top - t.translateY);\n    } else {\n      this.group.translate(this.left - t.translateX, this.top - t.translateY);\n    }\n  }\n  /** \n   * javascript comment \n   * @Author: 王林25 \n   * @Date: 2021-04-07 13:55:58 \n   * @Desc: 递归渲染 \n   */\n\n\n  render() {\n    // 节点\n    if (this.initRender) {\n      this.initRender = false;\n      this.renderNode();\n    } else {\n      // 连线\n      this.renderLine();\n      this.update();\n    } // 子节点\n\n\n    if (this.children && this.children.length && this.nodeData.data.expand !== false) {\n      asyncRun(this.children.map(item => {\n        return () => {\n          item.render();\n        };\n      }));\n    } // 手动插入的节点立即获得焦点并且开启编辑模式\n\n\n    if (this.nodeData.inserting) {\n      delete this.nodeData.inserting;\n      this.active();\n      this.mindMap.emit('node_dblclick', this);\n    }\n  }\n  /** \n   * @Author: 王林 \n   * @Date: 2021-07-10 09:24:55 \n   * @Desc: 递归删除 \n   */\n\n\n  remove() {\n    this.initRender = true;\n    this.removeAllEvent();\n    this.removeAllNode();\n    this.removeLine(); // 子节点\n\n    if (this.children && this.children.length) {\n      asyncRun(this.children.map(item => {\n        return () => {\n          item.remove();\n        };\n      }));\n    }\n  }\n  /** \n   * javascript comment \n   * @Author: 王林25 \n   * @Date: 2021-11-23 18:39:14 \n   * @Desc: 隐藏节点 \n   */\n\n\n  hide() {\n    this.group.hide();\n    this.hideGeneralization();\n\n    if (this.parent) {\n      let index = this.parent.children.indexOf(this);\n\n      this.parent._lines[index].hide();\n    } // 子节点\n\n\n    if (this.children && this.children.length) {\n      asyncRun(this.children.map(item => {\n        return () => {\n          item.hide();\n        };\n      }));\n    }\n  }\n  /** \n   * javascript comment \n   * @Author: 王林25 \n   * @Date: 2021-11-23 18:39:14 \n   * @Desc: 显示节点 \n   */\n\n\n  show() {\n    if (!this.group) {\n      return;\n    }\n\n    this.group.show();\n    this.showGeneralization();\n\n    if (this.parent) {\n      let index = this.parent.children.indexOf(this);\n      this.parent._lines[index] && this.parent._lines[index].show();\n    } // 子节点\n\n\n    if (this.children && this.children.length) {\n      asyncRun(this.children.map(item => {\n        return () => {\n          item.show();\n        };\n      }));\n    }\n  }\n  /** \n   * @Author: 王林 \n   * @Date: 2021-04-10 22:01:53 \n   * @Desc: 连线 \n   */\n\n\n  renderLine(deep = false) {\n    if (this.nodeData.data.expand === false) {\n      return;\n    }\n\n    let childrenLen = this.nodeData.children.length;\n\n    if (childrenLen > this._lines.length) {\n      // 创建缺少的线\n      new Array(childrenLen - this._lines.length).fill(0).forEach(() => {\n        this._lines.push(this.draw.path());\n      });\n    } else if (childrenLen < this._lines.length) {\n      // 删除多余的线\n      this._lines.slice(childrenLen).forEach(line => {\n        line.remove();\n      });\n\n      this._lines = this._lines.slice(0, childrenLen);\n    } // 画线\n\n\n    this.renderer.layout.renderLine(this, this._lines, (line, node) => {\n      // 添加样式\n      this.styleLine(line, node);\n    }); // 子级的连线也需要更新\n\n    if (deep && this.children && this.children.length > 0) {\n      this.children.forEach(item => {\n        item.renderLine(deep);\n      });\n    }\n  }\n  /** \n   * javascript comment \n   * @Author: flydreame \n   * @Date: 2022-09-17 12:41:29 \n   * @Desc: 设置连线样式 \n   */\n\n\n  styleLine(line, node) {\n    let width = node.getSelfInhertStyle('lineWidth') || node.getStyle('lineWidth', true);\n    let color = node.getSelfInhertStyle('lineColor') || node.getStyle('lineColor', true);\n    let dasharray = node.getSelfInhertStyle('lineDasharray') || node.getStyle('lineDasharray', true);\n    this.style.line(line, {\n      width,\n      color,\n      dasharray\n    });\n  }\n  /** \n   * @Author: 王林 \n   * @Date: 2021-07-10 16:40:21 \n   * @Desc: 移除连线 \n   */\n\n\n  removeLine() {\n    this._lines.forEach(line => {\n      line.remove();\n    });\n\n    this._lines = [];\n  }\n  /** \n   * javascript comment \n   * @Author: 王林25 \n   * @Date: 2022-08-01 09:27:30 \n   * @Desc: 检查是否存在概要 \n   */\n\n\n  checkHasGeneralization() {\n    return !!this.nodeData.data.generalization;\n  }\n  /** \n   * @Author: 王林 \n   * @Date: 2022-07-31 09:41:28 \n   * @Desc: 创建概要节点 \n   */\n\n\n  createGeneralizationNode() {\n    if (this.isGeneralization || !this.checkHasGeneralization()) {\n      return;\n    }\n\n    if (!this._generalizationLine) {\n      this._generalizationLine = this.draw.path();\n    }\n\n    if (!this._generalizationNode) {\n      this._generalizationNode = new Node({\n        data: {\n          data: this.nodeData.data.generalization\n        },\n        uid: this.mindMap.uid++,\n        renderer: this.renderer,\n        mindMap: this.mindMap,\n        draw: this.draw,\n        isGeneralization: true\n      });\n      this._generalizationNodeWidth = this._generalizationNode.width;\n      this._generalizationNodeHeight = this._generalizationNode.height;\n      this._generalizationNode.generalizationBelongNode = this;\n\n      if (this.nodeData.data.generalization.isActive) {\n        this.renderer.addActiveNode(this._generalizationNode);\n      }\n    }\n  }\n  /** \n   * javascript comment \n   * @Author: 王林25 \n   * @Date: 2022-08-01 15:38:52 \n   * @Desc: 更新概要节点 \n   */\n\n\n  updateGeneralization() {\n    this.removeGeneralization();\n    this.createGeneralizationNode();\n  }\n  /** \n   * @Author: 王林 \n   * @Date: 2022-07-30 08:35:51 \n   * @Desc: 渲染概要节点 \n   */\n\n\n  renderGeneralization() {\n    if (this.isGeneralization) {\n      return;\n    }\n\n    if (!this.checkHasGeneralization()) {\n      this.removeGeneralization();\n      this._generalizationNodeWidth = 0;\n      this._generalizationNodeHeight = 0;\n      return;\n    }\n\n    if (this.nodeData.data.expand === false) {\n      this.removeGeneralization();\n      return;\n    }\n\n    this.createGeneralizationNode();\n    this.renderer.layout.renderGeneralization(this, this._generalizationLine, this._generalizationNode);\n    this.style.generalizationLine(this._generalizationLine);\n\n    this._generalizationNode.render();\n  }\n  /** \n   * @Author: 王林 \n   * @Date: 2022-07-30 13:11:27 \n   * @Desc: 删除概要节点 \n   */\n\n\n  removeGeneralization() {\n    if (this._generalizationLine) {\n      this._generalizationLine.remove();\n\n      this._generalizationLine = null;\n    }\n\n    if (this._generalizationNode) {\n      // 删除概要节点时要同步从激活节点里删除\n      this.renderer.removeActiveNode(this._generalizationNode);\n\n      this._generalizationNode.remove();\n\n      this._generalizationNode = null;\n    } // hack修复当激活一个节点时创建概要，然后立即激活创建的概要节点后会重复创建概要节点并且无法删除的问题\n\n\n    if (this.generalizationBelongNode) {\n      this.draw.find('.generalization_' + this.generalizationBelongNode.uid).remove();\n    }\n  }\n  /** \n   * javascript comment \n   * @Author: 王林25 \n   * @Date: 2022-08-01 09:56:46 \n   * @Desc: 隐藏概要节点 \n   */\n\n\n  hideGeneralization() {\n    if (this._generalizationLine) {\n      this._generalizationLine.hide();\n    }\n\n    if (this._generalizationNode) {\n      this._generalizationNode.hide();\n    }\n  }\n  /** \n   * javascript comment \n   * @Author: 王林25 \n   * @Date: 2022-08-01 09:57:42 \n   * @Desc: 显示概要节点 \n   */\n\n\n  showGeneralization() {\n    if (this._generalizationLine) {\n      this._generalizationLine.show();\n    }\n\n    if (this._generalizationNode) {\n      this._generalizationNode.show();\n    }\n  }\n  /** \n   * @Author: 王林 \n   * @Date: 2021-07-10 17:59:14 \n   * @Desc: 创建或更新展开收缩按钮内容 \n   */\n\n\n  updateExpandBtnNode() {\n    if (this._expandBtn) {\n      this._expandBtn.clear();\n    }\n\n    let iconSvg;\n\n    if (this.nodeData.data.expand === false) {\n      iconSvg = btnsSvg.open;\n    } else {\n      iconSvg = btnsSvg.close;\n    }\n\n    let node = SVG(iconSvg).size(this.expandBtnSize, this.expandBtnSize);\n    let fillNode = new Circle().size(this.expandBtnSize);\n    node.x(0).y(-this.expandBtnSize / 2);\n    fillNode.x(0).y(-this.expandBtnSize / 2);\n    this.style.iconBtn(node, fillNode);\n    if (this._expandBtn) this._expandBtn.add(fillNode).add(node);\n  }\n  /** \n   * javascript comment \n   * @Author: 王林25 \n   * @Date: 2021-07-12 18:18:13 \n   * @Desc: 更新展开收缩按钮位置 \n   */\n\n\n  updateExpandBtnPos() {\n    if (!this._expandBtn) {\n      return;\n    }\n\n    this.renderer.layout.renderExpandBtn(this, this._expandBtn);\n  }\n  /** \n   * @Author: 王林 \n   * @Date: 2021-04-11 19:47:01 \n   * @Desc: 展开收缩按钮 \n   */\n\n\n  renderExpandBtn() {\n    if (!this.nodeData.children || this.nodeData.children.length <= 0 || this.isRoot) {\n      return;\n    }\n\n    this._expandBtn = new G();\n    this.updateExpandBtnNode();\n\n    this._expandBtn.on('mouseover', e => {\n      e.stopPropagation();\n\n      this._expandBtn.css({\n        cursor: 'pointer'\n      });\n    });\n\n    this._expandBtn.on('mouseout', e => {\n      e.stopPropagation();\n\n      this._expandBtn.css({\n        cursor: 'auto'\n      });\n    });\n\n    this._expandBtn.on('click', e => {\n      e.stopPropagation(); // 展开收缩\n\n      this.mindMap.execCommand('SET_NODE_EXPAND', this, !this.nodeData.data.expand);\n      this.mindMap.emit('expand_btn_click', this);\n    });\n\n    this.group.add(this._expandBtn);\n    this.updateExpandBtnPos();\n  }\n  /** \n   * @Author: 王林 \n   * @Date: 2021-07-11 13:26:00 \n   * @Desc: 移除展开收缩按钮 \n   */\n\n\n  removeExpandBtn() {\n    if (this._expandBtn) {\n      this._expandBtn.off(['mouseover', 'mouseout', 'click']);\n\n      this._expandBtn.clear();\n\n      this._expandBtn.remove();\n\n      this._expandBtn = null;\n    }\n  }\n  /** \n   * javascript comment \n   * @Author: 王林25 \n   * @Date: 2021-11-25 09:51:37 \n   * @Desc: 检测当前节点是否是某个节点的祖先节点\n   */\n\n\n  isParent(node) {\n    if (this === node) {\n      return false;\n    }\n\n    let parent = node.parent;\n\n    while (parent) {\n      if (this === parent) {\n        return true;\n      }\n\n      parent = parent.parent;\n    }\n\n    return false;\n  }\n  /** \n   * javascript comment \n   * @Author: 王林25 \n   * @Date: 2021-11-25 10:32:34 \n   * @Desc: 检测当前节点是否是某个节点的兄弟节点\n   */\n\n\n  isBrother(node) {\n    if (!this.parent || this === node) {\n      return false;\n    }\n\n    return this.parent.children.find(item => {\n      return item === node;\n    });\n  }\n  /** \n   * @Author: 王林 \n   * @Date: 2021-06-20 22:51:57 \n   * @Desc: 获取padding值 \n   */\n\n\n  getPaddingVale() {\n    return {\n      paddingX: this.getStyle('paddingX', true, this.nodeData.data.isActive),\n      paddingY: this.getStyle('paddingY', true, this.nodeData.data.isActive)\n    };\n  }\n  /** \n   * @Author: 王林 \n   * @Date: 2021-05-04 21:48:49 \n   * @Desc: 获取某个样式 \n   */\n\n\n  getStyle(prop, root, isActive) {\n    let v = this.style.merge(prop, root, isActive);\n    return v === undefined ? '' : v;\n  }\n  /** \n   * javascript comment \n   * @Author: flydreame \n   * @Date: 2022-09-17 11:21:15 \n   * @Desc: 获取自定义样式 \n   */\n\n\n  getSelfStyle(prop) {\n    return this.style.getSelfStyle(prop);\n  }\n  /** \n   * javascript comment \n   * @Author: flydreame \n   * @Date: 2022-09-17 11:21:26 \n   * @Desc:  获取最近一个存在自身自定义样式的祖先节点的自定义样式\n   */\n\n\n  getParentSelfStyle(prop) {\n    if (this.parent) {\n      return this.parent.getSelfStyle(prop) || this.parent.getParentSelfStyle(prop);\n    }\n\n    return null;\n  }\n  /** \n   * javascript comment \n   * @Author: flydreame \n   * @Date: 2022-09-17 12:15:30 \n   * @Desc: 获取自身可继承的自定义样式 \n   */\n\n\n  getSelfInhertStyle(prop) {\n    return this.getSelfStyle(prop) // 自身\n    || this.getParentSelfStyle(prop); // 父级\n  }\n  /** \n   * @Author: 王林 \n   * @Date: 2021-05-04 22:18:07 \n   * @Desc: 修改某个样式 \n   */\n\n\n  setStyle(prop, value, isActive) {\n    this.mindMap.execCommand('SET_NODE_STYLE', this, prop, value, isActive);\n  }\n  /** \n   * @Author: 王林 \n   * @Date: 2021-06-22 22:04:02 \n   * @Desc: 获取数据 \n   */\n\n\n  getData(key) {\n    return key ? this.nodeData.data[key] || '' : this.nodeData.data;\n  }\n  /** \n   * @Author: 王林 \n   * @Date: 2021-06-22 22:12:01 \n   * @Desc: 设置数据 \n   */\n\n\n  setData(data = {}) {\n    this.mindMap.execCommand('SET_NODE_DATA', this, data);\n  }\n  /** \n   * @Author: 王林 \n   * @Date: 2021-07-10 08:41:28 \n   * @Desc: 设置文本 \n   */\n\n\n  setText(text) {\n    this.mindMap.execCommand('SET_NODE_TEXT', this, text);\n  }\n  /** \n   * @Author: 王林 \n   * @Date: 2021-07-10 08:42:19 \n   * @Desc: 设置图片 \n   */\n\n\n  setImage(imgData) {\n    this.mindMap.execCommand('SET_NODE_IMAGE', this, imgData);\n  }\n  /** \n   * @Author: 王林 \n   * @Date: 2021-07-10 08:47:29 \n   * @Desc: 设置图标 \n   */\n\n\n  setIcon(icons) {\n    this.mindMap.execCommand('SET_NODE_ICON', this, icons);\n  }\n  /** \n   * @Author: 王林 \n   * @Date: 2021-07-10 08:50:41 \n   * @Desc: 设置超链接 \n   */\n\n\n  setHyperlink(link, title) {\n    this.mindMap.execCommand('SET_NODE_HYPERLINK', this, link, title);\n  }\n  /** \n   * @Author: 王林 \n   * @Date: 2021-07-10 08:53:24 \n   * @Desc: 设置备注 \n   */\n\n\n  setNote(note) {\n    this.mindMap.execCommand('SET_NODE_NOTE', this, note);\n  }\n  /** \n   * @Author: 王林 \n   * @Date: 2021-07-10 08:55:08 \n   * @Desc: 设置标签 \n   */\n\n\n  setTag(tag) {\n    this.mindMap.execCommand('SET_NODE_TAG', this, tag);\n  }\n  /** \n   * javascript comment \n   * @Author: 王林 \n   * @Date: 2022-09-12 21:47:45 \n   * @Desc: 设置形状 \n   */\n\n\n  setShape(shape) {\n    this.mindMap.execCommand('SET_NODE_SHAPE', this, shape);\n  }\n\n}\n\nexport default Node;","map":{"version":3,"names":["Style","Shape","resizeImgSize","asyncRun","Image","SVG","Circle","A","G","Rect","Text","btnsSvg","iconsSvg","Node","constructor","opt","nodeData","handleData","data","uid","mindMap","renderer","draw","themeConfig","style","shapeInstance","shapePadding","paddingX","paddingY","isRoot","undefined","isGeneralization","generalizationBelongNode","layerIndex","width","height","_left","left","_top","top","customLeft","customTop","isDrag","parent","children","group","_imgData","_iconData","_textData","_hyperlinkData","_tagData","_noteData","noteEl","_expandBtn","_lines","_generalizationLine","_generalizationNode","_rectInfo","imgContentWidth","imgContentHeight","textContentWidth","textContentHeight","_generalizationNodeWidth","_generalizationNodeHeight","textContentItemMargin","textContentMargin","blockContentMargin","imgTextMargin","expandBtnSize","initRender","getSize","val","updateThemeConfig","reset","expand","isActive","hasCustomPosition","ancestorHasCustomPosition","node","addChildren","push","createNodeData","createImgNode","createIconNode","createTextNode","createHyperlinkNode","createTagNode","createNoteNode","createGeneralizationNode","removeAllEvent","off","removeAllNode","forEach","item","remove","clear","removeGeneralization","getNodeRect","changed","length","reduce","sum","cur","Math","max","margin","getPaddingVale","_width","_height","shapePaddingX","shapePaddingY","getShapePadding","img","image","imgSize","getImgShowSize","load","size","imageTitle","attr","imageSize","imgMaxWidth","imgMaxHeight","_data","icon","iconSize","map","getNodeIconListIcon","g","fontSize","getStyle","lineHeight","text","split","index","y","add","bbox","hyperlink","hyperlinkTitle","a","to","target","addEventListener","e","stopPropagation","rect","fill","color","iconNode","tagData","tag","nodes","slice","maxTag","x","cy","tagText","tagRect","note","customNoteContentShow","document","createElement","cssText","body","appendChild","innerText","on","getBoundingClientRect","display","show","hide","getShape","layout","addClass","update","shape","createShape","imgHeight","cx","textContentNested","textContentOffsetX","iconNested","iconLeft","tagNested","tagLeft","translate","emit","active","readonly","preventDefault","clearActive","activeNodeList","execCommand","addActiveNode","renderNode","renderLine","removeExpandBtn","renderExpandBtn","updateExpandBtnPos","renderGeneralization","t","transform","animate","translateX","translateY","render","inserting","removeLine","hideGeneralization","indexOf","showGeneralization","deep","childrenLen","Array","path","line","styleLine","getSelfInhertStyle","dasharray","checkHasGeneralization","generalization","updateGeneralization","generalizationLine","removeActiveNode","find","updateExpandBtnNode","iconSvg","open","close","fillNode","iconBtn","css","cursor","isParent","isBrother","prop","root","v","merge","getSelfStyle","getParentSelfStyle","setStyle","value","getData","key","setData","setText","setImage","imgData","setIcon","icons","setHyperlink","link","title","setNote","setTag","setShape"],"sources":["D:/新建文件夹/git项目/GinTest/vue/node_modules/simple-mind-map/src/Node.js"],"sourcesContent":["import Style from './Style'\nimport Shape from './Shape'\nimport {\n    resizeImgSize,\n    asyncRun\n} from './utils'\nimport {\n    Image,\n    SVG,\n    Circle,\n    A,\n    G,\n    Rect,\n    Text\n} from '@svgdotjs/svg.js'\nimport btnsSvg from './svg/btns'\nimport iconsSvg from './svg/icons'\n\n/** \n * javascript comment \n * @Author: 王林25 \n * @Date: 2021-04-06 11:26:00 \n * @Desc: 节点类\n */\nclass Node {\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2021-04-06 11:26:17 \n     * @Desc: 构造函数 \n     */\n    constructor(opt = {}) {\n        // 节点数据\n        this.nodeData = this.handleData(opt.data || {})\n        // id\n        this.uid = opt.uid\n        // 控制实例\n        this.mindMap = opt.mindMap\n        // 渲染实例\n        this.renderer = opt.renderer\n        // 渲染器\n        this.draw = opt.draw || null\n        // 主题配置\n        this.themeConfig = this.mindMap.themeConfig\n        // 样式实例\n        this.style = new Style(this, this.themeConfig)\n        // 形状实例\n        this.shapeInstance = new Shape(this)\n        this.shapePadding = {\n            paddingX: 0,\n            paddingY: 0\n        }\n        // 是否是根节点\n        this.isRoot = opt.isRoot === undefined ? false : opt.isRoot\n        // 是否是概要节点\n        this.isGeneralization = opt.isGeneralization === undefined ? false : opt.isGeneralization\n        this.generalizationBelongNode = null\n        // 节点层级\n        this.layerIndex = opt.layerIndex === undefined ? 0 : opt.layerIndex\n        // 节点宽\n        this.width = opt.width || 0\n        // 节点高\n        this.height = opt.height || 0\n        // left\n        this._left = opt.left || 0\n        // top\n        this._top = opt.top || 0\n        // 自定义位置\n        this.customLeft = opt.data.data.customLeft || undefined\n        this.customTop = opt.data.data.customTop || undefined\n        // 是否正在拖拽中\n        this.isDrag = false\n        // 父节点\n        this.parent = opt.parent || null\n        // 子节点\n        this.children = opt.children || []\n        // 节点内容的容器\n        this.group = null\n        // 节点内容对象\n        this._imgData = null\n        this._iconData = null\n        this._textData = null\n        this._hyperlinkData = null\n        this._tagData = null\n        this._noteData = null\n        this.noteEl = null\n        this._expandBtn = null\n        this._lines = []\n        this._generalizationLine = null\n        this._generalizationNode = null\n        // 尺寸信息\n        this._rectInfo = {\n            imgContentWidth: 0,\n            imgContentHeight: 0,\n            textContentWidth: 0,\n            textContentHeight: 0\n        }\n        // 概要节点的宽高\n        this._generalizationNodeWidth = 0\n        this._generalizationNodeHeight = 0\n        // 各种文字信息的间距\n        this.textContentItemMargin = this.mindMap.opt.textContentMargin\n        // 图片和文字节点的间距\n        this.blockContentMargin = this.mindMap.opt.imgTextMargin\n        // 展开收缩按钮尺寸\n        this.expandBtnSize = this.mindMap.opt.expandBtnSize\n        // 初始渲染\n        this.initRender = true\n        // 初始化\n        // this.createNodeData()\n        this.getSize()\n    }\n\n    // 支持自定义位置\n    get left() {\n        return this.customLeft || this._left\n    }\n\n    set left(val) {\n        this._left = val\n    }\n\n    get top() {\n        return this.customTop || this._top\n    }\n\n    set top(val) {\n        this._top = val\n    }\n\n    /** \n     * @Author: 王林 \n     * @Date: 2021-07-12 07:40:47 \n     * @Desc: 更新主题配置 \n     */\n    updateThemeConfig() {\n        // 主题配置\n        this.themeConfig = this.mindMap.themeConfig\n        // 样式实例\n        this.style.updateThemeConfig(this.themeConfig)\n    }\n\n    /** \n     * @Author: 王林 \n     * @Date: 2021-07-05 23:11:39 \n     * @Desc: 复位部分布局时会重新设置的数据 \n     */\n    reset() {\n        this.children = []\n        this.parent = null\n        this.isRoot = false\n        this.layerIndex = 0\n        this.left = 0\n        this.top = 0\n    }\n\n    /** \n     * @Author: 王林 \n     * @Date: 2021-06-20 10:12:31 \n     * @Desc: 处理数据 \n     */\n    handleData(data) {\n        data.data.expand = data.data.expand === false ? false : true\n        data.data.isActive = data.data.isActive === true ? true : false\n        data.children = data.children || []\n        return data\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2022-08-02 19:53:40 \n     * @Desc: 检查节点是否存在自定义数据 \n     */\n    hasCustomPosition() {\n        return this.customLeft !== undefined && this.customTop !== undefined\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2022-08-04 09:06:56 \n     * @Desc: 检查节点是否存在自定义位置的祖先节点 \n     */\n    ancestorHasCustomPosition() {\n        let node = this\n        while(node) {\n            if (node.hasCustomPosition()) {\n                return true\n            }\n            node = node.parent\n        }\n        return false\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2021-04-06 15:55:04 \n     * @Desc: 添加子节点 \n     */\n    addChildren(node) {\n        this.children.push(node)\n    }\n\n    /** \n     * @Author: 王林 \n     * @Date: 2021-07-06 22:08:09 \n     * @Desc: 创建节点的各个内容对象数据\n     */\n    createNodeData() {\n        this._imgData = this.createImgNode()\n        this._iconData = this.createIconNode()\n        this._textData = this.createTextNode()\n        this._hyperlinkData = this.createHyperlinkNode()\n        this._tagData = this.createTagNode()\n        this._noteData = this.createNoteNode()\n        this.createGeneralizationNode()\n    }\n\n    /** \n     * @Author: 王林 \n     * @Date: 2021-07-10 09:20:02 \n     * @Desc: 解绑所有事件 \n     */\n    removeAllEvent() {\n        if (this._noteData) {\n            this._noteData.node.off(['mouseover', 'mouseout'])\n        }\n        if (this._expandBtn) {\n            this._expandBtn.off(['mouseover', 'mouseout', 'click'])\n        }\n        if (this.group) {\n            this.group.off(['click', 'dblclick', 'contextmenu', 'mousedown', 'mouseup'])\n        }\n    }\n\n    /** \n     * @Author: 王林 \n     * @Date: 2021-07-07 21:27:24 \n     * @Desc: 移除节点内容\n     */\n    removeAllNode() {\n        // 节点内的内容\n        ;[this._imgData, this._iconData, this._textData, this._hyperlinkData, this._tagData, this._noteData].forEach((item) => {\n            if (item && item.node) item.node.remove()\n        })\n        this._imgData = null\n        this._iconData = null\n        this._textData = null\n        this._hyperlinkData = null\n        this._tagData = null\n        this._noteData = null\n        // 展开收缩按钮\n        if (this._expandBtn) {\n            this._expandBtn.remove()\n            this._expandBtn = null\n        }\n        // 组\n        if (this.group) {\n            this.group.clear()\n            this.group.remove()\n            this.group = null\n        }\n        // 概要\n        this.removeGeneralization()\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2021-04-09 09:46:23 \n     * @Desc: 计算节点的宽高 \n     */\n    getSize() {\n        this.removeAllNode()\n        this.createNodeData()\n        let {\n            width,\n            height\n        } = this.getNodeRect()\n        // 判断节点尺寸是否有变化\n        let changed = this.width !== width || this.height !== height\n        this.width = width\n        this.height = height\n        return changed\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2021-04-06 14:52:17 \n     * @Desc: 计算节点尺寸信息 \n     */\n    getNodeRect() {\n        // 宽高\n        let imgContentWidth = 0\n        let imgContentHeight = 0\n        let textContentWidth = 0\n        let textContentHeight = 0\n        // 存在图片\n        if (this._imgData) {\n            this._rectInfo.imgContentWidth = imgContentWidth = this._imgData.width\n            this._rectInfo.imgContentHeight = imgContentHeight = this._imgData.height\n        }\n        // 图标\n        if (this._iconData.length > 0) {\n            textContentWidth += this._iconData.reduce((sum, cur) => {\n                textContentHeight = Math.max(textContentHeight, cur.height)\n                return sum += cur.width + this.textContentItemMargin\n            }, 0)\n        }\n        // 文字\n        if (this._textData) {\n            textContentWidth += this._textData.width\n            textContentHeight = Math.max(textContentHeight, this._textData.height)\n        }\n        // 超链接\n        if (this._hyperlinkData) {\n            textContentWidth += this._hyperlinkData.width\n            textContentHeight = Math.max(textContentHeight, this._hyperlinkData.height)\n        }\n        // 标签\n        if (this._tagData.length > 0) {\n            textContentWidth += this._tagData.reduce((sum, cur) => {\n                textContentHeight = Math.max(textContentHeight, cur.height)\n                return sum += cur.width + this.textContentItemMargin\n            }, 0)\n        }\n        // 备注\n        if (this._noteData) {\n            textContentWidth += this._noteData.width\n            textContentHeight = Math.max(textContentHeight, this._noteData.height)\n        }\n        // 文字内容部分的尺寸\n        this._rectInfo.textContentWidth = textContentWidth\n        this._rectInfo.textContentHeight = textContentHeight\n        // 间距\n        let margin = imgContentHeight > 0 && textContentHeight > 0 ? this.blockContentMargin : 0\n        let { paddingX, paddingY } = this.getPaddingVale()\n        // 纯内容宽高\n        let _width = Math.max(imgContentWidth, textContentWidth)\n        let _height = imgContentHeight + textContentHeight\n        // 计算节点形状需要的附加内边距\n        let { paddingX: shapePaddingX, paddingY: shapePaddingY } = this.shapeInstance.getShapePadding(_width, _height, paddingX, paddingY)\n        this.shapePadding.paddingX = shapePaddingX\n        this.shapePadding.paddingY = shapePaddingY\n        return {\n            width: _width + paddingX * 2 + shapePaddingX * 2,\n            height: _height + paddingY * 2 + margin + shapePaddingY * 2\n        }\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2021-04-09 14:06:17 \n     * @Desc: 创建图片节点 \n     */\n    createImgNode() {\n        let img = this.nodeData.data.image\n        if (!img) {\n            return\n        }\n        let imgSize = this.getImgShowSize()\n        let node = new Image().load(img).size(...imgSize)\n        if (this.nodeData.data.imageTitle) {\n            node.attr('title', this.nodeData.data.imageTitle)\n        }\n        return {\n            node,\n            width: imgSize[0],\n            height: imgSize[1]\n        }\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2021-04-09 10:12:51 \n     * @Desc: 获取图片显示宽高 \n     */\n    getImgShowSize() {\n        return resizeImgSize(this.nodeData.data.imageSize.width, this.nodeData.data.imageSize.height, this.themeConfig.imgMaxWidth, this.themeConfig.imgMaxHeight)\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2021-04-09 14:10:48 \n     * @Desc: 创建icon节点 \n     */\n    createIconNode() {\n        let _data = this.nodeData.data\n        if (!_data.icon || _data.icon.length <= 0) {\n            return []\n        }\n        let iconSize = this.themeConfig.iconSize\n        return _data.icon.map((item) => {\n            return {\n                node: SVG(iconsSvg.getNodeIconListIcon(item)).size(iconSize, iconSize),\n                width: iconSize,\n                height: iconSize\n            }\n        })\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2021-04-09 14:08:56 \n     * @Desc: 创建文本节点 \n     */\n    createTextNode() {\n        let g = new G()\n        let fontSize = this.getStyle('fontSize', this.isRoot, this.nodeData.data.isActive)\n        let lineHeight = this.getStyle('lineHeight', this.isRoot, this.nodeData.data.isActive)\n        this.nodeData.data.text.split(/\\n/img).forEach((item, index) => {\n            let node = new Text().text(item)\n            this.style.text(node)\n            node.y(fontSize * lineHeight * index)\n            g.add(node)\n        })\n        let {\n            width,\n            height\n        } = g.bbox()\n        return {\n            node: g,\n            width,\n            height\n        }\n    }\n\n    /** \n     * @Author: 王林 \n     * @Date: 2021-06-20 15:28:54 \n     * @Desc: 创建超链接节点 \n     */\n    createHyperlinkNode() {\n        let { hyperlink, hyperlinkTitle } = this.nodeData.data\n        if (!hyperlink) {\n            return\n        }\n        let iconSize = this.themeConfig.iconSize\n        let node = new SVG()\n        // 超链接节点\n        let a = new A().to(hyperlink).target('_blank')\n        a.node.addEventListener('click', (e) => {\n            e.stopPropagation()\n        })\n        if (hyperlinkTitle) {\n            a.attr('title', hyperlinkTitle)\n        }\n        // 添加一个透明的层，作为鼠标区域\n        a.rect(iconSize, iconSize).fill({ color: 'transparent' })\n        // 超链接图标\n        let iconNode = SVG(iconsSvg.hyperlink).size(iconSize, iconSize)\n        this.style.iconNode(iconNode)\n        a.add(iconNode)\n        node.add(a)\n        return {\n            node,\n            width: iconSize,\n            height: iconSize\n        }\n    }\n\n    /** \n     * @Author: 王林 \n     * @Date: 2021-06-20 19:49:15 \n     * @Desc: 创建标签节点 \n     */\n    createTagNode() {\n        let tagData = this.nodeData.data.tag\n        if (!tagData || tagData.length <= 0) {\n            return []\n        }\n        let nodes = []\n        tagData.slice(0, this.mindMap.opt.maxTag).forEach((item, index) => {\n            let tag = new G()\n            // 标签文本\n            let text = new Text().text(item).x(8).cy(10)\n            this.style.tagText(text, index)\n            let {\n                width,\n                height\n            } = text.bbox()\n            // 标签矩形\n            let rect = new Rect().size(width + 16, 20)\n            this.style.tagRect(rect, index)\n            tag.add(rect).add(text)\n            nodes.push({\n                node: tag,\n                width: width + 16,\n                height: 20\n            })\n        })\n        return nodes\n    }\n\n    /** \n     * @Author: 王林 \n     * @Date: 2021-06-20 21:19:36 \n     * @Desc: 创建备注节点 \n     */\n    createNoteNode() {\n        if (!this.nodeData.data.note) {\n            return null\n        }\n        let iconSize = this.themeConfig.iconSize\n        let node = new SVG().attr('cursor', 'pointer')\n        // 透明的层，用来作为鼠标区域\n        node.add(new Rect().size(iconSize, iconSize).fill({ color: 'transparent' }))\n        // 备注图标\n        let iconNode = SVG(iconsSvg.note).size(iconSize, iconSize)\n        this.style.iconNode(iconNode)\n        node.add(iconNode)\n        // 备注tooltip\n        if (!this.mindMap.opt.customNoteContentShow) {\n            if (!this.noteEl) {\n                this.noteEl = document.createElement('div')\n                this.noteEl.style.cssText = `\n                    position: absolute;\n                    padding: 10px;\n                    border-radius: 5px;\n                    box-shadow: 0 2px 5px rgb(0 0 0 / 10%);\n                    display: none;\n                    background-color: #fff;\n                `\n                document.body.appendChild(this.noteEl)\n            }\n            this.noteEl.innerText = this.nodeData.data.note\n        }\n        node.on('mouseover', () => {\n            let { left, top } = node.node.getBoundingClientRect()\n            if (!this.mindMap.opt.customNoteContentShow) {\n                this.noteEl.style.left = left + 'px'\n                this.noteEl.style.top = top + iconSize + 'px'\n                this.noteEl.style.display = 'block'\n            } else {\n                this.mindMap.opt.customNoteContentShow.show(this.nodeData.data.note, left, top + iconSize)\n            }\n        })\n        node.on('mouseout', () => {\n            if (!this.mindMap.opt.customNoteContentShow) {\n                this.noteEl.style.display = 'none'\n            } else {\n                this.mindMap.opt.customNoteContentShow.hide()\n            }\n        })\n        return {\n            node,\n            width: iconSize,\n            height: iconSize\n        }\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林 \n     * @Date: 2022-09-12 22:02:07 \n     * @Desc: 获取节点形状 \n     */\n    getShape() {\n        return this.style.getStyle('shape', false, false)\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2021-04-09 11:10:11 \n     * @Desc: 定位节点内容\n     */\n    layout() {\n        let {\n            width,\n            height,\n            textContentItemMargin\n        } = this\n        let { paddingY } = this.getPaddingVale()\n        paddingY += this.shapePadding.paddingY\n        // 创建组\n        this.group = new G()\n        // 概要节点添加一个带所属节点id的类名\n        if (this.isGeneralization && this.generalizationBelongNode) {\n            this.group.addClass('generalization_' + this.generalizationBelongNode.uid)\n        }\n        this.draw.add(this.group)\n        this.update(true)\n        // 节点形状\n        const shape = this.getShape()\n        this.style[shape === 'rectangle' ? 'rect' : 'shape'](this.shapeInstance.createShape())\n        // 图片节点\n        let imgHeight = 0\n        if (this._imgData) {\n            imgHeight = this._imgData.height\n            this.group.add(this._imgData.node)\n            this._imgData.node.cx(width / 2).y(paddingY)\n        }\n        // 内容节点\n        let textContentNested = new G()\n        let textContentOffsetX = 0\n        // icon\n        let iconNested = new G()\n        if (this._iconData && this._iconData.length > 0) {\n            let iconLeft = 0\n            this._iconData.forEach((item) => {\n                item.node.x(textContentOffsetX + iconLeft).y((this._rectInfo.textContentHeight - item.height) / 2)\n                iconNested.add(item.node)\n                iconLeft += item.width + textContentItemMargin\n            })\n            textContentNested.add(iconNested)\n            textContentOffsetX += iconLeft\n        }\n        // 文字\n        if (this._textData) {\n            this._textData.node.x(textContentOffsetX).y(0)\n            textContentNested.add(this._textData.node)\n            textContentOffsetX += this._textData.width + textContentItemMargin\n        }\n        // 超链接\n        if (this._hyperlinkData) {\n            this._hyperlinkData.node.x(textContentOffsetX).y((this._rectInfo.textContentHeight - this._hyperlinkData.height) / 2)\n            textContentNested.add(this._hyperlinkData.node)\n            textContentOffsetX += this._hyperlinkData.width + textContentItemMargin\n        }\n        // 标签\n        let tagNested = new G()\n        if (this._tagData && this._tagData.length > 0) {\n            let tagLeft = 0\n            this._tagData.forEach((item) => {\n                item.node.x(textContentOffsetX + tagLeft).y((this._rectInfo.textContentHeight - item.height) / 2)\n                tagNested.add(item.node)\n                tagLeft += item.width + textContentItemMargin\n            })\n            textContentNested.add(tagNested)\n            textContentOffsetX += tagLeft\n        }\n        // 备注\n        if (this._noteData) {\n            this._noteData.node.x(textContentOffsetX).y((this._rectInfo.textContentHeight - this._noteData.height) / 2)\n            textContentNested.add(this._noteData.node)\n            textContentOffsetX += this._noteData.width\n        }\n        // 文字内容整体\n        textContentNested.translate(\n            width / 2 - textContentNested.bbox().width / 2,\n            imgHeight + paddingY + (imgHeight > 0 && this._rectInfo.textContentHeight > 0 ? this.blockContentMargin : 0)\n        )\n        this.group.add(textContentNested)\n        // 单击事件，选中节点\n        this.group.on('click', (e) => {\n            this.mindMap.emit('node_click', this, e)\n            this.active(e)\n        })\n        this.group.on('mousedown', (e) => {\n            e.stopPropagation()\n            this.mindMap.emit('node_mousedown', this, e)\n        })\n        this.group.on('mouseup', (e) => {\n            e.stopPropagation()\n            this.mindMap.emit('node_mouseup', this, e)\n        })\n        // 双击事件\n        this.group.on('dblclick', (e) => {\n            if (this.mindMap.opt.readonly) {\n                return\n            }\n            e.stopPropagation()\n            this.mindMap.emit('node_dblclick', this, e)\n        })\n        // 右键菜单事件\n        this.group.on('contextmenu', (e) => {\n            if (this.mindMap.opt.readonly || this.isGeneralization) {\n                return\n            }\n            e.stopPropagation()\n            e.preventDefault()\n            if (this.nodeData.data.isActive) {\n                this.renderer.clearActive()\n            }\n            this.active(e)\n            this.mindMap.emit('node_contextmenu', e, this)\n        })\n    }\n\n    /** \n     * @Author: 王林 \n     * @Date: 2021-07-10 16:44:22 \n     * @Desc: 激活节点 \n     */\n    active(e) {\n        if (this.mindMap.opt.readonly) {\n            return\n        }\n        e && e.stopPropagation()\n        if (this.nodeData.data.isActive) {\n            return\n        }\n        this.mindMap.emit('before_node_active', this, this.renderer.activeNodeList)\n        this.renderer.clearActive()\n        this.mindMap.execCommand('SET_NODE_ACTIVE', this, true)\n        this.renderer.addActiveNode(this)\n        this.mindMap.emit('node_active', this, this.renderer.activeNodeList)\n    }\n\n    /** \n     * @Author: 王林 \n     * @Date: 2021-07-04 20:20:09 \n     * @Desc: 渲染节点到画布，会移除旧的，创建新的\n     */\n    renderNode() {\n        // 连线\n        this.renderLine()\n        this.removeAllEvent()\n        this.removeAllNode()\n        this.createNodeData()\n        this.layout()\n    }\n\n    /** \n     * @Author: 王林 \n     * @Date: 2021-07-04 22:47:01 \n     * @Desc: 更新节点\n     */\n    update(layout = false) {\n        if (!this.group) {\n            return\n        }\n        // 需要移除展开收缩按钮\n        if (this._expandBtn && this.nodeData.children.length <= 0) {\n            this.removeExpandBtn()\n        } else if (!this._expandBtn && this.nodeData.children.length > 0) {// 需要添加展开收缩按钮\n            this.renderExpandBtn()\n        } else {\n            this.updateExpandBtnPos()\n        }\n        this.renderGeneralization()\n        let t = this.group.transform()\n        if (!layout) {\n            this.group.animate(300).translate(this.left - t.translateX, this.top - t.translateY)\n        } else {\n            this.group.translate(this.left - t.translateX, this.top - t.translateY)\n        }\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2021-04-07 13:55:58 \n     * @Desc: 递归渲染 \n     */\n    render() {\n        // 节点\n        if (this.initRender) {\n            this.initRender = false\n            this.renderNode()\n        } else {\n            // 连线\n            this.renderLine()\n            this.update()\n        }\n        // 子节点\n        if (this.children && this.children.length && this.nodeData.data.expand !== false) {\n            asyncRun(this.children.map((item) => {\n                return () =>{\n                    item.render()\n                }\n            }))\n        }\n        // 手动插入的节点立即获得焦点并且开启编辑模式\n        if (this.nodeData.inserting) {\n            delete this.nodeData.inserting\n            this.active()\n            this.mindMap.emit('node_dblclick', this)\n        }\n    }\n\n    /** \n     * @Author: 王林 \n     * @Date: 2021-07-10 09:24:55 \n     * @Desc: 递归删除 \n     */\n    remove() {\n        this.initRender = true\n        this.removeAllEvent()\n        this.removeAllNode()\n        this.removeLine()\n        // 子节点\n        if (this.children && this.children.length) {\n            asyncRun(this.children.map((item) => {\n                return () =>{\n                    item.remove()\n                }\n            }))\n        }\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2021-11-23 18:39:14 \n     * @Desc: 隐藏节点 \n     */\n    hide() {\n        this.group.hide()\n        this.hideGeneralization()\n        if (this.parent) {\n            let index = this.parent.children.indexOf(this)\n            this.parent._lines[index].hide()\n        }\n        // 子节点\n        if (this.children && this.children.length) {\n            asyncRun(this.children.map((item) => {\n                return () =>{\n                    item.hide()\n                }\n            }))\n        }\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2021-11-23 18:39:14 \n     * @Desc: 显示节点 \n     */\n    show() {\n        if (!this.group) {\n            return;\n        }\n        this.group.show()\n        this.showGeneralization()\n        if (this.parent) {\n            let index = this.parent.children.indexOf(this)\n            this.parent._lines[index] && this.parent._lines[index].show()\n        }\n        // 子节点\n        if (this.children && this.children.length) {\n            asyncRun(this.children.map((item) => {\n                return () =>{\n                    item.show()\n                }\n            }))\n        }\n    }\n\n    /** \n     * @Author: 王林 \n     * @Date: 2021-04-10 22:01:53 \n     * @Desc: 连线 \n     */\n    renderLine(deep = false) {\n        if (this.nodeData.data.expand === false) {\n            return\n        }\n        let childrenLen = this.nodeData.children.length\n        if (childrenLen > this._lines.length) {\n            // 创建缺少的线\n            new Array(childrenLen - this._lines.length).fill(0).forEach(() => {\n                this._lines.push(this.draw.path())\n            })\n        } else if (childrenLen < this._lines.length) {\n            // 删除多余的线\n            this._lines.slice(childrenLen).forEach((line) => {\n                line.remove()\n            })\n            this._lines = this._lines.slice(0, childrenLen)\n        }\n        // 画线\n        this.renderer.layout.renderLine(this, this._lines, (line, node) => {\n            // 添加样式\n            this.styleLine(line, node)\n        })\n        // 子级的连线也需要更新\n        if (deep && this.children && this.children.length > 0) {\n            this.children.forEach((item) => {\n                item.renderLine(deep)\n            })\n        }\n    }\n\n    /** \n     * javascript comment \n     * @Author: flydreame \n     * @Date: 2022-09-17 12:41:29 \n     * @Desc: 设置连线样式 \n     */\n    styleLine(line, node) {\n        let width = node.getSelfInhertStyle('lineWidth') || node.getStyle('lineWidth', true)\n        let color = node.getSelfInhertStyle('lineColor') || node.getStyle('lineColor', true)\n        let dasharray = node.getSelfInhertStyle('lineDasharray') || node.getStyle('lineDasharray', true)\n        this.style.line(line, {\n            width,\n            color,\n            dasharray,\n        })\n    }\n\n    /** \n     * @Author: 王林 \n     * @Date: 2021-07-10 16:40:21 \n     * @Desc: 移除连线 \n     */\n    removeLine() {\n        this._lines.forEach((line) => {\n            line.remove()\n        })\n        this._lines = []\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2022-08-01 09:27:30 \n     * @Desc: 检查是否存在概要 \n     */\n    checkHasGeneralization() {\n        return !!this.nodeData.data.generalization\n    }\n\n    /** \n     * @Author: 王林 \n     * @Date: 2022-07-31 09:41:28 \n     * @Desc: 创建概要节点 \n     */\n    createGeneralizationNode() {\n        if (this.isGeneralization || !this.checkHasGeneralization()) {\n            return\n        }\n        if (!this._generalizationLine) {\n            this._generalizationLine = this.draw.path()\n        }\n        if (!this._generalizationNode) {\n            this._generalizationNode = new Node({\n                data: {\n                    data: this.nodeData.data.generalization\n                },\n                uid: this.mindMap.uid++,\n                renderer: this.renderer,\n                mindMap: this.mindMap,\n                draw: this.draw,\n                isGeneralization: true\n            })\n            this._generalizationNodeWidth = this._generalizationNode.width\n            this._generalizationNodeHeight = this._generalizationNode.height\n            this._generalizationNode.generalizationBelongNode = this\n            if (this.nodeData.data.generalization.isActive) {\n                this.renderer.addActiveNode(this._generalizationNode)\n            }\n        }\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2022-08-01 15:38:52 \n     * @Desc: 更新概要节点 \n     */\n    updateGeneralization() {\n        this.removeGeneralization()\n        this.createGeneralizationNode()\n    }\n\n    /** \n     * @Author: 王林 \n     * @Date: 2022-07-30 08:35:51 \n     * @Desc: 渲染概要节点 \n     */\n    renderGeneralization() {\n        if (this.isGeneralization) {\n            return\n        }\n        if (!this.checkHasGeneralization()) {\n            this.removeGeneralization()\n            this._generalizationNodeWidth = 0\n            this._generalizationNodeHeight = 0\n            return\n        }\n        if (this.nodeData.data.expand === false) {\n            this.removeGeneralization()\n            return\n        }\n        this.createGeneralizationNode()\n        this.renderer.layout.renderGeneralization(this, this._generalizationLine, this._generalizationNode)\n        this.style.generalizationLine(this._generalizationLine)\n        this._generalizationNode.render()\n    }\n\n    /** \n     * @Author: 王林 \n     * @Date: 2022-07-30 13:11:27 \n     * @Desc: 删除概要节点 \n     */\n    removeGeneralization() {\n        if (this._generalizationLine) {\n            this._generalizationLine.remove()\n            this._generalizationLine = null\n        }\n        if (this._generalizationNode) {\n            // 删除概要节点时要同步从激活节点里删除\n            this.renderer.removeActiveNode(this._generalizationNode)\n            this._generalizationNode.remove()\n            this._generalizationNode = null\n        }\n        // hack修复当激活一个节点时创建概要，然后立即激活创建的概要节点后会重复创建概要节点并且无法删除的问题\n        if (this.generalizationBelongNode) {\n            this.draw.find('.generalization_' + this.generalizationBelongNode.uid).remove()\n        }\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2022-08-01 09:56:46 \n     * @Desc: 隐藏概要节点 \n     */\n    hideGeneralization() {\n        if (this._generalizationLine) {\n            this._generalizationLine.hide()\n        }\n        if (this._generalizationNode) {\n            this._generalizationNode.hide()\n        }\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2022-08-01 09:57:42 \n     * @Desc: 显示概要节点 \n     */\n    showGeneralization() {\n        if (this._generalizationLine) {\n            this._generalizationLine.show()\n        }\n        if (this._generalizationNode) {\n            this._generalizationNode.show()\n        }\n    }\n\n    /** \n     * @Author: 王林 \n     * @Date: 2021-07-10 17:59:14 \n     * @Desc: 创建或更新展开收缩按钮内容 \n     */\n    updateExpandBtnNode() {\n        if (this._expandBtn) {\n            this._expandBtn.clear()\n        }\n        let iconSvg\n        if (this.nodeData.data.expand === false) {\n            iconSvg = btnsSvg.open\n        } else {\n            iconSvg = btnsSvg.close\n        }\n        let node = SVG(iconSvg).size(this.expandBtnSize, this.expandBtnSize)\n        let fillNode = new Circle().size(this.expandBtnSize)\n        node.x(0).y(-this.expandBtnSize / 2)\n        fillNode.x(0).y(-this.expandBtnSize / 2)\n        this.style.iconBtn(node, fillNode)\n        if (this._expandBtn) this._expandBtn.add(fillNode).add(node)\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2021-07-12 18:18:13 \n     * @Desc: 更新展开收缩按钮位置 \n     */\n    updateExpandBtnPos() {\n        if (!this._expandBtn) {\n            return\n        }\n        this.renderer.layout.renderExpandBtn(this, this._expandBtn)\n    }\n\n    /** \n     * @Author: 王林 \n     * @Date: 2021-04-11 19:47:01 \n     * @Desc: 展开收缩按钮 \n     */\n    renderExpandBtn() {\n        if (!this.nodeData.children || this.nodeData.children.length <= 0 || this.isRoot) {\n            return\n        }\n        this._expandBtn = new G()\n        this.updateExpandBtnNode()\n        this._expandBtn.on('mouseover', (e) => {\n            e.stopPropagation()\n            this._expandBtn.css({\n                cursor: 'pointer'\n            })\n        })\n        this._expandBtn.on('mouseout', (e) => {\n            e.stopPropagation()\n            this._expandBtn.css({\n                cursor: 'auto'\n            })\n        })\n        this._expandBtn.on('click', (e) => {\n            e.stopPropagation()\n            // 展开收缩\n            this.mindMap.execCommand('SET_NODE_EXPAND', this, !this.nodeData.data.expand)\n            this.mindMap.emit('expand_btn_click', this)\n        })\n        this.group.add(this._expandBtn)\n        this.updateExpandBtnPos()\n    }\n\n    /** \n     * @Author: 王林 \n     * @Date: 2021-07-11 13:26:00 \n     * @Desc: 移除展开收缩按钮 \n     */\n    removeExpandBtn() {\n        if (this._expandBtn) {\n            this._expandBtn.off(['mouseover', 'mouseout', 'click'])\n            this._expandBtn.clear()\n            this._expandBtn.remove()\n            this._expandBtn = null\n        }\n    }\n\n    \n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2021-11-25 09:51:37 \n     * @Desc: 检测当前节点是否是某个节点的祖先节点\n     */\n    isParent(node) {\n        if (this === node) {\n            return false\n        }\n        let parent = node.parent\n        while(parent) {\n            if (this === parent) {\n                return true\n            }\n            parent = parent.parent\n        }\n        return false\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2021-11-25 10:32:34 \n     * @Desc: 检测当前节点是否是某个节点的兄弟节点\n     */\n    isBrother(node) {\n        if (!this.parent || this === node) {\n            return false\n        }\n        return this.parent.children.find((item) => {\n            return item === node\n        })\n    }\n\n    /** \n     * @Author: 王林 \n     * @Date: 2021-06-20 22:51:57 \n     * @Desc: 获取padding值 \n     */\n    getPaddingVale() {\n        return {\n            paddingX: this.getStyle('paddingX', true, this.nodeData.data.isActive),\n            paddingY: this.getStyle('paddingY', true, this.nodeData.data.isActive)\n        }\n    }\n\n    /** \n     * @Author: 王林 \n     * @Date: 2021-05-04 21:48:49 \n     * @Desc: 获取某个样式 \n     */\n    getStyle(prop, root, isActive) {\n        let v = this.style.merge(prop, root, isActive)\n        return v === undefined ? '' : v\n    }\n\n    /** \n     * javascript comment \n     * @Author: flydreame \n     * @Date: 2022-09-17 11:21:15 \n     * @Desc: 获取自定义样式 \n     */\n    getSelfStyle(prop) {\n        return this.style.getSelfStyle(prop)\n    }\n\n    /** \n     * javascript comment \n     * @Author: flydreame \n     * @Date: 2022-09-17 11:21:26 \n     * @Desc:  获取最近一个存在自身自定义样式的祖先节点的自定义样式\n     */\n    getParentSelfStyle(prop) {\n        if (this.parent) {\n            return this.parent.getSelfStyle(prop) || this.parent.getParentSelfStyle(prop)\n        }\n        return null\n    }\n\n    /** \n     * javascript comment \n     * @Author: flydreame \n     * @Date: 2022-09-17 12:15:30 \n     * @Desc: 获取自身可继承的自定义样式 \n     */\n    getSelfInhertStyle(prop) {\n        return this.getSelfStyle(prop) // 自身\n        || this.getParentSelfStyle(prop) // 父级\n    }\n\n    /** \n     * @Author: 王林 \n     * @Date: 2021-05-04 22:18:07 \n     * @Desc: 修改某个样式 \n     */\n    setStyle(prop, value, isActive) {\n        this.mindMap.execCommand('SET_NODE_STYLE', this, prop, value, isActive)\n    }\n\n    /** \n     * @Author: 王林 \n     * @Date: 2021-06-22 22:04:02 \n     * @Desc: 获取数据 \n     */\n    getData(key) {\n        return key ? this.nodeData.data[key] || '' : this.nodeData.data\n    }\n\n    /** \n     * @Author: 王林 \n     * @Date: 2021-06-22 22:12:01 \n     * @Desc: 设置数据 \n     */\n    setData(data = {}) {\n        this.mindMap.execCommand('SET_NODE_DATA', this, data)\n    }\n\n    /** \n     * @Author: 王林 \n     * @Date: 2021-07-10 08:41:28 \n     * @Desc: 设置文本 \n     */\n    setText(text) {\n        this.mindMap.execCommand('SET_NODE_TEXT', this, text)\n    }\n\n    /** \n     * @Author: 王林 \n     * @Date: 2021-07-10 08:42:19 \n     * @Desc: 设置图片 \n     */\n    setImage(imgData) {\n        this.mindMap.execCommand('SET_NODE_IMAGE', this, imgData)\n    }\n\n    /** \n     * @Author: 王林 \n     * @Date: 2021-07-10 08:47:29 \n     * @Desc: 设置图标 \n     */\n    setIcon(icons) {\n        this.mindMap.execCommand('SET_NODE_ICON', this, icons)\n    }\n\n    /** \n     * @Author: 王林 \n     * @Date: 2021-07-10 08:50:41 \n     * @Desc: 设置超链接 \n     */\n    setHyperlink(link, title) {\n        this.mindMap.execCommand('SET_NODE_HYPERLINK', this, link, title)\n    }\n\n    /** \n     * @Author: 王林 \n     * @Date: 2021-07-10 08:53:24 \n     * @Desc: 设置备注 \n     */\n    setNote(note) {\n        this.mindMap.execCommand('SET_NODE_NOTE', this, note)\n    }\n\n    /** \n     * @Author: 王林 \n     * @Date: 2021-07-10 08:55:08 \n     * @Desc: 设置标签 \n     */\n    setTag(tag) {\n        this.mindMap.execCommand('SET_NODE_TAG', this, tag)\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林 \n     * @Date: 2022-09-12 21:47:45 \n     * @Desc: 设置形状 \n     */\n    setShape(shape) {\n        this.mindMap.execCommand('SET_NODE_SHAPE', this, shape)\n    }\n}\n\nexport default Node\n"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,SAAlB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,SACIC,aADJ,EAEIC,QAFJ,QAGO,SAHP;AAIA,SACIC,KADJ,EAEIC,GAFJ,EAGIC,MAHJ,EAIIC,CAJJ,EAKIC,CALJ,EAMIC,IANJ,EAOIC,IAPJ,QAQO,kBARP;AASA,OAAOC,OAAP,MAAoB,YAApB;AACA,OAAOC,QAAP,MAAqB,aAArB;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,IAAN,CAAW;EACP;AACJ;AACA;AACA;AACA;AACA;EACIC,WAAW,CAACC,GAAG,GAAG,EAAP,EAAW;IAClB;IACA,KAAKC,QAAL,GAAgB,KAAKC,UAAL,CAAgBF,GAAG,CAACG,IAAJ,IAAY,EAA5B,CAAhB,CAFkB,CAGlB;;IACA,KAAKC,GAAL,GAAWJ,GAAG,CAACI,GAAf,CAJkB,CAKlB;;IACA,KAAKC,OAAL,GAAeL,GAAG,CAACK,OAAnB,CANkB,CAOlB;;IACA,KAAKC,QAAL,GAAgBN,GAAG,CAACM,QAApB,CARkB,CASlB;;IACA,KAAKC,IAAL,GAAYP,GAAG,CAACO,IAAJ,IAAY,IAAxB,CAVkB,CAWlB;;IACA,KAAKC,WAAL,GAAmB,KAAKH,OAAL,CAAaG,WAAhC,CAZkB,CAalB;;IACA,KAAKC,KAAL,GAAa,IAAIxB,KAAJ,CAAU,IAAV,EAAgB,KAAKuB,WAArB,CAAb,CAdkB,CAelB;;IACA,KAAKE,aAAL,GAAqB,IAAIxB,KAAJ,CAAU,IAAV,CAArB;IACA,KAAKyB,YAAL,GAAoB;MAChBC,QAAQ,EAAE,CADM;MAEhBC,QAAQ,EAAE;IAFM,CAApB,CAjBkB,CAqBlB;;IACA,KAAKC,MAAL,GAAcd,GAAG,CAACc,MAAJ,KAAeC,SAAf,GAA2B,KAA3B,GAAmCf,GAAG,CAACc,MAArD,CAtBkB,CAuBlB;;IACA,KAAKE,gBAAL,GAAwBhB,GAAG,CAACgB,gBAAJ,KAAyBD,SAAzB,GAAqC,KAArC,GAA6Cf,GAAG,CAACgB,gBAAzE;IACA,KAAKC,wBAAL,GAAgC,IAAhC,CAzBkB,CA0BlB;;IACA,KAAKC,UAAL,GAAkBlB,GAAG,CAACkB,UAAJ,KAAmBH,SAAnB,GAA+B,CAA/B,GAAmCf,GAAG,CAACkB,UAAzD,CA3BkB,CA4BlB;;IACA,KAAKC,KAAL,GAAanB,GAAG,CAACmB,KAAJ,IAAa,CAA1B,CA7BkB,CA8BlB;;IACA,KAAKC,MAAL,GAAcpB,GAAG,CAACoB,MAAJ,IAAc,CAA5B,CA/BkB,CAgClB;;IACA,KAAKC,KAAL,GAAarB,GAAG,CAACsB,IAAJ,IAAY,CAAzB,CAjCkB,CAkClB;;IACA,KAAKC,IAAL,GAAYvB,GAAG,CAACwB,GAAJ,IAAW,CAAvB,CAnCkB,CAoClB;;IACA,KAAKC,UAAL,GAAkBzB,GAAG,CAACG,IAAJ,CAASA,IAAT,CAAcsB,UAAd,IAA4BV,SAA9C;IACA,KAAKW,SAAL,GAAiB1B,GAAG,CAACG,IAAJ,CAASA,IAAT,CAAcuB,SAAd,IAA2BX,SAA5C,CAtCkB,CAuClB;;IACA,KAAKY,MAAL,GAAc,KAAd,CAxCkB,CAyClB;;IACA,KAAKC,MAAL,GAAc5B,GAAG,CAAC4B,MAAJ,IAAc,IAA5B,CA1CkB,CA2ClB;;IACA,KAAKC,QAAL,GAAgB7B,GAAG,CAAC6B,QAAJ,IAAgB,EAAhC,CA5CkB,CA6ClB;;IACA,KAAKC,KAAL,GAAa,IAAb,CA9CkB,CA+ClB;;IACA,KAAKC,QAAL,GAAgB,IAAhB;IACA,KAAKC,SAAL,GAAiB,IAAjB;IACA,KAAKC,SAAL,GAAiB,IAAjB;IACA,KAAKC,cAAL,GAAsB,IAAtB;IACA,KAAKC,QAAL,GAAgB,IAAhB;IACA,KAAKC,SAAL,GAAiB,IAAjB;IACA,KAAKC,MAAL,GAAc,IAAd;IACA,KAAKC,UAAL,GAAkB,IAAlB;IACA,KAAKC,MAAL,GAAc,EAAd;IACA,KAAKC,mBAAL,GAA2B,IAA3B;IACA,KAAKC,mBAAL,GAA2B,IAA3B,CA1DkB,CA2DlB;;IACA,KAAKC,SAAL,GAAiB;MACbC,eAAe,EAAE,CADJ;MAEbC,gBAAgB,EAAE,CAFL;MAGbC,gBAAgB,EAAE,CAHL;MAIbC,iBAAiB,EAAE;IAJN,CAAjB,CA5DkB,CAkElB;;IACA,KAAKC,wBAAL,GAAgC,CAAhC;IACA,KAAKC,yBAAL,GAAiC,CAAjC,CApEkB,CAqElB;;IACA,KAAKC,qBAAL,GAA6B,KAAK5C,OAAL,CAAaL,GAAb,CAAiBkD,iBAA9C,CAtEkB,CAuElB;;IACA,KAAKC,kBAAL,GAA0B,KAAK9C,OAAL,CAAaL,GAAb,CAAiBoD,aAA3C,CAxEkB,CAyElB;;IACA,KAAKC,aAAL,GAAqB,KAAKhD,OAAL,CAAaL,GAAb,CAAiBqD,aAAtC,CA1EkB,CA2ElB;;IACA,KAAKC,UAAL,GAAkB,IAAlB,CA5EkB,CA6ElB;IACA;;IACA,KAAKC,OAAL;EACH,CAvFM,CAyFP;;;EACQ,IAAJjC,IAAI,GAAG;IACP,OAAO,KAAKG,UAAL,IAAmB,KAAKJ,KAA/B;EACH;;EAEO,IAAJC,IAAI,CAACkC,GAAD,EAAM;IACV,KAAKnC,KAAL,GAAamC,GAAb;EACH;;EAEM,IAAHhC,GAAG,GAAG;IACN,OAAO,KAAKE,SAAL,IAAkB,KAAKH,IAA9B;EACH;;EAEM,IAAHC,GAAG,CAACgC,GAAD,EAAM;IACT,KAAKjC,IAAL,GAAYiC,GAAZ;EACH;EAED;AACJ;AACA;AACA;AACA;;;EACIC,iBAAiB,GAAG;IAChB;IACA,KAAKjD,WAAL,GAAmB,KAAKH,OAAL,CAAaG,WAAhC,CAFgB,CAGhB;;IACA,KAAKC,KAAL,CAAWgD,iBAAX,CAA6B,KAAKjD,WAAlC;EACH;EAED;AACJ;AACA;AACA;AACA;;;EACIkD,KAAK,GAAG;IACJ,KAAK7B,QAAL,GAAgB,EAAhB;IACA,KAAKD,MAAL,GAAc,IAAd;IACA,KAAKd,MAAL,GAAc,KAAd;IACA,KAAKI,UAAL,GAAkB,CAAlB;IACA,KAAKI,IAAL,GAAY,CAAZ;IACA,KAAKE,GAAL,GAAW,CAAX;EACH;EAED;AACJ;AACA;AACA;AACA;;;EACItB,UAAU,CAACC,IAAD,EAAO;IACbA,IAAI,CAACA,IAAL,CAAUwD,MAAV,GAAmBxD,IAAI,CAACA,IAAL,CAAUwD,MAAV,KAAqB,KAArB,GAA6B,KAA7B,GAAqC,IAAxD;IACAxD,IAAI,CAACA,IAAL,CAAUyD,QAAV,GAAqBzD,IAAI,CAACA,IAAL,CAAUyD,QAAV,KAAuB,IAAvB,GAA8B,IAA9B,GAAqC,KAA1D;IACAzD,IAAI,CAAC0B,QAAL,GAAgB1B,IAAI,CAAC0B,QAAL,IAAiB,EAAjC;IACA,OAAO1B,IAAP;EACH;EAED;AACJ;AACA;AACA;AACA;AACA;;;EACI0D,iBAAiB,GAAG;IAChB,OAAO,KAAKpC,UAAL,KAAoBV,SAApB,IAAiC,KAAKW,SAAL,KAAmBX,SAA3D;EACH;EAED;AACJ;AACA;AACA;AACA;AACA;;;EACI+C,yBAAyB,GAAG;IACxB,IAAIC,IAAI,GAAG,IAAX;;IACA,OAAMA,IAAN,EAAY;MACR,IAAIA,IAAI,CAACF,iBAAL,EAAJ,EAA8B;QAC1B,OAAO,IAAP;MACH;;MACDE,IAAI,GAAGA,IAAI,CAACnC,MAAZ;IACH;;IACD,OAAO,KAAP;EACH;EAED;AACJ;AACA;AACA;AACA;AACA;;;EACIoC,WAAW,CAACD,IAAD,EAAO;IACd,KAAKlC,QAAL,CAAcoC,IAAd,CAAmBF,IAAnB;EACH;EAED;AACJ;AACA;AACA;AACA;;;EACIG,cAAc,GAAG;IACb,KAAKnC,QAAL,GAAgB,KAAKoC,aAAL,EAAhB;IACA,KAAKnC,SAAL,GAAiB,KAAKoC,cAAL,EAAjB;IACA,KAAKnC,SAAL,GAAiB,KAAKoC,cAAL,EAAjB;IACA,KAAKnC,cAAL,GAAsB,KAAKoC,mBAAL,EAAtB;IACA,KAAKnC,QAAL,GAAgB,KAAKoC,aAAL,EAAhB;IACA,KAAKnC,SAAL,GAAiB,KAAKoC,cAAL,EAAjB;IACA,KAAKC,wBAAL;EACH;EAED;AACJ;AACA;AACA;AACA;;;EACIC,cAAc,GAAG;IACb,IAAI,KAAKtC,SAAT,EAAoB;MAChB,KAAKA,SAAL,CAAe2B,IAAf,CAAoBY,GAApB,CAAwB,CAAC,WAAD,EAAc,UAAd,CAAxB;IACH;;IACD,IAAI,KAAKrC,UAAT,EAAqB;MACjB,KAAKA,UAAL,CAAgBqC,GAAhB,CAAoB,CAAC,WAAD,EAAc,UAAd,EAA0B,OAA1B,CAApB;IACH;;IACD,IAAI,KAAK7C,KAAT,EAAgB;MACZ,KAAKA,KAAL,CAAW6C,GAAX,CAAe,CAAC,OAAD,EAAU,UAAV,EAAsB,aAAtB,EAAqC,WAArC,EAAkD,SAAlD,CAAf;IACH;EACJ;EAED;AACJ;AACA;AACA;AACA;;;EACIC,aAAa,GAAG;IACZ;IACA;IAAC,CAAC,KAAK7C,QAAN,EAAgB,KAAKC,SAArB,EAAgC,KAAKC,SAArC,EAAgD,KAAKC,cAArD,EAAqE,KAAKC,QAA1E,EAAoF,KAAKC,SAAzF,EAAoGyC,OAApG,CAA6GC,IAAD,IAAU;MACnH,IAAIA,IAAI,IAAIA,IAAI,CAACf,IAAjB,EAAuBe,IAAI,CAACf,IAAL,CAAUgB,MAAV;IAC1B,CAFA;IAGD,KAAKhD,QAAL,GAAgB,IAAhB;IACA,KAAKC,SAAL,GAAiB,IAAjB;IACA,KAAKC,SAAL,GAAiB,IAAjB;IACA,KAAKC,cAAL,GAAsB,IAAtB;IACA,KAAKC,QAAL,GAAgB,IAAhB;IACA,KAAKC,SAAL,GAAiB,IAAjB,CAVY,CAWZ;;IACA,IAAI,KAAKE,UAAT,EAAqB;MACjB,KAAKA,UAAL,CAAgByC,MAAhB;;MACA,KAAKzC,UAAL,GAAkB,IAAlB;IACH,CAfW,CAgBZ;;;IACA,IAAI,KAAKR,KAAT,EAAgB;MACZ,KAAKA,KAAL,CAAWkD,KAAX;MACA,KAAKlD,KAAL,CAAWiD,MAAX;MACA,KAAKjD,KAAL,GAAa,IAAb;IACH,CArBW,CAsBZ;;;IACA,KAAKmD,oBAAL;EACH;EAED;AACJ;AACA;AACA;AACA;AACA;;;EACI1B,OAAO,GAAG;IACN,KAAKqB,aAAL;IACA,KAAKV,cAAL;IACA,IAAI;MACA/C,KADA;MAEAC;IAFA,IAGA,KAAK8D,WAAL,EAHJ,CAHM,CAON;;IACA,IAAIC,OAAO,GAAG,KAAKhE,KAAL,KAAeA,KAAf,IAAwB,KAAKC,MAAL,KAAgBA,MAAtD;IACA,KAAKD,KAAL,GAAaA,KAAb;IACA,KAAKC,MAAL,GAAcA,MAAd;IACA,OAAO+D,OAAP;EACH;EAED;AACJ;AACA;AACA;AACA;AACA;;;EACID,WAAW,GAAG;IACV;IACA,IAAIvC,eAAe,GAAG,CAAtB;IACA,IAAIC,gBAAgB,GAAG,CAAvB;IACA,IAAIC,gBAAgB,GAAG,CAAvB;IACA,IAAIC,iBAAiB,GAAG,CAAxB,CALU,CAMV;;IACA,IAAI,KAAKf,QAAT,EAAmB;MACf,KAAKW,SAAL,CAAeC,eAAf,GAAiCA,eAAe,GAAG,KAAKZ,QAAL,CAAcZ,KAAjE;MACA,KAAKuB,SAAL,CAAeE,gBAAf,GAAkCA,gBAAgB,GAAG,KAAKb,QAAL,CAAcX,MAAnE;IACH,CAVS,CAWV;;;IACA,IAAI,KAAKY,SAAL,CAAeoD,MAAf,GAAwB,CAA5B,EAA+B;MAC3BvC,gBAAgB,IAAI,KAAKb,SAAL,CAAeqD,MAAf,CAAsB,CAACC,GAAD,EAAMC,GAAN,KAAc;QACpDzC,iBAAiB,GAAG0C,IAAI,CAACC,GAAL,CAAS3C,iBAAT,EAA4ByC,GAAG,CAACnE,MAAhC,CAApB;QACA,OAAOkE,GAAG,IAAIC,GAAG,CAACpE,KAAJ,GAAY,KAAK8B,qBAA/B;MACH,CAHmB,EAGjB,CAHiB,CAApB;IAIH,CAjBS,CAkBV;;;IACA,IAAI,KAAKhB,SAAT,EAAoB;MAChBY,gBAAgB,IAAI,KAAKZ,SAAL,CAAed,KAAnC;MACA2B,iBAAiB,GAAG0C,IAAI,CAACC,GAAL,CAAS3C,iBAAT,EAA4B,KAAKb,SAAL,CAAeb,MAA3C,CAApB;IACH,CAtBS,CAuBV;;;IACA,IAAI,KAAKc,cAAT,EAAyB;MACrBW,gBAAgB,IAAI,KAAKX,cAAL,CAAoBf,KAAxC;MACA2B,iBAAiB,GAAG0C,IAAI,CAACC,GAAL,CAAS3C,iBAAT,EAA4B,KAAKZ,cAAL,CAAoBd,MAAhD,CAApB;IACH,CA3BS,CA4BV;;;IACA,IAAI,KAAKe,QAAL,CAAciD,MAAd,GAAuB,CAA3B,EAA8B;MAC1BvC,gBAAgB,IAAI,KAAKV,QAAL,CAAckD,MAAd,CAAqB,CAACC,GAAD,EAAMC,GAAN,KAAc;QACnDzC,iBAAiB,GAAG0C,IAAI,CAACC,GAAL,CAAS3C,iBAAT,EAA4ByC,GAAG,CAACnE,MAAhC,CAApB;QACA,OAAOkE,GAAG,IAAIC,GAAG,CAACpE,KAAJ,GAAY,KAAK8B,qBAA/B;MACH,CAHmB,EAGjB,CAHiB,CAApB;IAIH,CAlCS,CAmCV;;;IACA,IAAI,KAAKb,SAAT,EAAoB;MAChBS,gBAAgB,IAAI,KAAKT,SAAL,CAAejB,KAAnC;MACA2B,iBAAiB,GAAG0C,IAAI,CAACC,GAAL,CAAS3C,iBAAT,EAA4B,KAAKV,SAAL,CAAehB,MAA3C,CAApB;IACH,CAvCS,CAwCV;;;IACA,KAAKsB,SAAL,CAAeG,gBAAf,GAAkCA,gBAAlC;IACA,KAAKH,SAAL,CAAeI,iBAAf,GAAmCA,iBAAnC,CA1CU,CA2CV;;IACA,IAAI4C,MAAM,GAAG9C,gBAAgB,GAAG,CAAnB,IAAwBE,iBAAiB,GAAG,CAA5C,GAAgD,KAAKK,kBAArD,GAA0E,CAAvF;IACA,IAAI;MAAEvC,QAAF;MAAYC;IAAZ,IAAyB,KAAK8E,cAAL,EAA7B,CA7CU,CA8CV;;IACA,IAAIC,MAAM,GAAGJ,IAAI,CAACC,GAAL,CAAS9C,eAAT,EAA0BE,gBAA1B,CAAb;;IACA,IAAIgD,OAAO,GAAGjD,gBAAgB,GAAGE,iBAAjC,CAhDU,CAiDV;;;IACA,IAAI;MAAElC,QAAQ,EAAEkF,aAAZ;MAA2BjF,QAAQ,EAAEkF;IAArC,IAAuD,KAAKrF,aAAL,CAAmBsF,eAAnB,CAAmCJ,MAAnC,EAA2CC,OAA3C,EAAoDjF,QAApD,EAA8DC,QAA9D,CAA3D;IACA,KAAKF,YAAL,CAAkBC,QAAlB,GAA6BkF,aAA7B;IACA,KAAKnF,YAAL,CAAkBE,QAAlB,GAA6BkF,aAA7B;IACA,OAAO;MACH5E,KAAK,EAAEyE,MAAM,GAAGhF,QAAQ,GAAG,CAApB,GAAwBkF,aAAa,GAAG,CAD5C;MAEH1E,MAAM,EAAEyE,OAAO,GAAGhF,QAAQ,GAAG,CAArB,GAAyB6E,MAAzB,GAAkCK,aAAa,GAAG;IAFvD,CAAP;EAIH;EAED;AACJ;AACA;AACA;AACA;AACA;;;EACI5B,aAAa,GAAG;IACZ,IAAI8B,GAAG,GAAG,KAAKhG,QAAL,CAAcE,IAAd,CAAmB+F,KAA7B;;IACA,IAAI,CAACD,GAAL,EAAU;MACN;IACH;;IACD,IAAIE,OAAO,GAAG,KAAKC,cAAL,EAAd;IACA,IAAIrC,IAAI,GAAG,IAAI1E,KAAJ,GAAYgH,IAAZ,CAAiBJ,GAAjB,EAAsBK,IAAtB,CAA2B,GAAGH,OAA9B,CAAX;;IACA,IAAI,KAAKlG,QAAL,CAAcE,IAAd,CAAmBoG,UAAvB,EAAmC;MAC/BxC,IAAI,CAACyC,IAAL,CAAU,OAAV,EAAmB,KAAKvG,QAAL,CAAcE,IAAd,CAAmBoG,UAAtC;IACH;;IACD,OAAO;MACHxC,IADG;MAEH5C,KAAK,EAAEgF,OAAO,CAAC,CAAD,CAFX;MAGH/E,MAAM,EAAE+E,OAAO,CAAC,CAAD;IAHZ,CAAP;EAKH;EAED;AACJ;AACA;AACA;AACA;AACA;;;EACIC,cAAc,GAAG;IACb,OAAOjH,aAAa,CAAC,KAAKc,QAAL,CAAcE,IAAd,CAAmBsG,SAAnB,CAA6BtF,KAA9B,EAAqC,KAAKlB,QAAL,CAAcE,IAAd,CAAmBsG,SAAnB,CAA6BrF,MAAlE,EAA0E,KAAKZ,WAAL,CAAiBkG,WAA3F,EAAwG,KAAKlG,WAAL,CAAiBmG,YAAzH,CAApB;EACH;EAED;AACJ;AACA;AACA;AACA;AACA;;;EACIvC,cAAc,GAAG;IACb,IAAIwC,KAAK,GAAG,KAAK3G,QAAL,CAAcE,IAA1B;;IACA,IAAI,CAACyG,KAAK,CAACC,IAAP,IAAeD,KAAK,CAACC,IAAN,CAAWzB,MAAX,IAAqB,CAAxC,EAA2C;MACvC,OAAO,EAAP;IACH;;IACD,IAAI0B,QAAQ,GAAG,KAAKtG,WAAL,CAAiBsG,QAAhC;IACA,OAAOF,KAAK,CAACC,IAAN,CAAWE,GAAX,CAAgBjC,IAAD,IAAU;MAC5B,OAAO;QACHf,IAAI,EAAEzE,GAAG,CAACO,QAAQ,CAACmH,mBAAT,CAA6BlC,IAA7B,CAAD,CAAH,CAAwCwB,IAAxC,CAA6CQ,QAA7C,EAAuDA,QAAvD,CADH;QAEH3F,KAAK,EAAE2F,QAFJ;QAGH1F,MAAM,EAAE0F;MAHL,CAAP;IAKH,CANM,CAAP;EAOH;EAED;AACJ;AACA;AACA;AACA;AACA;;;EACIzC,cAAc,GAAG;IACb,IAAI4C,CAAC,GAAG,IAAIxH,CAAJ,EAAR;IACA,IAAIyH,QAAQ,GAAG,KAAKC,QAAL,CAAc,UAAd,EAA0B,KAAKrG,MAA/B,EAAuC,KAAKb,QAAL,CAAcE,IAAd,CAAmByD,QAA1D,CAAf;IACA,IAAIwD,UAAU,GAAG,KAAKD,QAAL,CAAc,YAAd,EAA4B,KAAKrG,MAAjC,EAAyC,KAAKb,QAAL,CAAcE,IAAd,CAAmByD,QAA5D,CAAjB;IACA,KAAK3D,QAAL,CAAcE,IAAd,CAAmBkH,IAAnB,CAAwBC,KAAxB,CAA8B,OAA9B,EAAuCzC,OAAvC,CAA+C,CAACC,IAAD,EAAOyC,KAAP,KAAiB;MAC5D,IAAIxD,IAAI,GAAG,IAAIpE,IAAJ,GAAW0H,IAAX,CAAgBvC,IAAhB,CAAX;MACA,KAAKrE,KAAL,CAAW4G,IAAX,CAAgBtD,IAAhB;MACAA,IAAI,CAACyD,CAAL,CAAON,QAAQ,GAAGE,UAAX,GAAwBG,KAA/B;MACAN,CAAC,CAACQ,GAAF,CAAM1D,IAAN;IACH,CALD;IAMA,IAAI;MACA5C,KADA;MAEAC;IAFA,IAGA6F,CAAC,CAACS,IAAF,EAHJ;IAIA,OAAO;MACH3D,IAAI,EAAEkD,CADH;MAEH9F,KAFG;MAGHC;IAHG,CAAP;EAKH;EAED;AACJ;AACA;AACA;AACA;;;EACIkD,mBAAmB,GAAG;IAClB,IAAI;MAAEqD,SAAF;MAAaC;IAAb,IAAgC,KAAK3H,QAAL,CAAcE,IAAlD;;IACA,IAAI,CAACwH,SAAL,EAAgB;MACZ;IACH;;IACD,IAAIb,QAAQ,GAAG,KAAKtG,WAAL,CAAiBsG,QAAhC;IACA,IAAI/C,IAAI,GAAG,IAAIzE,GAAJ,EAAX,CANkB,CAOlB;;IACA,IAAIuI,CAAC,GAAG,IAAIrI,CAAJ,GAAQsI,EAAR,CAAWH,SAAX,EAAsBI,MAAtB,CAA6B,QAA7B,CAAR;IACAF,CAAC,CAAC9D,IAAF,CAAOiE,gBAAP,CAAwB,OAAxB,EAAkCC,CAAD,IAAO;MACpCA,CAAC,CAACC,eAAF;IACH,CAFD;;IAGA,IAAIN,cAAJ,EAAoB;MAChBC,CAAC,CAACrB,IAAF,CAAO,OAAP,EAAgBoB,cAAhB;IACH,CAdiB,CAelB;;;IACAC,CAAC,CAACM,IAAF,CAAOrB,QAAP,EAAiBA,QAAjB,EAA2BsB,IAA3B,CAAgC;MAAEC,KAAK,EAAE;IAAT,CAAhC,EAhBkB,CAiBlB;;IACA,IAAIC,QAAQ,GAAGhJ,GAAG,CAACO,QAAQ,CAAC8H,SAAV,CAAH,CAAwBrB,IAAxB,CAA6BQ,QAA7B,EAAuCA,QAAvC,CAAf;IACA,KAAKrG,KAAL,CAAW6H,QAAX,CAAoBA,QAApB;IACAT,CAAC,CAACJ,GAAF,CAAMa,QAAN;IACAvE,IAAI,CAAC0D,GAAL,CAASI,CAAT;IACA,OAAO;MACH9D,IADG;MAEH5C,KAAK,EAAE2F,QAFJ;MAGH1F,MAAM,EAAE0F;IAHL,CAAP;EAKH;EAED;AACJ;AACA;AACA;AACA;;;EACIvC,aAAa,GAAG;IACZ,IAAIgE,OAAO,GAAG,KAAKtI,QAAL,CAAcE,IAAd,CAAmBqI,GAAjC;;IACA,IAAI,CAACD,OAAD,IAAYA,OAAO,CAACnD,MAAR,IAAkB,CAAlC,EAAqC;MACjC,OAAO,EAAP;IACH;;IACD,IAAIqD,KAAK,GAAG,EAAZ;IACAF,OAAO,CAACG,KAAR,CAAc,CAAd,EAAiB,KAAKrI,OAAL,CAAaL,GAAb,CAAiB2I,MAAlC,EAA0C9D,OAA1C,CAAkD,CAACC,IAAD,EAAOyC,KAAP,KAAiB;MAC/D,IAAIiB,GAAG,GAAG,IAAI/I,CAAJ,EAAV,CAD+D,CAE/D;;MACA,IAAI4H,IAAI,GAAG,IAAI1H,IAAJ,GAAW0H,IAAX,CAAgBvC,IAAhB,EAAsB8D,CAAtB,CAAwB,CAAxB,EAA2BC,EAA3B,CAA8B,EAA9B,CAAX;MACA,KAAKpI,KAAL,CAAWqI,OAAX,CAAmBzB,IAAnB,EAAyBE,KAAzB;MACA,IAAI;QACApG,KADA;QAEAC;MAFA,IAGAiG,IAAI,CAACK,IAAL,EAHJ,CAL+D,CAS/D;;MACA,IAAIS,IAAI,GAAG,IAAIzI,IAAJ,GAAW4G,IAAX,CAAgBnF,KAAK,GAAG,EAAxB,EAA4B,EAA5B,CAAX;MACA,KAAKV,KAAL,CAAWsI,OAAX,CAAmBZ,IAAnB,EAAyBZ,KAAzB;MACAiB,GAAG,CAACf,GAAJ,CAAQU,IAAR,EAAcV,GAAd,CAAkBJ,IAAlB;MACAoB,KAAK,CAACxE,IAAN,CAAW;QACPF,IAAI,EAAEyE,GADC;QAEPrH,KAAK,EAAEA,KAAK,GAAG,EAFR;QAGPC,MAAM,EAAE;MAHD,CAAX;IAKH,CAlBD;IAmBA,OAAOqH,KAAP;EACH;EAED;AACJ;AACA;AACA;AACA;;;EACIjE,cAAc,GAAG;IACb,IAAI,CAAC,KAAKvE,QAAL,CAAcE,IAAd,CAAmB6I,IAAxB,EAA8B;MAC1B,OAAO,IAAP;IACH;;IACD,IAAIlC,QAAQ,GAAG,KAAKtG,WAAL,CAAiBsG,QAAhC;IACA,IAAI/C,IAAI,GAAG,IAAIzE,GAAJ,GAAUkH,IAAV,CAAe,QAAf,EAAyB,SAAzB,CAAX,CALa,CAMb;;IACAzC,IAAI,CAAC0D,GAAL,CAAS,IAAI/H,IAAJ,GAAW4G,IAAX,CAAgBQ,QAAhB,EAA0BA,QAA1B,EAAoCsB,IAApC,CAAyC;MAAEC,KAAK,EAAE;IAAT,CAAzC,CAAT,EAPa,CAQb;;IACA,IAAIC,QAAQ,GAAGhJ,GAAG,CAACO,QAAQ,CAACmJ,IAAV,CAAH,CAAmB1C,IAAnB,CAAwBQ,QAAxB,EAAkCA,QAAlC,CAAf;IACA,KAAKrG,KAAL,CAAW6H,QAAX,CAAoBA,QAApB;IACAvE,IAAI,CAAC0D,GAAL,CAASa,QAAT,EAXa,CAYb;;IACA,IAAI,CAAC,KAAKjI,OAAL,CAAaL,GAAb,CAAiBiJ,qBAAtB,EAA6C;MACzC,IAAI,CAAC,KAAK5G,MAAV,EAAkB;QACd,KAAKA,MAAL,GAAc6G,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAAd;QACA,KAAK9G,MAAL,CAAY5B,KAAZ,CAAkB2I,OAAlB,GAA6B;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA,iBAPgB;QAQAF,QAAQ,CAACG,IAAT,CAAcC,WAAd,CAA0B,KAAKjH,MAA/B;MACH;;MACD,KAAKA,MAAL,CAAYkH,SAAZ,GAAwB,KAAKtJ,QAAL,CAAcE,IAAd,CAAmB6I,IAA3C;IACH;;IACDjF,IAAI,CAACyF,EAAL,CAAQ,WAAR,EAAqB,MAAM;MACvB,IAAI;QAAElI,IAAF;QAAQE;MAAR,IAAgBuC,IAAI,CAACA,IAAL,CAAU0F,qBAAV,EAApB;;MACA,IAAI,CAAC,KAAKpJ,OAAL,CAAaL,GAAb,CAAiBiJ,qBAAtB,EAA6C;QACzC,KAAK5G,MAAL,CAAY5B,KAAZ,CAAkBa,IAAlB,GAAyBA,IAAI,GAAG,IAAhC;QACA,KAAKe,MAAL,CAAY5B,KAAZ,CAAkBe,GAAlB,GAAwBA,GAAG,GAAGsF,QAAN,GAAiB,IAAzC;QACA,KAAKzE,MAAL,CAAY5B,KAAZ,CAAkBiJ,OAAlB,GAA4B,OAA5B;MACH,CAJD,MAIO;QACH,KAAKrJ,OAAL,CAAaL,GAAb,CAAiBiJ,qBAAjB,CAAuCU,IAAvC,CAA4C,KAAK1J,QAAL,CAAcE,IAAd,CAAmB6I,IAA/D,EAAqE1H,IAArE,EAA2EE,GAAG,GAAGsF,QAAjF;MACH;IACJ,CATD;IAUA/C,IAAI,CAACyF,EAAL,CAAQ,UAAR,EAAoB,MAAM;MACtB,IAAI,CAAC,KAAKnJ,OAAL,CAAaL,GAAb,CAAiBiJ,qBAAtB,EAA6C;QACzC,KAAK5G,MAAL,CAAY5B,KAAZ,CAAkBiJ,OAAlB,GAA4B,MAA5B;MACH,CAFD,MAEO;QACH,KAAKrJ,OAAL,CAAaL,GAAb,CAAiBiJ,qBAAjB,CAAuCW,IAAvC;MACH;IACJ,CAND;IAOA,OAAO;MACH7F,IADG;MAEH5C,KAAK,EAAE2F,QAFJ;MAGH1F,MAAM,EAAE0F;IAHL,CAAP;EAKH;EAED;AACJ;AACA;AACA;AACA;AACA;;;EACI+C,QAAQ,GAAG;IACP,OAAO,KAAKpJ,KAAL,CAAW0G,QAAX,CAAoB,OAApB,EAA6B,KAA7B,EAAoC,KAApC,CAAP;EACH;EAED;AACJ;AACA;AACA;AACA;AACA;;;EACI2C,MAAM,GAAG;IACL,IAAI;MACA3I,KADA;MAEAC,MAFA;MAGA6B;IAHA,IAIA,IAJJ;IAKA,IAAI;MAAEpC;IAAF,IAAe,KAAK8E,cAAL,EAAnB;IACA9E,QAAQ,IAAI,KAAKF,YAAL,CAAkBE,QAA9B,CAPK,CAQL;;IACA,KAAKiB,KAAL,GAAa,IAAIrC,CAAJ,EAAb,CATK,CAUL;;IACA,IAAI,KAAKuB,gBAAL,IAAyB,KAAKC,wBAAlC,EAA4D;MACxD,KAAKa,KAAL,CAAWiI,QAAX,CAAoB,oBAAoB,KAAK9I,wBAAL,CAA8Bb,GAAtE;IACH;;IACD,KAAKG,IAAL,CAAUkH,GAAV,CAAc,KAAK3F,KAAnB;IACA,KAAKkI,MAAL,CAAY,IAAZ,EAfK,CAgBL;;IACA,MAAMC,KAAK,GAAG,KAAKJ,QAAL,EAAd;IACA,KAAKpJ,KAAL,CAAWwJ,KAAK,KAAK,WAAV,GAAwB,MAAxB,GAAiC,OAA5C,EAAqD,KAAKvJ,aAAL,CAAmBwJ,WAAnB,EAArD,EAlBK,CAmBL;;IACA,IAAIC,SAAS,GAAG,CAAhB;;IACA,IAAI,KAAKpI,QAAT,EAAmB;MACfoI,SAAS,GAAG,KAAKpI,QAAL,CAAcX,MAA1B;MACA,KAAKU,KAAL,CAAW2F,GAAX,CAAe,KAAK1F,QAAL,CAAcgC,IAA7B;;MACA,KAAKhC,QAAL,CAAcgC,IAAd,CAAmBqG,EAAnB,CAAsBjJ,KAAK,GAAG,CAA9B,EAAiCqG,CAAjC,CAAmC3G,QAAnC;IACH,CAzBI,CA0BL;;;IACA,IAAIwJ,iBAAiB,GAAG,IAAI5K,CAAJ,EAAxB;IACA,IAAI6K,kBAAkB,GAAG,CAAzB,CA5BK,CA6BL;;IACA,IAAIC,UAAU,GAAG,IAAI9K,CAAJ,EAAjB;;IACA,IAAI,KAAKuC,SAAL,IAAkB,KAAKA,SAAL,CAAeoD,MAAf,GAAwB,CAA9C,EAAiD;MAC7C,IAAIoF,QAAQ,GAAG,CAAf;;MACA,KAAKxI,SAAL,CAAe6C,OAAf,CAAwBC,IAAD,IAAU;QAC7BA,IAAI,CAACf,IAAL,CAAU6E,CAAV,CAAY0B,kBAAkB,GAAGE,QAAjC,EAA2ChD,CAA3C,CAA6C,CAAC,KAAK9E,SAAL,CAAeI,iBAAf,GAAmCgC,IAAI,CAAC1D,MAAzC,IAAmD,CAAhG;QACAmJ,UAAU,CAAC9C,GAAX,CAAe3C,IAAI,CAACf,IAApB;QACAyG,QAAQ,IAAI1F,IAAI,CAAC3D,KAAL,GAAa8B,qBAAzB;MACH,CAJD;;MAKAoH,iBAAiB,CAAC5C,GAAlB,CAAsB8C,UAAtB;MACAD,kBAAkB,IAAIE,QAAtB;IACH,CAxCI,CAyCL;;;IACA,IAAI,KAAKvI,SAAT,EAAoB;MAChB,KAAKA,SAAL,CAAe8B,IAAf,CAAoB6E,CAApB,CAAsB0B,kBAAtB,EAA0C9C,CAA1C,CAA4C,CAA5C;;MACA6C,iBAAiB,CAAC5C,GAAlB,CAAsB,KAAKxF,SAAL,CAAe8B,IAArC;MACAuG,kBAAkB,IAAI,KAAKrI,SAAL,CAAed,KAAf,GAAuB8B,qBAA7C;IACH,CA9CI,CA+CL;;;IACA,IAAI,KAAKf,cAAT,EAAyB;MACrB,KAAKA,cAAL,CAAoB6B,IAApB,CAAyB6E,CAAzB,CAA2B0B,kBAA3B,EAA+C9C,CAA/C,CAAiD,CAAC,KAAK9E,SAAL,CAAeI,iBAAf,GAAmC,KAAKZ,cAAL,CAAoBd,MAAxD,IAAkE,CAAnH;;MACAiJ,iBAAiB,CAAC5C,GAAlB,CAAsB,KAAKvF,cAAL,CAAoB6B,IAA1C;MACAuG,kBAAkB,IAAI,KAAKpI,cAAL,CAAoBf,KAApB,GAA4B8B,qBAAlD;IACH,CApDI,CAqDL;;;IACA,IAAIwH,SAAS,GAAG,IAAIhL,CAAJ,EAAhB;;IACA,IAAI,KAAK0C,QAAL,IAAiB,KAAKA,QAAL,CAAciD,MAAd,GAAuB,CAA5C,EAA+C;MAC3C,IAAIsF,OAAO,GAAG,CAAd;;MACA,KAAKvI,QAAL,CAAc0C,OAAd,CAAuBC,IAAD,IAAU;QAC5BA,IAAI,CAACf,IAAL,CAAU6E,CAAV,CAAY0B,kBAAkB,GAAGI,OAAjC,EAA0ClD,CAA1C,CAA4C,CAAC,KAAK9E,SAAL,CAAeI,iBAAf,GAAmCgC,IAAI,CAAC1D,MAAzC,IAAmD,CAA/F;QACAqJ,SAAS,CAAChD,GAAV,CAAc3C,IAAI,CAACf,IAAnB;QACA2G,OAAO,IAAI5F,IAAI,CAAC3D,KAAL,GAAa8B,qBAAxB;MACH,CAJD;;MAKAoH,iBAAiB,CAAC5C,GAAlB,CAAsBgD,SAAtB;MACAH,kBAAkB,IAAII,OAAtB;IACH,CAhEI,CAiEL;;;IACA,IAAI,KAAKtI,SAAT,EAAoB;MAChB,KAAKA,SAAL,CAAe2B,IAAf,CAAoB6E,CAApB,CAAsB0B,kBAAtB,EAA0C9C,CAA1C,CAA4C,CAAC,KAAK9E,SAAL,CAAeI,iBAAf,GAAmC,KAAKV,SAAL,CAAehB,MAAnD,IAA6D,CAAzG;;MACAiJ,iBAAiB,CAAC5C,GAAlB,CAAsB,KAAKrF,SAAL,CAAe2B,IAArC;MACAuG,kBAAkB,IAAI,KAAKlI,SAAL,CAAejB,KAArC;IACH,CAtEI,CAuEL;;;IACAkJ,iBAAiB,CAACM,SAAlB,CACIxJ,KAAK,GAAG,CAAR,GAAYkJ,iBAAiB,CAAC3C,IAAlB,GAAyBvG,KAAzB,GAAiC,CADjD,EAEIgJ,SAAS,GAAGtJ,QAAZ,IAAwBsJ,SAAS,GAAG,CAAZ,IAAiB,KAAKzH,SAAL,CAAeI,iBAAf,GAAmC,CAApD,GAAwD,KAAKK,kBAA7D,GAAkF,CAA1G,CAFJ;IAIA,KAAKrB,KAAL,CAAW2F,GAAX,CAAe4C,iBAAf,EA5EK,CA6EL;;IACA,KAAKvI,KAAL,CAAW0H,EAAX,CAAc,OAAd,EAAwBvB,CAAD,IAAO;MAC1B,KAAK5H,OAAL,CAAauK,IAAb,CAAkB,YAAlB,EAAgC,IAAhC,EAAsC3C,CAAtC;MACA,KAAK4C,MAAL,CAAY5C,CAAZ;IACH,CAHD;IAIA,KAAKnG,KAAL,CAAW0H,EAAX,CAAc,WAAd,EAA4BvB,CAAD,IAAO;MAC9BA,CAAC,CAACC,eAAF;MACA,KAAK7H,OAAL,CAAauK,IAAb,CAAkB,gBAAlB,EAAoC,IAApC,EAA0C3C,CAA1C;IACH,CAHD;IAIA,KAAKnG,KAAL,CAAW0H,EAAX,CAAc,SAAd,EAA0BvB,CAAD,IAAO;MAC5BA,CAAC,CAACC,eAAF;MACA,KAAK7H,OAAL,CAAauK,IAAb,CAAkB,cAAlB,EAAkC,IAAlC,EAAwC3C,CAAxC;IACH,CAHD,EAtFK,CA0FL;;IACA,KAAKnG,KAAL,CAAW0H,EAAX,CAAc,UAAd,EAA2BvB,CAAD,IAAO;MAC7B,IAAI,KAAK5H,OAAL,CAAaL,GAAb,CAAiB8K,QAArB,EAA+B;QAC3B;MACH;;MACD7C,CAAC,CAACC,eAAF;MACA,KAAK7H,OAAL,CAAauK,IAAb,CAAkB,eAAlB,EAAmC,IAAnC,EAAyC3C,CAAzC;IACH,CAND,EA3FK,CAkGL;;IACA,KAAKnG,KAAL,CAAW0H,EAAX,CAAc,aAAd,EAA8BvB,CAAD,IAAO;MAChC,IAAI,KAAK5H,OAAL,CAAaL,GAAb,CAAiB8K,QAAjB,IAA6B,KAAK9J,gBAAtC,EAAwD;QACpD;MACH;;MACDiH,CAAC,CAACC,eAAF;MACAD,CAAC,CAAC8C,cAAF;;MACA,IAAI,KAAK9K,QAAL,CAAcE,IAAd,CAAmByD,QAAvB,EAAiC;QAC7B,KAAKtD,QAAL,CAAc0K,WAAd;MACH;;MACD,KAAKH,MAAL,CAAY5C,CAAZ;MACA,KAAK5H,OAAL,CAAauK,IAAb,CAAkB,kBAAlB,EAAsC3C,CAAtC,EAAyC,IAAzC;IACH,CAXD;EAYH;EAED;AACJ;AACA;AACA;AACA;;;EACI4C,MAAM,CAAC5C,CAAD,EAAI;IACN,IAAI,KAAK5H,OAAL,CAAaL,GAAb,CAAiB8K,QAArB,EAA+B;MAC3B;IACH;;IACD7C,CAAC,IAAIA,CAAC,CAACC,eAAF,EAAL;;IACA,IAAI,KAAKjI,QAAL,CAAcE,IAAd,CAAmByD,QAAvB,EAAiC;MAC7B;IACH;;IACD,KAAKvD,OAAL,CAAauK,IAAb,CAAkB,oBAAlB,EAAwC,IAAxC,EAA8C,KAAKtK,QAAL,CAAc2K,cAA5D;IACA,KAAK3K,QAAL,CAAc0K,WAAd;IACA,KAAK3K,OAAL,CAAa6K,WAAb,CAAyB,iBAAzB,EAA4C,IAA5C,EAAkD,IAAlD;IACA,KAAK5K,QAAL,CAAc6K,aAAd,CAA4B,IAA5B;IACA,KAAK9K,OAAL,CAAauK,IAAb,CAAkB,aAAlB,EAAiC,IAAjC,EAAuC,KAAKtK,QAAL,CAAc2K,cAArD;EACH;EAED;AACJ;AACA;AACA;AACA;;;EACIG,UAAU,GAAG;IACT;IACA,KAAKC,UAAL;IACA,KAAK3G,cAAL;IACA,KAAKE,aAAL;IACA,KAAKV,cAAL;IACA,KAAK4F,MAAL;EACH;EAED;AACJ;AACA;AACA;AACA;;;EACIE,MAAM,CAACF,MAAM,GAAG,KAAV,EAAiB;IACnB,IAAI,CAAC,KAAKhI,KAAV,EAAiB;MACb;IACH,CAHkB,CAInB;;;IACA,IAAI,KAAKQ,UAAL,IAAmB,KAAKrC,QAAL,CAAc4B,QAAd,CAAuBuD,MAAvB,IAAiC,CAAxD,EAA2D;MACvD,KAAKkG,eAAL;IACH,CAFD,MAEO,IAAI,CAAC,KAAKhJ,UAAN,IAAoB,KAAKrC,QAAL,CAAc4B,QAAd,CAAuBuD,MAAvB,GAAgC,CAAxD,EAA2D;MAAC;MAC/D,KAAKmG,eAAL;IACH,CAFM,MAEA;MACH,KAAKC,kBAAL;IACH;;IACD,KAAKC,oBAAL;IACA,IAAIC,CAAC,GAAG,KAAK5J,KAAL,CAAW6J,SAAX,EAAR;;IACA,IAAI,CAAC7B,MAAL,EAAa;MACT,KAAKhI,KAAL,CAAW8J,OAAX,CAAmB,GAAnB,EAAwBjB,SAAxB,CAAkC,KAAKrJ,IAAL,GAAYoK,CAAC,CAACG,UAAhD,EAA4D,KAAKrK,GAAL,GAAWkK,CAAC,CAACI,UAAzE;IACH,CAFD,MAEO;MACH,KAAKhK,KAAL,CAAW6I,SAAX,CAAqB,KAAKrJ,IAAL,GAAYoK,CAAC,CAACG,UAAnC,EAA+C,KAAKrK,GAAL,GAAWkK,CAAC,CAACI,UAA5D;IACH;EACJ;EAED;AACJ;AACA;AACA;AACA;AACA;;;EACIC,MAAM,GAAG;IACL;IACA,IAAI,KAAKzI,UAAT,EAAqB;MACjB,KAAKA,UAAL,GAAkB,KAAlB;MACA,KAAK8H,UAAL;IACH,CAHD,MAGO;MACH;MACA,KAAKC,UAAL;MACA,KAAKrB,MAAL;IACH,CATI,CAUL;;;IACA,IAAI,KAAKnI,QAAL,IAAiB,KAAKA,QAAL,CAAcuD,MAA/B,IAAyC,KAAKnF,QAAL,CAAcE,IAAd,CAAmBwD,MAAnB,KAA8B,KAA3E,EAAkF;MAC9EvE,QAAQ,CAAC,KAAKyC,QAAL,CAAckF,GAAd,CAAmBjC,IAAD,IAAU;QACjC,OAAO,MAAK;UACRA,IAAI,CAACiH,MAAL;QACH,CAFD;MAGH,CAJQ,CAAD,CAAR;IAKH,CAjBI,CAkBL;;;IACA,IAAI,KAAK9L,QAAL,CAAc+L,SAAlB,EAA6B;MACzB,OAAO,KAAK/L,QAAL,CAAc+L,SAArB;MACA,KAAKnB,MAAL;MACA,KAAKxK,OAAL,CAAauK,IAAb,CAAkB,eAAlB,EAAmC,IAAnC;IACH;EACJ;EAED;AACJ;AACA;AACA;AACA;;;EACI7F,MAAM,GAAG;IACL,KAAKzB,UAAL,GAAkB,IAAlB;IACA,KAAKoB,cAAL;IACA,KAAKE,aAAL;IACA,KAAKqH,UAAL,GAJK,CAKL;;IACA,IAAI,KAAKpK,QAAL,IAAiB,KAAKA,QAAL,CAAcuD,MAAnC,EAA2C;MACvChG,QAAQ,CAAC,KAAKyC,QAAL,CAAckF,GAAd,CAAmBjC,IAAD,IAAU;QACjC,OAAO,MAAK;UACRA,IAAI,CAACC,MAAL;QACH,CAFD;MAGH,CAJQ,CAAD,CAAR;IAKH;EACJ;EAED;AACJ;AACA;AACA;AACA;AACA;;;EACI6E,IAAI,GAAG;IACH,KAAK9H,KAAL,CAAW8H,IAAX;IACA,KAAKsC,kBAAL;;IACA,IAAI,KAAKtK,MAAT,EAAiB;MACb,IAAI2F,KAAK,GAAG,KAAK3F,MAAL,CAAYC,QAAZ,CAAqBsK,OAArB,CAA6B,IAA7B,CAAZ;;MACA,KAAKvK,MAAL,CAAYW,MAAZ,CAAmBgF,KAAnB,EAA0BqC,IAA1B;IACH,CANE,CAOH;;;IACA,IAAI,KAAK/H,QAAL,IAAiB,KAAKA,QAAL,CAAcuD,MAAnC,EAA2C;MACvChG,QAAQ,CAAC,KAAKyC,QAAL,CAAckF,GAAd,CAAmBjC,IAAD,IAAU;QACjC,OAAO,MAAK;UACRA,IAAI,CAAC8E,IAAL;QACH,CAFD;MAGH,CAJQ,CAAD,CAAR;IAKH;EACJ;EAED;AACJ;AACA;AACA;AACA;AACA;;;EACID,IAAI,GAAG;IACH,IAAI,CAAC,KAAK7H,KAAV,EAAiB;MACb;IACH;;IACD,KAAKA,KAAL,CAAW6H,IAAX;IACA,KAAKyC,kBAAL;;IACA,IAAI,KAAKxK,MAAT,EAAiB;MACb,IAAI2F,KAAK,GAAG,KAAK3F,MAAL,CAAYC,QAAZ,CAAqBsK,OAArB,CAA6B,IAA7B,CAAZ;MACA,KAAKvK,MAAL,CAAYW,MAAZ,CAAmBgF,KAAnB,KAA6B,KAAK3F,MAAL,CAAYW,MAAZ,CAAmBgF,KAAnB,EAA0BoC,IAA1B,EAA7B;IACH,CATE,CAUH;;;IACA,IAAI,KAAK9H,QAAL,IAAiB,KAAKA,QAAL,CAAcuD,MAAnC,EAA2C;MACvChG,QAAQ,CAAC,KAAKyC,QAAL,CAAckF,GAAd,CAAmBjC,IAAD,IAAU;QACjC,OAAO,MAAK;UACRA,IAAI,CAAC6E,IAAL;QACH,CAFD;MAGH,CAJQ,CAAD,CAAR;IAKH;EACJ;EAED;AACJ;AACA;AACA;AACA;;;EACI0B,UAAU,CAACgB,IAAI,GAAG,KAAR,EAAe;IACrB,IAAI,KAAKpM,QAAL,CAAcE,IAAd,CAAmBwD,MAAnB,KAA8B,KAAlC,EAAyC;MACrC;IACH;;IACD,IAAI2I,WAAW,GAAG,KAAKrM,QAAL,CAAc4B,QAAd,CAAuBuD,MAAzC;;IACA,IAAIkH,WAAW,GAAG,KAAK/J,MAAL,CAAY6C,MAA9B,EAAsC;MAClC;MACA,IAAImH,KAAJ,CAAUD,WAAW,GAAG,KAAK/J,MAAL,CAAY6C,MAApC,EAA4CgD,IAA5C,CAAiD,CAAjD,EAAoDvD,OAApD,CAA4D,MAAM;QAC9D,KAAKtC,MAAL,CAAY0B,IAAZ,CAAiB,KAAK1D,IAAL,CAAUiM,IAAV,EAAjB;MACH,CAFD;IAGH,CALD,MAKO,IAAIF,WAAW,GAAG,KAAK/J,MAAL,CAAY6C,MAA9B,EAAsC;MACzC;MACA,KAAK7C,MAAL,CAAYmG,KAAZ,CAAkB4D,WAAlB,EAA+BzH,OAA/B,CAAwC4H,IAAD,IAAU;QAC7CA,IAAI,CAAC1H,MAAL;MACH,CAFD;;MAGA,KAAKxC,MAAL,GAAc,KAAKA,MAAL,CAAYmG,KAAZ,CAAkB,CAAlB,EAAqB4D,WAArB,CAAd;IACH,CAhBoB,CAiBrB;;;IACA,KAAKhM,QAAL,CAAcwJ,MAAd,CAAqBuB,UAArB,CAAgC,IAAhC,EAAsC,KAAK9I,MAA3C,EAAmD,CAACkK,IAAD,EAAO1I,IAAP,KAAgB;MAC/D;MACA,KAAK2I,SAAL,CAAeD,IAAf,EAAqB1I,IAArB;IACH,CAHD,EAlBqB,CAsBrB;;IACA,IAAIsI,IAAI,IAAI,KAAKxK,QAAb,IAAyB,KAAKA,QAAL,CAAcuD,MAAd,GAAuB,CAApD,EAAuD;MACnD,KAAKvD,QAAL,CAAcgD,OAAd,CAAuBC,IAAD,IAAU;QAC5BA,IAAI,CAACuG,UAAL,CAAgBgB,IAAhB;MACH,CAFD;IAGH;EACJ;EAED;AACJ;AACA;AACA;AACA;AACA;;;EACIK,SAAS,CAACD,IAAD,EAAO1I,IAAP,EAAa;IAClB,IAAI5C,KAAK,GAAG4C,IAAI,CAAC4I,kBAAL,CAAwB,WAAxB,KAAwC5I,IAAI,CAACoD,QAAL,CAAc,WAAd,EAA2B,IAA3B,CAApD;IACA,IAAIkB,KAAK,GAAGtE,IAAI,CAAC4I,kBAAL,CAAwB,WAAxB,KAAwC5I,IAAI,CAACoD,QAAL,CAAc,WAAd,EAA2B,IAA3B,CAApD;IACA,IAAIyF,SAAS,GAAG7I,IAAI,CAAC4I,kBAAL,CAAwB,eAAxB,KAA4C5I,IAAI,CAACoD,QAAL,CAAc,eAAd,EAA+B,IAA/B,CAA5D;IACA,KAAK1G,KAAL,CAAWgM,IAAX,CAAgBA,IAAhB,EAAsB;MAClBtL,KADkB;MAElBkH,KAFkB;MAGlBuE;IAHkB,CAAtB;EAKH;EAED;AACJ;AACA;AACA;AACA;;;EACIX,UAAU,GAAG;IACT,KAAK1J,MAAL,CAAYsC,OAAZ,CAAqB4H,IAAD,IAAU;MAC1BA,IAAI,CAAC1H,MAAL;IACH,CAFD;;IAGA,KAAKxC,MAAL,GAAc,EAAd;EACH;EAED;AACJ;AACA;AACA;AACA;AACA;;;EACIsK,sBAAsB,GAAG;IACrB,OAAO,CAAC,CAAC,KAAK5M,QAAL,CAAcE,IAAd,CAAmB2M,cAA5B;EACH;EAED;AACJ;AACA;AACA;AACA;;;EACIrI,wBAAwB,GAAG;IACvB,IAAI,KAAKzD,gBAAL,IAAyB,CAAC,KAAK6L,sBAAL,EAA9B,EAA6D;MACzD;IACH;;IACD,IAAI,CAAC,KAAKrK,mBAAV,EAA+B;MAC3B,KAAKA,mBAAL,GAA2B,KAAKjC,IAAL,CAAUiM,IAAV,EAA3B;IACH;;IACD,IAAI,CAAC,KAAK/J,mBAAV,EAA+B;MAC3B,KAAKA,mBAAL,GAA2B,IAAI3C,IAAJ,CAAS;QAChCK,IAAI,EAAE;UACFA,IAAI,EAAE,KAAKF,QAAL,CAAcE,IAAd,CAAmB2M;QADvB,CAD0B;QAIhC1M,GAAG,EAAE,KAAKC,OAAL,CAAaD,GAAb,EAJ2B;QAKhCE,QAAQ,EAAE,KAAKA,QALiB;QAMhCD,OAAO,EAAE,KAAKA,OANkB;QAOhCE,IAAI,EAAE,KAAKA,IAPqB;QAQhCS,gBAAgB,EAAE;MARc,CAAT,CAA3B;MAUA,KAAK+B,wBAAL,GAAgC,KAAKN,mBAAL,CAAyBtB,KAAzD;MACA,KAAK6B,yBAAL,GAAiC,KAAKP,mBAAL,CAAyBrB,MAA1D;MACA,KAAKqB,mBAAL,CAAyBxB,wBAAzB,GAAoD,IAApD;;MACA,IAAI,KAAKhB,QAAL,CAAcE,IAAd,CAAmB2M,cAAnB,CAAkClJ,QAAtC,EAAgD;QAC5C,KAAKtD,QAAL,CAAc6K,aAAd,CAA4B,KAAK1I,mBAAjC;MACH;IACJ;EACJ;EAED;AACJ;AACA;AACA;AACA;AACA;;;EACIsK,oBAAoB,GAAG;IACnB,KAAK9H,oBAAL;IACA,KAAKR,wBAAL;EACH;EAED;AACJ;AACA;AACA;AACA;;;EACIgH,oBAAoB,GAAG;IACnB,IAAI,KAAKzK,gBAAT,EAA2B;MACvB;IACH;;IACD,IAAI,CAAC,KAAK6L,sBAAL,EAAL,EAAoC;MAChC,KAAK5H,oBAAL;MACA,KAAKlC,wBAAL,GAAgC,CAAhC;MACA,KAAKC,yBAAL,GAAiC,CAAjC;MACA;IACH;;IACD,IAAI,KAAK/C,QAAL,CAAcE,IAAd,CAAmBwD,MAAnB,KAA8B,KAAlC,EAAyC;MACrC,KAAKsB,oBAAL;MACA;IACH;;IACD,KAAKR,wBAAL;IACA,KAAKnE,QAAL,CAAcwJ,MAAd,CAAqB2B,oBAArB,CAA0C,IAA1C,EAAgD,KAAKjJ,mBAArD,EAA0E,KAAKC,mBAA/E;IACA,KAAKhC,KAAL,CAAWuM,kBAAX,CAA8B,KAAKxK,mBAAnC;;IACA,KAAKC,mBAAL,CAAyBsJ,MAAzB;EACH;EAED;AACJ;AACA;AACA;AACA;;;EACI9G,oBAAoB,GAAG;IACnB,IAAI,KAAKzC,mBAAT,EAA8B;MAC1B,KAAKA,mBAAL,CAAyBuC,MAAzB;;MACA,KAAKvC,mBAAL,GAA2B,IAA3B;IACH;;IACD,IAAI,KAAKC,mBAAT,EAA8B;MAC1B;MACA,KAAKnC,QAAL,CAAc2M,gBAAd,CAA+B,KAAKxK,mBAApC;;MACA,KAAKA,mBAAL,CAAyBsC,MAAzB;;MACA,KAAKtC,mBAAL,GAA2B,IAA3B;IACH,CAVkB,CAWnB;;;IACA,IAAI,KAAKxB,wBAAT,EAAmC;MAC/B,KAAKV,IAAL,CAAU2M,IAAV,CAAe,qBAAqB,KAAKjM,wBAAL,CAA8Bb,GAAlE,EAAuE2E,MAAvE;IACH;EACJ;EAED;AACJ;AACA;AACA;AACA;AACA;;;EACImH,kBAAkB,GAAG;IACjB,IAAI,KAAK1J,mBAAT,EAA8B;MAC1B,KAAKA,mBAAL,CAAyBoH,IAAzB;IACH;;IACD,IAAI,KAAKnH,mBAAT,EAA8B;MAC1B,KAAKA,mBAAL,CAAyBmH,IAAzB;IACH;EACJ;EAED;AACJ;AACA;AACA;AACA;AACA;;;EACIwC,kBAAkB,GAAG;IACjB,IAAI,KAAK5J,mBAAT,EAA8B;MAC1B,KAAKA,mBAAL,CAAyBmH,IAAzB;IACH;;IACD,IAAI,KAAKlH,mBAAT,EAA8B;MAC1B,KAAKA,mBAAL,CAAyBkH,IAAzB;IACH;EACJ;EAED;AACJ;AACA;AACA;AACA;;;EACIwD,mBAAmB,GAAG;IAClB,IAAI,KAAK7K,UAAT,EAAqB;MACjB,KAAKA,UAAL,CAAgB0C,KAAhB;IACH;;IACD,IAAIoI,OAAJ;;IACA,IAAI,KAAKnN,QAAL,CAAcE,IAAd,CAAmBwD,MAAnB,KAA8B,KAAlC,EAAyC;MACrCyJ,OAAO,GAAGxN,OAAO,CAACyN,IAAlB;IACH,CAFD,MAEO;MACHD,OAAO,GAAGxN,OAAO,CAAC0N,KAAlB;IACH;;IACD,IAAIvJ,IAAI,GAAGzE,GAAG,CAAC8N,OAAD,CAAH,CAAa9G,IAAb,CAAkB,KAAKjD,aAAvB,EAAsC,KAAKA,aAA3C,CAAX;IACA,IAAIkK,QAAQ,GAAG,IAAIhO,MAAJ,GAAa+G,IAAb,CAAkB,KAAKjD,aAAvB,CAAf;IACAU,IAAI,CAAC6E,CAAL,CAAO,CAAP,EAAUpB,CAAV,CAAY,CAAC,KAAKnE,aAAN,GAAsB,CAAlC;IACAkK,QAAQ,CAAC3E,CAAT,CAAW,CAAX,EAAcpB,CAAd,CAAgB,CAAC,KAAKnE,aAAN,GAAsB,CAAtC;IACA,KAAK5C,KAAL,CAAW+M,OAAX,CAAmBzJ,IAAnB,EAAyBwJ,QAAzB;IACA,IAAI,KAAKjL,UAAT,EAAqB,KAAKA,UAAL,CAAgBmF,GAAhB,CAAoB8F,QAApB,EAA8B9F,GAA9B,CAAkC1D,IAAlC;EACxB;EAED;AACJ;AACA;AACA;AACA;AACA;;;EACIyH,kBAAkB,GAAG;IACjB,IAAI,CAAC,KAAKlJ,UAAV,EAAsB;MAClB;IACH;;IACD,KAAKhC,QAAL,CAAcwJ,MAAd,CAAqByB,eAArB,CAAqC,IAArC,EAA2C,KAAKjJ,UAAhD;EACH;EAED;AACJ;AACA;AACA;AACA;;;EACIiJ,eAAe,GAAG;IACd,IAAI,CAAC,KAAKtL,QAAL,CAAc4B,QAAf,IAA2B,KAAK5B,QAAL,CAAc4B,QAAd,CAAuBuD,MAAvB,IAAiC,CAA5D,IAAiE,KAAKtE,MAA1E,EAAkF;MAC9E;IACH;;IACD,KAAKwB,UAAL,GAAkB,IAAI7C,CAAJ,EAAlB;IACA,KAAK0N,mBAAL;;IACA,KAAK7K,UAAL,CAAgBkH,EAAhB,CAAmB,WAAnB,EAAiCvB,CAAD,IAAO;MACnCA,CAAC,CAACC,eAAF;;MACA,KAAK5F,UAAL,CAAgBmL,GAAhB,CAAoB;QAChBC,MAAM,EAAE;MADQ,CAApB;IAGH,CALD;;IAMA,KAAKpL,UAAL,CAAgBkH,EAAhB,CAAmB,UAAnB,EAAgCvB,CAAD,IAAO;MAClCA,CAAC,CAACC,eAAF;;MACA,KAAK5F,UAAL,CAAgBmL,GAAhB,CAAoB;QAChBC,MAAM,EAAE;MADQ,CAApB;IAGH,CALD;;IAMA,KAAKpL,UAAL,CAAgBkH,EAAhB,CAAmB,OAAnB,EAA6BvB,CAAD,IAAO;MAC/BA,CAAC,CAACC,eAAF,GAD+B,CAE/B;;MACA,KAAK7H,OAAL,CAAa6K,WAAb,CAAyB,iBAAzB,EAA4C,IAA5C,EAAkD,CAAC,KAAKjL,QAAL,CAAcE,IAAd,CAAmBwD,MAAtE;MACA,KAAKtD,OAAL,CAAauK,IAAb,CAAkB,kBAAlB,EAAsC,IAAtC;IACH,CALD;;IAMA,KAAK9I,KAAL,CAAW2F,GAAX,CAAe,KAAKnF,UAApB;IACA,KAAKkJ,kBAAL;EACH;EAED;AACJ;AACA;AACA;AACA;;;EACIF,eAAe,GAAG;IACd,IAAI,KAAKhJ,UAAT,EAAqB;MACjB,KAAKA,UAAL,CAAgBqC,GAAhB,CAAoB,CAAC,WAAD,EAAc,UAAd,EAA0B,OAA1B,CAApB;;MACA,KAAKrC,UAAL,CAAgB0C,KAAhB;;MACA,KAAK1C,UAAL,CAAgByC,MAAhB;;MACA,KAAKzC,UAAL,GAAkB,IAAlB;IACH;EACJ;EAGD;AACJ;AACA;AACA;AACA;AACA;;;EACIqL,QAAQ,CAAC5J,IAAD,EAAO;IACX,IAAI,SAASA,IAAb,EAAmB;MACf,OAAO,KAAP;IACH;;IACD,IAAInC,MAAM,GAAGmC,IAAI,CAACnC,MAAlB;;IACA,OAAMA,MAAN,EAAc;MACV,IAAI,SAASA,MAAb,EAAqB;QACjB,OAAO,IAAP;MACH;;MACDA,MAAM,GAAGA,MAAM,CAACA,MAAhB;IACH;;IACD,OAAO,KAAP;EACH;EAED;AACJ;AACA;AACA;AACA;AACA;;;EACIgM,SAAS,CAAC7J,IAAD,EAAO;IACZ,IAAI,CAAC,KAAKnC,MAAN,IAAgB,SAASmC,IAA7B,EAAmC;MAC/B,OAAO,KAAP;IACH;;IACD,OAAO,KAAKnC,MAAL,CAAYC,QAAZ,CAAqBqL,IAArB,CAA2BpI,IAAD,IAAU;MACvC,OAAOA,IAAI,KAAKf,IAAhB;IACH,CAFM,CAAP;EAGH;EAED;AACJ;AACA;AACA;AACA;;;EACI4B,cAAc,GAAG;IACb,OAAO;MACH/E,QAAQ,EAAE,KAAKuG,QAAL,CAAc,UAAd,EAA0B,IAA1B,EAAgC,KAAKlH,QAAL,CAAcE,IAAd,CAAmByD,QAAnD,CADP;MAEH/C,QAAQ,EAAE,KAAKsG,QAAL,CAAc,UAAd,EAA0B,IAA1B,EAAgC,KAAKlH,QAAL,CAAcE,IAAd,CAAmByD,QAAnD;IAFP,CAAP;EAIH;EAED;AACJ;AACA;AACA;AACA;;;EACIuD,QAAQ,CAAC0G,IAAD,EAAOC,IAAP,EAAalK,QAAb,EAAuB;IAC3B,IAAImK,CAAC,GAAG,KAAKtN,KAAL,CAAWuN,KAAX,CAAiBH,IAAjB,EAAuBC,IAAvB,EAA6BlK,QAA7B,CAAR;IACA,OAAOmK,CAAC,KAAKhN,SAAN,GAAkB,EAAlB,GAAuBgN,CAA9B;EACH;EAED;AACJ;AACA;AACA;AACA;AACA;;;EACIE,YAAY,CAACJ,IAAD,EAAO;IACf,OAAO,KAAKpN,KAAL,CAAWwN,YAAX,CAAwBJ,IAAxB,CAAP;EACH;EAED;AACJ;AACA;AACA;AACA;AACA;;;EACIK,kBAAkB,CAACL,IAAD,EAAO;IACrB,IAAI,KAAKjM,MAAT,EAAiB;MACb,OAAO,KAAKA,MAAL,CAAYqM,YAAZ,CAAyBJ,IAAzB,KAAkC,KAAKjM,MAAL,CAAYsM,kBAAZ,CAA+BL,IAA/B,CAAzC;IACH;;IACD,OAAO,IAAP;EACH;EAED;AACJ;AACA;AACA;AACA;AACA;;;EACIlB,kBAAkB,CAACkB,IAAD,EAAO;IACrB,OAAO,KAAKI,YAAL,CAAkBJ,IAAlB,EAAwB;IAAxB,GACJ,KAAKK,kBAAL,CAAwBL,IAAxB,CADH,CADqB,CAEY;EACpC;EAED;AACJ;AACA;AACA;AACA;;;EACIM,QAAQ,CAACN,IAAD,EAAOO,KAAP,EAAcxK,QAAd,EAAwB;IAC5B,KAAKvD,OAAL,CAAa6K,WAAb,CAAyB,gBAAzB,EAA2C,IAA3C,EAAiD2C,IAAjD,EAAuDO,KAAvD,EAA8DxK,QAA9D;EACH;EAED;AACJ;AACA;AACA;AACA;;;EACIyK,OAAO,CAACC,GAAD,EAAM;IACT,OAAOA,GAAG,GAAG,KAAKrO,QAAL,CAAcE,IAAd,CAAmBmO,GAAnB,KAA2B,EAA9B,GAAmC,KAAKrO,QAAL,CAAcE,IAA3D;EACH;EAED;AACJ;AACA;AACA;AACA;;;EACIoO,OAAO,CAACpO,IAAI,GAAG,EAAR,EAAY;IACf,KAAKE,OAAL,CAAa6K,WAAb,CAAyB,eAAzB,EAA0C,IAA1C,EAAgD/K,IAAhD;EACH;EAED;AACJ;AACA;AACA;AACA;;;EACIqO,OAAO,CAACnH,IAAD,EAAO;IACV,KAAKhH,OAAL,CAAa6K,WAAb,CAAyB,eAAzB,EAA0C,IAA1C,EAAgD7D,IAAhD;EACH;EAED;AACJ;AACA;AACA;AACA;;;EACIoH,QAAQ,CAACC,OAAD,EAAU;IACd,KAAKrO,OAAL,CAAa6K,WAAb,CAAyB,gBAAzB,EAA2C,IAA3C,EAAiDwD,OAAjD;EACH;EAED;AACJ;AACA;AACA;AACA;;;EACIC,OAAO,CAACC,KAAD,EAAQ;IACX,KAAKvO,OAAL,CAAa6K,WAAb,CAAyB,eAAzB,EAA0C,IAA1C,EAAgD0D,KAAhD;EACH;EAED;AACJ;AACA;AACA;AACA;;;EACIC,YAAY,CAACC,IAAD,EAAOC,KAAP,EAAc;IACtB,KAAK1O,OAAL,CAAa6K,WAAb,CAAyB,oBAAzB,EAA+C,IAA/C,EAAqD4D,IAArD,EAA2DC,KAA3D;EACH;EAED;AACJ;AACA;AACA;AACA;;;EACIC,OAAO,CAAChG,IAAD,EAAO;IACV,KAAK3I,OAAL,CAAa6K,WAAb,CAAyB,eAAzB,EAA0C,IAA1C,EAAgDlC,IAAhD;EACH;EAED;AACJ;AACA;AACA;AACA;;;EACIiG,MAAM,CAACzG,GAAD,EAAM;IACR,KAAKnI,OAAL,CAAa6K,WAAb,CAAyB,cAAzB,EAAyC,IAAzC,EAA+C1C,GAA/C;EACH;EAED;AACJ;AACA;AACA;AACA;AACA;;;EACI0G,QAAQ,CAACjF,KAAD,EAAQ;IACZ,KAAK5J,OAAL,CAAa6K,WAAb,CAAyB,gBAAzB,EAA2C,IAA3C,EAAiDjB,KAAjD;EACH;;AAlwCM;;AAqwCX,eAAenK,IAAf"},"metadata":{},"sourceType":"module"}