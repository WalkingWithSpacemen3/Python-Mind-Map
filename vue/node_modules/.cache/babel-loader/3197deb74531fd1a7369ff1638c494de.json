{"ast":null,"code":"import { imgToDataUrl, downloadFile } from 'simple-mind-map/src/utils';\nimport JsPDF from 'jspdf';\nconst URL = window.URL || window.webkitURL || window;\n/** \r\n * @Author: 王林 \r\n * @Date: 2021-07-01 22:05:16 \r\n * @Desc: 导出类 \r\n */\n\nclass Export {\n  /** \r\n   * @Author: 王林 \r\n   * @Date: 2021-07-01 22:05:42 \r\n   * @Desc: 构造函数 \r\n   */\n  constructor(opt) {\n    this.mindMap = opt.mindMap;\n    this.exportPadding = this.mindMap.opt.exportPadding;\n  }\n  /** \r\n   * @Author: 王林 \r\n   * @Date: 2021-07-02 07:44:06 \r\n   * @Desc: 导出 \r\n   */\n\n\n  async export(type, isDownload = true, name = '思维导图') {\n    if (this[type]) {\n      let result = await this[type](name);\n\n      if (isDownload && type !== 'pdf') {\n        downloadFile(result, name + '.' + type);\n      }\n\n      return result;\n    } else {\n      return null;\n    }\n  }\n  /** \r\n   * @Author: 王林 \r\n   * @Date: 2021-07-04 14:57:40 \r\n   * @Desc: 获取svg数据 \r\n   */\n\n\n  async getSvgData() {\n    const svg = this.mindMap.svg;\n    const draw = this.mindMap.draw; // 保存原始信息\n\n    const origWidth = svg.width();\n    const origHeight = svg.height();\n    const origTransform = draw.transform();\n    const elRect = this.mindMap.el.getBoundingClientRect(); // 去除放大缩小的变换效果\n\n    draw.scale(1 / origTransform.scaleX, 1 / origTransform.scaleY); // 获取变换后的位置尺寸信息，其实是getBoundingClientRect方法的包装方法\n\n    const rect = draw.rbox(); // 将svg设置为实际内容的宽高\n\n    svg.size(rect.width, rect.height); // 把实际内容变换\n\n    draw.translate(-rect.x + elRect.left, -rect.y + elRect.top); // 克隆一份数据\n\n    const clone = svg.clone(); // 恢复原先的大小和变换信息\n\n    svg.size(origWidth, origHeight);\n    draw.transform(origTransform); // 把图片的url转换成data:url类型，否则导出会丢失图片\n\n    let imageList = clone.find('image');\n    let task = imageList.map(async item => {\n      let imgUlr = item.attr('href') || item.attr('xlink:href');\n      let imgData = await imgToDataUrl(imgUlr);\n      item.attr('href', imgData);\n    });\n    await Promise.all(task);\n    return {\n      node: clone,\n      str: clone.svg()\n    };\n  }\n  /** \r\n   * @Author: 王林 \r\n   * @Date: 2021-07-04 15:25:19 \r\n   * @Desc:  svg转png\r\n   */\n\n\n  svgToPng(svgSrc) {\n    return new Promise((resolve, reject) => {\n      const img = new Image(); // 跨域图片需要添加这个属性，否则画布被污染了无法导出图片\n\n      img.setAttribute('crossOrigin', 'anonymous');\n\n      img.onload = async () => {\n        try {\n          let canvas = document.createElement('canvas');\n          canvas.width = img.width + this.exportPadding * 2;\n          canvas.height = img.height + this.exportPadding * 2;\n          let ctx = canvas.getContext('2d'); // 绘制背景\n\n          await this.drawBackgroundToCanvas(ctx, canvas.width, canvas.height); // 图片绘制到canvas里\n\n          ctx.drawImage(img, 0, 0, img.width, img.height, this.exportPadding, this.exportPadding, img.width, img.height);\n          resolve(canvas.toDataURL());\n        } catch (error) {\n          reject(error);\n        }\n      };\n\n      img.onerror = e => {\n        reject(e);\n      };\n\n      img.src = svgSrc;\n    });\n  }\n  /** \r\n   * @Author: 王林 \r\n   * @Date: 2021-07-04 15:32:07 \r\n   * @Desc: 在canvas上绘制思维导图背景\r\n   */\n\n\n  drawBackgroundToCanvas(ctx, width, height) {\n    return new Promise((resolve, rejct) => {\n      let {\n        backgroundColor = '#fff',\n        backgroundImage,\n        backgroundRepeat = \"repeat\"\n      } = this.mindMap.themeConfig; // 背景颜色\n\n      ctx.save();\n      ctx.rect(0, 0, width, height);\n      ctx.fillStyle = backgroundColor;\n      ctx.fill();\n      ctx.restore(); // 背景图片\n\n      if (backgroundImage && backgroundImage !== 'none') {\n        ctx.save();\n        let img = new Image();\n        img.src = backgroundImage;\n\n        img.onload = () => {\n          let pat = ctx.createPattern(img, backgroundRepeat);\n          ctx.rect(0, 0, width, height);\n          ctx.fillStyle = pat;\n          ctx.fill();\n          ctx.restore();\n          resolve();\n        };\n\n        img.onerror = e => {\n          rejct(e);\n        };\n      } else {\n        resolve();\n      }\n    });\n  }\n  /** \r\n   * @Author: 王林 \r\n   * @Date: 2021-07-01 22:09:51 \r\n   * @Desc: 导出为png \r\n   * 方法1.把svg的图片都转化成data:url格式，再转换\r\n   * 方法2.把svg的图片提取出来再挨个绘制到canvas里，最后一起转换\r\n   */\n\n\n  async png() {\n    let {\n      str\n    } = await this.getSvgData(); // 转换成blob数据\n\n    let blob = new Blob([str], {\n      type: 'image/svg+xml'\n    }); // 转换成data:url数据\n\n    let svgUrl = URL.createObjectURL(blob); // 绘制到canvas上\n\n    let imgDataUrl = await this.svgToPng(svgUrl);\n    URL.revokeObjectURL(svgUrl);\n    return imgDataUrl;\n  }\n  /** \r\n   * javascript comment \r\n   * @Author: 王林25 \r\n   * @Date: 2022-08-08 19:23:08 \r\n   * @Desc: 导出为pdf \r\n   */\n\n\n  async pdf(name) {\n    let img = await this.png();\n    let pdf = new JsPDF('', 'pt', 'a4');\n    let a4Width = 595;\n    let a4Height = 841;\n    let a4Ratio = a4Width / a4Height;\n    let image = new Image();\n\n    image.onload = () => {\n      let imageWidth = image.width;\n      let imageHeight = image.height;\n      let imageRatio = imageWidth / imageHeight;\n      let w, h;\n\n      if (imageWidth <= a4Width && imageHeight <= a4Height) {\n        // 使用图片原始宽高\n        w = imageWidth;\n        h = imageHeight;\n      } else if (a4Ratio > imageRatio) {\n        // 以a4Height为高度，缩放图片宽度\n        w = imageRatio * a4Height;\n        h = a4Height;\n      } else {\n        // 以a4Width为宽度，缩放图片高度\n        w = a4Width;\n        h = a4Width / imageRatio;\n      }\n\n      pdf.addImage(img, 'PNG', (a4Width - w) / 2, (a4Height - h) / 2, w, h);\n      pdf.save(name);\n    };\n\n    image.src = img;\n  }\n  /** \r\n   * @Author: 王林 \r\n   * @Date: 2021-07-04 15:32:07 \r\n   * @Desc: 在svg上绘制思维导图背景\r\n   */\n\n\n  drawBackgroundToSvg(svg) {\n    return new Promise(async (resolve, rejct) => {\n      let {\n        backgroundColor = '#fff',\n        backgroundImage,\n        backgroundRepeat = \"repeat\"\n      } = this.mindMap.themeConfig; // 背景颜色\n\n      svg.css('background-color', backgroundColor); // 背景图片\n\n      if (backgroundImage && backgroundImage !== 'none') {\n        let imgDataUrl = await imgToDataUrl(backgroundImage);\n        svg.css('background-image', `url(${imgDataUrl})`);\n        svg.css('background-repeat', backgroundRepeat);\n        resolve();\n      } else {\n        resolve();\n      }\n    });\n  }\n  /** \r\n   * @Author: 王林 \r\n   * @Date: 2021-07-04 14:54:07 \r\n   * @Desc: 导出为svg \r\n   */\n\n\n  async svg() {\n    let {\n      node\n    } = await this.getSvgData();\n    await this.drawBackgroundToSvg(node);\n    let str = node.svg(); // 转换成blob数据\n\n    let blob = new Blob([str], {\n      type: 'image/svg+xml'\n    });\n    return URL.createObjectURL(blob);\n  }\n  /** \r\n   * @Author: 王林 \r\n   * @Date: 2021-08-03 22:19:17 \r\n   * @Desc: 导出为json \r\n   */\n\n\n  json() {\n    let data = this.mindMap.command.getCopyData();\n    let str = JSON.stringify(data);\n    let blob = new Blob([str]);\n    return URL.createObjectURL(blob);\n  }\n  /** \r\n   * @Author: 王林 \r\n   * @Date: 2021-08-03 22:24:24 \r\n   * @Desc: 专有文件，其实就是json文件 \r\n   */\n\n\n  smm() {\n    return this.json();\n  }\n\n}\n\nexport default Export;","map":{"version":3,"names":["imgToDataUrl","downloadFile","JsPDF","URL","window","webkitURL","Export","constructor","opt","mindMap","exportPadding","export","type","isDownload","name","result","getSvgData","svg","draw","origWidth","width","origHeight","height","origTransform","transform","elRect","el","getBoundingClientRect","scale","scaleX","scaleY","rect","rbox","size","translate","x","left","y","top","clone","imageList","find","task","map","item","imgUlr","attr","imgData","Promise","all","node","str","svgToPng","svgSrc","resolve","reject","img","Image","setAttribute","onload","canvas","document","createElement","ctx","getContext","drawBackgroundToCanvas","drawImage","toDataURL","error","onerror","e","src","rejct","backgroundColor","backgroundImage","backgroundRepeat","themeConfig","save","fillStyle","fill","restore","pat","createPattern","png","blob","Blob","svgUrl","createObjectURL","imgDataUrl","revokeObjectURL","pdf","a4Width","a4Height","a4Ratio","image","imageWidth","imageHeight","imageRatio","w","h","addImage","drawBackgroundToSvg","css","json","data","command","getCopyData","JSON","stringify","smm"],"sources":["C:/Users/13007/Documents/GinTest/vue/node_modules/simple-mind-map/src/Export.js"],"sourcesContent":["import { imgToDataUrl, downloadFile } from 'simple-mind-map/src/utils'\r\nimport JsPDF from 'jspdf'\r\nconst URL = window.URL || window.webkitURL || window\r\n\r\n/** \r\n * @Author: 王林 \r\n * @Date: 2021-07-01 22:05:16 \r\n * @Desc: 导出类 \r\n */\r\nclass Export {\r\n    /** \r\n     * @Author: 王林 \r\n     * @Date: 2021-07-01 22:05:42 \r\n     * @Desc: 构造函数 \r\n     */\r\n    constructor(opt) {\r\n        this.mindMap = opt.mindMap\r\n        this.exportPadding = this.mindMap.opt.exportPadding\r\n    }\r\n\r\n    /** \r\n     * @Author: 王林 \r\n     * @Date: 2021-07-02 07:44:06 \r\n     * @Desc: 导出 \r\n     */\r\n    async export(type, isDownload = true, name = '思维导图') {\r\n        if (this[type]) {\r\n            let result = await this[type](name)\r\n            if (isDownload && type !== 'pdf') {\r\n                downloadFile(result, name + '.' + type)\r\n            }\r\n            return result\r\n        } else {\r\n            return null\r\n        }\r\n    }\r\n\r\n    /** \r\n     * @Author: 王林 \r\n     * @Date: 2021-07-04 14:57:40 \r\n     * @Desc: 获取svg数据 \r\n     */\r\n    async getSvgData() {\r\n        const svg = this.mindMap.svg\r\n        const draw = this.mindMap.draw\r\n        // 保存原始信息\r\n        const origWidth = svg.width()\r\n        const origHeight = svg.height()\r\n        const origTransform = draw.transform()\r\n        const elRect = this.mindMap.el.getBoundingClientRect()\r\n        // 去除放大缩小的变换效果\r\n        draw.scale(1 / origTransform.scaleX, 1 / origTransform.scaleY)\r\n        // 获取变换后的位置尺寸信息，其实是getBoundingClientRect方法的包装方法\r\n        const rect = draw.rbox()\r\n        // 将svg设置为实际内容的宽高\r\n        svg.size(rect.width, rect.height)\r\n        // 把实际内容变换\r\n        draw.translate(-rect.x + elRect.left, -rect.y + elRect.top)\r\n        // 克隆一份数据\r\n        const clone = svg.clone()\r\n        // 恢复原先的大小和变换信息\r\n        svg.size(origWidth, origHeight)\r\n        draw.transform(origTransform)\r\n        // 把图片的url转换成data:url类型，否则导出会丢失图片\r\n        let imageList = clone.find('image')\r\n        let task = imageList.map(async (item) => {\r\n            let imgUlr = item.attr('href') || item.attr('xlink:href')\r\n            let imgData = await imgToDataUrl(imgUlr)\r\n            item.attr('href', imgData)\r\n        })\r\n        await Promise.all(task)\r\n        return {\r\n            node: clone,\r\n            str: clone.svg()\r\n        }\r\n    }\r\n\r\n    /** \r\n     * @Author: 王林 \r\n     * @Date: 2021-07-04 15:25:19 \r\n     * @Desc:  svg转png\r\n     */\r\n    svgToPng(svgSrc) {\r\n        return new Promise((resolve, reject) => {\r\n            const img = new Image()\r\n            // 跨域图片需要添加这个属性，否则画布被污染了无法导出图片\r\n            img.setAttribute('crossOrigin', 'anonymous')\r\n            img.onload = async () => {\r\n                try {\r\n                    let canvas = document.createElement('canvas')\r\n                    canvas.width = img.width + this.exportPadding * 2\r\n                    canvas.height = img.height + this.exportPadding * 2\r\n                    let ctx = canvas.getContext('2d')\r\n                    // 绘制背景\r\n                    await this.drawBackgroundToCanvas(ctx, canvas.width, canvas.height)\r\n                    // 图片绘制到canvas里\r\n                    ctx.drawImage(img, 0, 0, img.width, img.height, this.exportPadding, this.exportPadding, img.width, img.height)\r\n                    resolve(canvas.toDataURL())\r\n                } catch (error) {\r\n                    reject(error)\r\n                }\r\n            }\r\n            img.onerror = (e) => {\r\n                reject(e)\r\n            }\r\n            img.src = svgSrc\r\n        })\r\n    }\r\n\r\n    /** \r\n     * @Author: 王林 \r\n     * @Date: 2021-07-04 15:32:07 \r\n     * @Desc: 在canvas上绘制思维导图背景\r\n     */\r\n    drawBackgroundToCanvas(ctx, width, height) {\r\n        return new Promise((resolve, rejct) => {\r\n            let { backgroundColor = '#fff', backgroundImage, backgroundRepeat = \"repeat\" } = this.mindMap.themeConfig\r\n            // 背景颜色\r\n            ctx.save()\r\n            ctx.rect(0, 0, width, height)\r\n            ctx.fillStyle = backgroundColor\r\n            ctx.fill()\r\n            ctx.restore()\r\n            // 背景图片\r\n            if (backgroundImage && backgroundImage !== 'none') {\r\n                ctx.save()\r\n                let img = new Image()\r\n                img.src = backgroundImage\r\n                img.onload = () => {\r\n                    let pat = ctx.createPattern(img, backgroundRepeat)\r\n                    ctx.rect(0, 0, width, height)\r\n                    ctx.fillStyle = pat\r\n                    ctx.fill()\r\n                    ctx.restore()\r\n                    resolve()\r\n                }\r\n                img.onerror = (e) => {\r\n                    rejct(e)\r\n                }\r\n            } else {\r\n                resolve()\r\n            }\r\n        })\r\n    }\r\n\r\n    /** \r\n     * @Author: 王林 \r\n     * @Date: 2021-07-01 22:09:51 \r\n     * @Desc: 导出为png \r\n     * 方法1.把svg的图片都转化成data:url格式，再转换\r\n     * 方法2.把svg的图片提取出来再挨个绘制到canvas里，最后一起转换\r\n     */\r\n    async png() {\r\n        let { str } = await this.getSvgData()\r\n        // 转换成blob数据\r\n        let blob = new Blob([str], {\r\n            type: 'image/svg+xml'\r\n        })\r\n        // 转换成data:url数据\r\n        let svgUrl = URL.createObjectURL(blob)\r\n        // 绘制到canvas上\r\n        let imgDataUrl = await this.svgToPng(svgUrl)\r\n        URL.revokeObjectURL(svgUrl)\r\n        return imgDataUrl\r\n    }\r\n\r\n    /** \r\n     * javascript comment \r\n     * @Author: 王林25 \r\n     * @Date: 2022-08-08 19:23:08 \r\n     * @Desc: 导出为pdf \r\n     */\r\n    async pdf(name) {\r\n        let img = await this.png()\r\n        let pdf = new JsPDF('', 'pt', 'a4')\r\n        let a4Width = 595\r\n        let a4Height = 841\r\n        let a4Ratio = a4Width / a4Height\r\n        let image = new Image()\r\n        image.onload = () => {\r\n            let imageWidth = image.width\r\n            let imageHeight = image.height\r\n            let imageRatio = imageWidth / imageHeight\r\n            let w, h\r\n            if (imageWidth <= a4Width && imageHeight <= a4Height) {\r\n                // 使用图片原始宽高\r\n                w = imageWidth\r\n                h = imageHeight\r\n            } else if (a4Ratio > imageRatio) {\r\n                // 以a4Height为高度，缩放图片宽度\r\n                w = imageRatio * a4Height\r\n                h = a4Height\r\n            } else {\r\n                // 以a4Width为宽度，缩放图片高度\r\n                w = a4Width\r\n                h = a4Width / imageRatio\r\n            }\r\n            pdf.addImage(img, 'PNG', (a4Width - w) / 2, (a4Height - h) / 2, w, h)\r\n            pdf.save(name)\r\n        }\r\n        image.src = img\r\n    }\r\n\r\n    /** \r\n     * @Author: 王林 \r\n     * @Date: 2021-07-04 15:32:07 \r\n     * @Desc: 在svg上绘制思维导图背景\r\n     */\r\n    drawBackgroundToSvg(svg) {\r\n        return new Promise(async (resolve, rejct) => {\r\n            let { backgroundColor = '#fff', backgroundImage, backgroundRepeat = \"repeat\" } = this.mindMap.themeConfig\r\n            // 背景颜色\r\n            svg.css('background-color', backgroundColor)\r\n            // 背景图片\r\n            if (backgroundImage && backgroundImage !== 'none') {\r\n                let imgDataUrl = await imgToDataUrl(backgroundImage)\r\n                svg.css('background-image', `url(${imgDataUrl})`)\r\n                svg.css('background-repeat', backgroundRepeat)\r\n                resolve()\r\n            } else {\r\n                resolve()\r\n            }\r\n        })\r\n    }\r\n\r\n    /** \r\n     * @Author: 王林 \r\n     * @Date: 2021-07-04 14:54:07 \r\n     * @Desc: 导出为svg \r\n     */\r\n    async svg() {\r\n        let { node } = await this.getSvgData()\r\n        await this.drawBackgroundToSvg(node)\r\n        let str = node.svg()\r\n        // 转换成blob数据\r\n        let blob = new Blob([str], {\r\n            type: 'image/svg+xml'\r\n        })\r\n        return URL.createObjectURL(blob)\r\n    }\r\n\r\n    /** \r\n     * @Author: 王林 \r\n     * @Date: 2021-08-03 22:19:17 \r\n     * @Desc: 导出为json \r\n     */\r\n    json () {\r\n        let data = this.mindMap.command.getCopyData()\r\n        let str = JSON.stringify(data)\r\n        let blob = new Blob([str])\r\n        return URL.createObjectURL(blob)\r\n    }\r\n\r\n    /** \r\n     * @Author: 王林 \r\n     * @Date: 2021-08-03 22:24:24 \r\n     * @Desc: 专有文件，其实就是json文件 \r\n     */\r\n    smm () {\r\n        return this.json();\r\n    }\r\n}\r\n\r\nexport default Export\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}