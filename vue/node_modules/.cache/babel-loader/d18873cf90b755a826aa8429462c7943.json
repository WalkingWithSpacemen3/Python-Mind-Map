{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nimport router from \"../router\";\nconst request = axios.create({\n  baseURL: \"/\",\n  timeout: 5000\n}); // request 拦截器\n// 可以自请求发送前对请求做一些处理\n// // 比如统一加token，对请求参数统一加密\n\nrequest.interceptors.request.use(config => {\n  config.headers['Content-Type'] = 'application/json;charset=utf-8'; // config.headers['token'] = user.token;  // 设置请求头\n  //取出sessionStorage里面缓存的用户信息\n\n  const userJson = sessionStorage.getItem(\"user\");\n\n  if (!userJson) {\n    router.push(\"/login\");\n  }\n\n  return config;\n}, error => {\n  return Promise.reject(error);\n}); // response 拦截器\n// 可以在接口响应后统一处理结果\n\nrequest.interceptors.response.use(response => {\n  let res = response.data; // 如果是返回的文件\n\n  if (response.config.responseType === 'blob') {\n    return res;\n  } // 兼容服务端返回的字符串数据\n\n\n  if (typeof res === 'string') {\n    res = res ? JSON.parse(res) : res;\n  }\n\n  return res;\n}, error => {\n  console.log('err' + error); // for debug\n\n  return Promise.reject(error);\n});\nexport default request;","map":{"version":3,"names":["axios","router","request","create","baseURL","timeout","interceptors","use","config","headers","userJson","sessionStorage","getItem","push","error","Promise","reject","response","res","data","responseType","JSON","parse","console","log"],"sources":["C:/Users/13007/Documents/GinTest/vue/src/utils/request.js"],"sourcesContent":["import axios from 'axios'\nimport router from \"../router\";\n\nconst request = axios.create({\n    baseURL:\"/\",\n    timeout: 5000\n})\n\n// request 拦截器\n// 可以自请求发送前对请求做一些处理\n// // 比如统一加token，对请求参数统一加密\nrequest.interceptors.request.use(config => {\n    config.headers['Content-Type'] = 'application/json;charset=utf-8';\n\n    // config.headers['token'] = user.token;  // 设置请求头\n    //取出sessionStorage里面缓存的用户信息\n    const userJson =sessionStorage.getItem(\"user\")\n    if (!userJson){\n        router.push(\"/login\")\n    }\n\n    return config\n}, error => {\n    return Promise.reject(error)\n});\n\n// response 拦截器\n// 可以在接口响应后统一处理结果\nrequest.interceptors.response.use(\n    response => {\n        let res = response.data;\n        // 如果是返回的文件\n        if (response.config.responseType === 'blob') {\n            return res\n        }\n        // 兼容服务端返回的字符串数据\n        if (typeof res === 'string') {\n            res = res ? JSON.parse(res) : res\n        }\n        return res;\n    },\n    error => {\n        console.log('err' + error) // for debug\n        return Promise.reject(error)\n    }\n)\n\n\nexport default request\n\n"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AAEA,MAAMC,OAAO,GAAGF,KAAK,CAACG,MAAN,CAAa;EACzBC,OAAO,EAAC,GADiB;EAEzBC,OAAO,EAAE;AAFgB,CAAb,CAAhB,C,CAKA;AACA;AACA;;AACAH,OAAO,CAACI,YAAR,CAAqBJ,OAArB,CAA6BK,GAA7B,CAAiCC,MAAM,IAAI;EACvCA,MAAM,CAACC,OAAP,CAAe,cAAf,IAAiC,gCAAjC,CADuC,CAGvC;EACA;;EACA,MAAMC,QAAQ,GAAEC,cAAc,CAACC,OAAf,CAAuB,MAAvB,CAAhB;;EACA,IAAI,CAACF,QAAL,EAAc;IACVT,MAAM,CAACY,IAAP,CAAY,QAAZ;EACH;;EAED,OAAOL,MAAP;AACH,CAXD,EAWGM,KAAK,IAAI;EACR,OAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACH,CAbD,E,CAeA;AACA;;AACAZ,OAAO,CAACI,YAAR,CAAqBW,QAArB,CAA8BV,GAA9B,CACIU,QAAQ,IAAI;EACR,IAAIC,GAAG,GAAGD,QAAQ,CAACE,IAAnB,CADQ,CAER;;EACA,IAAIF,QAAQ,CAACT,MAAT,CAAgBY,YAAhB,KAAiC,MAArC,EAA6C;IACzC,OAAOF,GAAP;EACH,CALO,CAMR;;;EACA,IAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;IACzBA,GAAG,GAAGA,GAAG,GAAGG,IAAI,CAACC,KAAL,CAAWJ,GAAX,CAAH,GAAqBA,GAA9B;EACH;;EACD,OAAOA,GAAP;AACH,CAZL,EAaIJ,KAAK,IAAI;EACLS,OAAO,CAACC,GAAR,CAAY,QAAQV,KAApB,EADK,CACsB;;EAC3B,OAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACH,CAhBL;AAoBA,eAAeZ,OAAf"},"metadata":{},"sourceType":"module"}