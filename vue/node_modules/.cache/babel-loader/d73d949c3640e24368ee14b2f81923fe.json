{"ast":null,"code":"import View from './src/View';\nimport Event from './src/Event';\nimport Render from './src/Render';\nimport merge from 'deepmerge';\nimport theme from './src/themes';\nimport Style from './src/Style';\nimport KeyCommand from './src/KeyCommand';\nimport Command from './src/Command';\nimport BatchExecution from './src/BatchExecution';\nimport Export from './src/Export';\nimport Select from './src/Select';\nimport Drag from './src/Drag';\nimport { layoutValueList } from './src/utils/constant';\nimport { SVG } from '@svgdotjs/svg.js'; // 默认选项配置\n\nconst defaultOpt = {\n  // 是否只读\n  readonly: false,\n  // 布局\n  layout: 'logicalStructure',\n  // 主题\n  theme: 'default',\n  // 内置主题：default（默认主题）\n  // 主题配置，会和所选择的主题进行合并\n  themeConfig: {},\n  // 放大缩小的增量比例\n  scaleRatio: 0.1,\n  // 最多显示几个标签\n  maxTag: 5,\n  // 导出图片时的内边距\n  exportPadding: 20,\n  // 展开收缩按钮尺寸\n  expandBtnSize: 20,\n  // 节点里图片和文字的间距\n  imgTextMargin: 5,\n  // 节点里各种文字信息的间距，如图标和文字的间距\n  textContentMargin: 2,\n  // 多选节点时鼠标移动到边缘时的画布移动偏移量\n  selectTranslateStep: 3,\n  // 多选节点时鼠标移动距边缘多少距离时开始偏移\n  selectTranslateLimit: 20,\n  // 自定义节点备注内容显示\n  customNoteContentShow: null\n  /*\n      {\n          show(){},\n          hide(){}\n      }\n  */\n\n};\n/** \n * javascript comment \n * @Author: 王林25 \n * @Date: 2021-04-06 11:18:47 \n * @Desc: 思维导图 \n */\n\nclass MindMap {\n  /** \n   * javascript comment \n   * @Author: 王林25 \n   * @Date: 2021-04-06 11:19:01 \n   * @Desc: 构造函数 \n   */\n  constructor(opt = {}) {\n    // 合并选项\n    this.opt = this.handleOpt(merge(defaultOpt, opt)); // 容器元素\n\n    this.el = this.opt.el;\n    this.elRect = this.el.getBoundingClientRect(); // 画布宽高\n\n    this.width = this.elRect.width;\n    this.height = this.elRect.height; // 画布\n\n    this.svg = SVG().addTo(this.el).size(this.width, this.height);\n    this.draw = this.svg.group(); // 节点id\n\n    this.uid = 0; // 初始化主题\n\n    this.initTheme(); // 事件类\n\n    this.event = new Event({\n      mindMap: this\n    }); // 按键类\n\n    this.keyCommand = new KeyCommand({\n      mindMap: this\n    }); // 命令类\n\n    this.command = new Command({\n      mindMap: this\n    }); // 渲染类\n\n    this.renderer = new Render({\n      mindMap: this\n    }); // 视图操作类\n\n    this.view = new View({\n      mindMap: this,\n      draw: this.draw\n    }); // 导出类\n\n    this.doExport = new Export({\n      mindMap: this\n    }); // 选择类\n\n    this.select = new Select({\n      mindMap: this\n    }); // 拖动类\n\n    this.drag = new Drag({\n      mindMap: this\n    }); // 批量执行类\n\n    this.batchExecution = new BatchExecution(); // 初始渲染\n\n    this.reRender();\n    setTimeout(() => {\n      this.command.addHistory();\n    }, 0);\n  }\n  /** \n   * @Author: 王林 \n   * @Date: 2021-07-01 22:15:22 \n   * @Desc: 配置参数处理 \n   */\n\n\n  handleOpt(opt) {\n    // 检查布局配置\n    if (!layoutValueList.includes(opt.layout)) {\n      opt.layout = 'logicalStructure';\n    } // 检查主题配置\n\n\n    opt.theme = opt.theme && theme[opt.theme] ? opt.theme : 'default';\n    return opt;\n  }\n  /** \n   * javascript comment \n   * @Author: 王林25 \n   * @Date: 2021-04-06 18:47:29 \n   * @Desc: 渲染，部分渲染\n   */\n\n\n  render() {\n    this.batchExecution.push('render', () => {\n      this.initTheme();\n      this.renderer.reRender = false;\n      this.renderer.render();\n    });\n  }\n  /** \n   * @Author: 王林 \n   * @Date: 2021-07-08 22:05:11 \n   * @Desc: 重新渲染 \n   */\n\n\n  reRender() {\n    this.batchExecution.push('render', () => {\n      this.draw.clear();\n      this.initTheme();\n      this.renderer.reRender = true;\n      this.renderer.render();\n    });\n  }\n  /** \n   * @Author: 王林 \n   * @Date: 2021-07-11 21:16:52 \n   * @Desc: 容器尺寸变化，调整尺寸 \n   */\n\n\n  resize() {\n    this.elRect = this.el.getBoundingClientRect();\n    this.width = this.elRect.width;\n    this.height = this.elRect.height;\n    this.svg.size(this.width, this.height);\n  }\n  /** \n   * @Author: 王林 \n   * @Date: 2021-04-24 13:25:50 \n   * @Desc: 监听事件 \n   */\n\n\n  on(event, fn) {\n    this.event.on(event, fn);\n  }\n  /** \n   * @Author: 王林 \n   * @Date: 2021-04-24 13:51:35 \n   * @Desc: 触发事件 \n   */\n\n\n  emit(event, ...args) {\n    this.event.emit(event, ...args);\n  }\n  /** \n   * @Author: 王林 \n   * @Date: 2021-04-24 13:53:54 \n   * @Desc: 解绑事件 \n   */\n\n\n  off(event, fn) {\n    this.event.off(event, fn);\n  }\n  /** \n   * @Author: 王林 \n   * @Date: 2021-05-05 13:32:43 \n   * @Desc: 设置主题\n   */\n\n\n  initTheme() {\n    // 合并主题配置\n    this.themeConfig = merge(theme[this.opt.theme], this.opt.themeConfig); // 设置背景样式\n\n    Style.setBackgroundStyle(this.el, this.themeConfig);\n  }\n  /** \n   * @Author: 王林 \n   * @Date: 2021-05-05 13:52:08 \n   * @Desc: 设置主题 \n   */\n\n\n  setTheme(theme) {\n    this.renderer.clearAllActive();\n    this.opt.theme = theme;\n    this.reRender();\n  }\n  /** \n   * @Author: 王林 \n   * @Date: 2021-06-25 23:52:37 \n   * @Desc: 获取当前主题 \n   */\n\n\n  getTheme() {\n    return this.opt.theme;\n  }\n  /** \n   * @Author: 王林 \n   * @Date: 2021-05-05 13:50:17 \n   * @Desc: 设置主题配置 \n   */\n\n\n  setThemeConfig(config) {\n    this.opt.themeConfig = config;\n    this.reRender();\n  }\n  /** \n   * @Author: 王林 \n   * @Date: 2021-08-01 10:38:34 \n   * @Desc: 获取自定义主题配置 \n   */\n\n\n  getCustomThemeConfig() {\n    return this.opt.themeConfig;\n  }\n  /** \n   * @Author: 王林 \n   * @Date: 2021-05-05 14:01:29 \n   * @Desc: 获取某个主题配置值 \n   */\n\n\n  getThemeConfig(prop) {\n    return prop === undefined ? this.themeConfig : this.themeConfig[prop];\n  }\n  /** \n   * javascript comment \n   * @Author: 王林25 \n   * @Date: 2021-07-13 16:17:06 \n   * @Desc: 获取当前布局结构 \n   */\n\n\n  getLayout() {\n    return this.opt.layout;\n  }\n  /** \n   * javascript comment \n   * @Author: 王林25 \n   * @Date: 2021-07-13 16:17:33 \n   * @Desc: 设置布局结构 \n   */\n\n\n  setLayout(layout) {\n    // 检查布局配置\n    if (!layoutValueList.includes(layout)) {\n      layout = 'logicalStructure';\n    }\n\n    this.opt.layout = layout;\n    this.renderer.setLayout();\n    this.render();\n  }\n  /** \n   * @Author: 王林 \n   * @Date: 2021-05-04 13:01:00 \n   * @Desc: 执行命令 \n   */\n\n\n  execCommand(...args) {\n    this.command.exec(...args);\n  }\n  /** \n   * @Author: 王林 \n   * @Date: 2021-08-03 22:58:12 \n   * @Desc: 动态设置思维导图数据 \n   */\n\n\n  setData(data) {\n    this.execCommand('CLEAR_ACTIVE_NODE');\n    this.command.clearHistory();\n    this.renderer.renderTree = data;\n    this.reRender();\n  }\n  /** \n   * @Author: 王林 \n   * @Date: 2021-07-01 22:06:38 \n   * @Desc: 导出 \n   */\n\n\n  async export(...args) {\n    let result = await this.doExport.export(...args);\n    return result;\n  }\n  /** \n   * @Author: 王林 \n   * @Date: 2021-07-11 09:20:03 \n   * @Desc: 转换位置 \n   */\n\n\n  toPos(x, y) {\n    return {\n      x: x - this.elRect.left,\n      y: y - this.elRect.top\n    };\n  }\n  /** \n   * javascript comment \n   * @Author: 王林25 \n   * @Date: 2022-06-08 14:12:38 \n   * @Desc: 设置只读模式、编辑模式 \n   */\n\n\n  setMode(mode) {\n    if (!['readonly', 'edit'].includes(mode)) {\n      return;\n    }\n\n    this.opt.readonly = mode === 'readonly';\n\n    if (this.opt.readonly) {\n      // 取消当前激活的元素\n      this.renderer.clearAllActive();\n    }\n\n    this.emit('mode_change', mode);\n  }\n\n}\n\nexport default MindMap;","map":{"version":3,"names":["View","Event","Render","merge","theme","Style","KeyCommand","Command","BatchExecution","Export","Select","Drag","layoutValueList","SVG","defaultOpt","readonly","layout","themeConfig","scaleRatio","maxTag","exportPadding","expandBtnSize","imgTextMargin","textContentMargin","selectTranslateStep","selectTranslateLimit","customNoteContentShow","MindMap","constructor","opt","handleOpt","el","elRect","getBoundingClientRect","width","height","svg","addTo","size","draw","group","uid","initTheme","event","mindMap","keyCommand","command","renderer","view","doExport","select","drag","batchExecution","reRender","setTimeout","addHistory","includes","render","push","clear","resize","on","fn","emit","args","off","setBackgroundStyle","setTheme","clearAllActive","getTheme","setThemeConfig","config","getCustomThemeConfig","getThemeConfig","prop","undefined","getLayout","setLayout","execCommand","exec","setData","data","clearHistory","renderTree","export","result","toPos","x","y","left","top","setMode","mode"],"sources":["D:/aimeelina/python/mindmap/node_modules/simple-mind-map/index.js"],"sourcesContent":["import View from './src/View'\nimport Event from './src/Event'\nimport Render from './src/Render'\nimport merge from 'deepmerge'\nimport theme from './src/themes'\nimport Style from './src/Style'\nimport KeyCommand from './src/KeyCommand'\nimport Command from './src/Command'\nimport BatchExecution from './src/BatchExecution'\nimport Export from './src/Export'\nimport Select from './src/Select'\nimport Drag from './src/Drag'\nimport {\n    layoutValueList\n} from './src/utils/constant'\nimport {\n    SVG\n} from '@svgdotjs/svg.js'\n\n// 默认选项配置\nconst defaultOpt = {\n    // 是否只读\n    readonly: false,\n    // 布局\n    layout: 'logicalStructure',\n    // 主题\n    theme: 'default', // 内置主题：default（默认主题）\n    // 主题配置，会和所选择的主题进行合并\n    themeConfig: {},\n    // 放大缩小的增量比例\n    scaleRatio: 0.1,\n    // 最多显示几个标签\n    maxTag: 5,\n    // 导出图片时的内边距\n    exportPadding: 20,\n    // 展开收缩按钮尺寸\n    expandBtnSize: 20,\n    // 节点里图片和文字的间距\n    imgTextMargin: 5,\n    // 节点里各种文字信息的间距，如图标和文字的间距\n    textContentMargin: 2,\n    // 多选节点时鼠标移动到边缘时的画布移动偏移量\n    selectTranslateStep: 3,\n    // 多选节点时鼠标移动距边缘多少距离时开始偏移\n    selectTranslateLimit: 20,\n    // 自定义节点备注内容显示\n    customNoteContentShow: null\n    /*\n        {\n            show(){},\n            hide(){}\n        }\n    */\n}\n\n/** \n * javascript comment \n * @Author: 王林25 \n * @Date: 2021-04-06 11:18:47 \n * @Desc: 思维导图 \n */\nclass MindMap {\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2021-04-06 11:19:01 \n     * @Desc: 构造函数 \n     */\n    constructor(opt = {}) {\n        // 合并选项\n        this.opt = this.handleOpt(merge(defaultOpt, opt))\n\n        // 容器元素\n        this.el = this.opt.el\n        this.elRect = this.el.getBoundingClientRect()\n\n        // 画布宽高\n        this.width = this.elRect.width\n        this.height = this.elRect.height\n\n        // 画布\n        this.svg = SVG().addTo(this.el).size(this.width, this.height)\n        this.draw = this.svg.group()\n\n        // 节点id\n        this.uid = 0\n\n        // 初始化主题\n        this.initTheme()\n\n        // 事件类\n        this.event = new Event({\n            mindMap: this\n        })\n\n        // 按键类\n        this.keyCommand = new KeyCommand({\n            mindMap: this\n        })\n\n        // 命令类\n        this.command = new Command({\n            mindMap: this\n        })\n\n        // 渲染类\n        this.renderer = new Render({\n            mindMap: this\n        })\n\n        // 视图操作类\n        this.view = new View({\n            mindMap: this,\n            draw: this.draw\n        })\n\n        // 导出类\n        this.doExport = new Export({\n            mindMap: this\n        })\n\n        // 选择类\n        this.select = new Select({\n            mindMap: this\n        })\n\n        // 拖动类\n        this.drag = new Drag({\n            mindMap: this\n        })\n\n        // 批量执行类\n        this.batchExecution = new BatchExecution()\n\n        // 初始渲染\n        this.reRender()\n        setTimeout(() => {\n            this.command.addHistory()\n        }, 0)\n    }\n\n    /** \n     * @Author: 王林 \n     * @Date: 2021-07-01 22:15:22 \n     * @Desc: 配置参数处理 \n     */\n    handleOpt(opt) {\n        // 检查布局配置\n        if (!layoutValueList.includes(opt.layout)) {\n            opt.layout = 'logicalStructure'\n        }\n        // 检查主题配置\n        opt.theme = opt.theme && theme[opt.theme] ? opt.theme : 'default'\n        return opt\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2021-04-06 18:47:29 \n     * @Desc: 渲染，部分渲染\n     */\n    render() {\n        this.batchExecution.push('render', () => {\n            this.initTheme()\n            this.renderer.reRender = false\n            this.renderer.render()\n        })\n    }\n\n    /** \n     * @Author: 王林 \n     * @Date: 2021-07-08 22:05:11 \n     * @Desc: 重新渲染 \n     */\n    reRender() {\n        this.batchExecution.push('render', () => {\n            this.draw.clear()\n            this.initTheme()\n            this.renderer.reRender = true\n            this.renderer.render()\n        })\n    }\n\n    /** \n     * @Author: 王林 \n     * @Date: 2021-07-11 21:16:52 \n     * @Desc: 容器尺寸变化，调整尺寸 \n     */\n    resize() {\n        this.elRect = this.el.getBoundingClientRect()\n        this.width = this.elRect.width\n        this.height = this.elRect.height\n        this.svg.size(this.width, this.height)\n    }\n\n    /** \n     * @Author: 王林 \n     * @Date: 2021-04-24 13:25:50 \n     * @Desc: 监听事件 \n     */\n    on(event, fn) {\n        this.event.on(event, fn)\n    }\n\n    /** \n     * @Author: 王林 \n     * @Date: 2021-04-24 13:51:35 \n     * @Desc: 触发事件 \n     */\n    emit(event, ...args) {\n        this.event.emit(event, ...args)\n    }\n\n    /** \n     * @Author: 王林 \n     * @Date: 2021-04-24 13:53:54 \n     * @Desc: 解绑事件 \n     */\n    off(event, fn) {\n        this.event.off(event, fn)\n    }\n\n    /** \n     * @Author: 王林 \n     * @Date: 2021-05-05 13:32:43 \n     * @Desc: 设置主题\n     */\n    initTheme() {\n        // 合并主题配置\n        this.themeConfig = merge(theme[this.opt.theme], this.opt.themeConfig)\n        // 设置背景样式\n        Style.setBackgroundStyle(this.el, this.themeConfig)\n    }\n\n    /** \n     * @Author: 王林 \n     * @Date: 2021-05-05 13:52:08 \n     * @Desc: 设置主题 \n     */\n    setTheme(theme) {\n        this.renderer.clearAllActive()\n        this.opt.theme = theme\n        this.reRender()\n    }\n\n    /** \n     * @Author: 王林 \n     * @Date: 2021-06-25 23:52:37 \n     * @Desc: 获取当前主题 \n     */\n    getTheme() {\n        return this.opt.theme\n    }\n\n    /** \n     * @Author: 王林 \n     * @Date: 2021-05-05 13:50:17 \n     * @Desc: 设置主题配置 \n     */\n    setThemeConfig(config) {\n        this.opt.themeConfig = config\n        this.reRender()\n    }\n\n    /** \n     * @Author: 王林 \n     * @Date: 2021-08-01 10:38:34 \n     * @Desc: 获取自定义主题配置 \n     */\n    getCustomThemeConfig() {\n        return this.opt.themeConfig\n    }\n\n    /** \n     * @Author: 王林 \n     * @Date: 2021-05-05 14:01:29 \n     * @Desc: 获取某个主题配置值 \n     */\n    getThemeConfig(prop) {\n        return prop === undefined ? this.themeConfig : this.themeConfig[prop]\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2021-07-13 16:17:06 \n     * @Desc: 获取当前布局结构 \n     */\n    getLayout() {\n        return this.opt.layout\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2021-07-13 16:17:33 \n     * @Desc: 设置布局结构 \n     */\n    setLayout(layout) {\n        // 检查布局配置\n        if (!layoutValueList.includes(layout)) {\n            layout = 'logicalStructure'\n        }\n        this.opt.layout = layout\n        this.renderer.setLayout()\n        this.render()\n    }\n\n    /** \n     * @Author: 王林 \n     * @Date: 2021-05-04 13:01:00 \n     * @Desc: 执行命令 \n     */\n    execCommand(...args) {\n        this.command.exec(...args)\n    }\n\n    /** \n     * @Author: 王林 \n     * @Date: 2021-08-03 22:58:12 \n     * @Desc: 动态设置思维导图数据 \n     */\n    setData(data) {\n        this.execCommand('CLEAR_ACTIVE_NODE')\n        this.command.clearHistory()\n        this.renderer.renderTree = data\n        this.reRender()\n    }\n\n    /** \n     * @Author: 王林 \n     * @Date: 2021-07-01 22:06:38 \n     * @Desc: 导出 \n     */\n    async export(...args) {\n        let result = await this.doExport.export(...args)\n        return result\n    }\n\n    /** \n     * @Author: 王林 \n     * @Date: 2021-07-11 09:20:03 \n     * @Desc: 转换位置 \n     */\n    toPos(x, y) {\n        return {\n            x: x - this.elRect.left,\n            y: y - this.elRect.top\n        }\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2022-06-08 14:12:38 \n     * @Desc: 设置只读模式、编辑模式 \n     */\n    setMode(mode) {\n        if (!['readonly', 'edit'].includes(mode)) {\n            return\n        }\n        this.opt.readonly = mode === 'readonly'\n        if (this.opt.readonly) {\n            // 取消当前激活的元素\n            this.renderer.clearAllActive()\n        }\n        this.emit('mode_change', mode)\n    }\n}\n\nexport default MindMap"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,YAAjB;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,KAAP,MAAkB,WAAlB;AACA,OAAOC,KAAP,MAAkB,cAAlB;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAOC,cAAP,MAA2B,sBAA3B;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,IAAP,MAAiB,YAAjB;AACA,SACIC,eADJ,QAEO,sBAFP;AAGA,SACIC,GADJ,QAEO,kBAFP,C,CAIA;;AACA,MAAMC,UAAU,GAAG;EACf;EACAC,QAAQ,EAAE,KAFK;EAGf;EACAC,MAAM,EAAE,kBAJO;EAKf;EACAZ,KAAK,EAAE,SANQ;EAMG;EAClB;EACAa,WAAW,EAAE,EARE;EASf;EACAC,UAAU,EAAE,GAVG;EAWf;EACAC,MAAM,EAAE,CAZO;EAaf;EACAC,aAAa,EAAE,EAdA;EAef;EACAC,aAAa,EAAE,EAhBA;EAiBf;EACAC,aAAa,EAAE,CAlBA;EAmBf;EACAC,iBAAiB,EAAE,CApBJ;EAqBf;EACAC,mBAAmB,EAAE,CAtBN;EAuBf;EACAC,oBAAoB,EAAE,EAxBP;EAyBf;EACAC,qBAAqB,EAAE;EACvB;AACJ;AACA;AACA;AACA;AACA;;AAhCmB,CAAnB;AAmCA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,OAAN,CAAc;EACV;AACJ;AACA;AACA;AACA;AACA;EACIC,WAAW,CAACC,GAAG,GAAG,EAAP,EAAW;IAClB;IACA,KAAKA,GAAL,GAAW,KAAKC,SAAL,CAAe3B,KAAK,CAACW,UAAD,EAAae,GAAb,CAApB,CAAX,CAFkB,CAIlB;;IACA,KAAKE,EAAL,GAAU,KAAKF,GAAL,CAASE,EAAnB;IACA,KAAKC,MAAL,GAAc,KAAKD,EAAL,CAAQE,qBAAR,EAAd,CANkB,CAQlB;;IACA,KAAKC,KAAL,GAAa,KAAKF,MAAL,CAAYE,KAAzB;IACA,KAAKC,MAAL,GAAc,KAAKH,MAAL,CAAYG,MAA1B,CAVkB,CAYlB;;IACA,KAAKC,GAAL,GAAWvB,GAAG,GAAGwB,KAAN,CAAY,KAAKN,EAAjB,EAAqBO,IAArB,CAA0B,KAAKJ,KAA/B,EAAsC,KAAKC,MAA3C,CAAX;IACA,KAAKI,IAAL,GAAY,KAAKH,GAAL,CAASI,KAAT,EAAZ,CAdkB,CAgBlB;;IACA,KAAKC,GAAL,GAAW,CAAX,CAjBkB,CAmBlB;;IACA,KAAKC,SAAL,GApBkB,CAsBlB;;IACA,KAAKC,KAAL,GAAa,IAAI1C,KAAJ,CAAU;MACnB2C,OAAO,EAAE;IADU,CAAV,CAAb,CAvBkB,CA2BlB;;IACA,KAAKC,UAAL,GAAkB,IAAIvC,UAAJ,CAAe;MAC7BsC,OAAO,EAAE;IADoB,CAAf,CAAlB,CA5BkB,CAgClB;;IACA,KAAKE,OAAL,GAAe,IAAIvC,OAAJ,CAAY;MACvBqC,OAAO,EAAE;IADc,CAAZ,CAAf,CAjCkB,CAqClB;;IACA,KAAKG,QAAL,GAAgB,IAAI7C,MAAJ,CAAW;MACvB0C,OAAO,EAAE;IADc,CAAX,CAAhB,CAtCkB,CA0ClB;;IACA,KAAKI,IAAL,GAAY,IAAIhD,IAAJ,CAAS;MACjB4C,OAAO,EAAE,IADQ;MAEjBL,IAAI,EAAE,KAAKA;IAFM,CAAT,CAAZ,CA3CkB,CAgDlB;;IACA,KAAKU,QAAL,GAAgB,IAAIxC,MAAJ,CAAW;MACvBmC,OAAO,EAAE;IADc,CAAX,CAAhB,CAjDkB,CAqDlB;;IACA,KAAKM,MAAL,GAAc,IAAIxC,MAAJ,CAAW;MACrBkC,OAAO,EAAE;IADY,CAAX,CAAd,CAtDkB,CA0DlB;;IACA,KAAKO,IAAL,GAAY,IAAIxC,IAAJ,CAAS;MACjBiC,OAAO,EAAE;IADQ,CAAT,CAAZ,CA3DkB,CA+DlB;;IACA,KAAKQ,cAAL,GAAsB,IAAI5C,cAAJ,EAAtB,CAhEkB,CAkElB;;IACA,KAAK6C,QAAL;IACAC,UAAU,CAAC,MAAM;MACb,KAAKR,OAAL,CAAaS,UAAb;IACH,CAFS,EAEP,CAFO,CAAV;EAGH;EAED;AACJ;AACA;AACA;AACA;;;EACIzB,SAAS,CAACD,GAAD,EAAM;IACX;IACA,IAAI,CAACjB,eAAe,CAAC4C,QAAhB,CAAyB3B,GAAG,CAACb,MAA7B,CAAL,EAA2C;MACvCa,GAAG,CAACb,MAAJ,GAAa,kBAAb;IACH,CAJU,CAKX;;;IACAa,GAAG,CAACzB,KAAJ,GAAYyB,GAAG,CAACzB,KAAJ,IAAaA,KAAK,CAACyB,GAAG,CAACzB,KAAL,CAAlB,GAAgCyB,GAAG,CAACzB,KAApC,GAA4C,SAAxD;IACA,OAAOyB,GAAP;EACH;EAED;AACJ;AACA;AACA;AACA;AACA;;;EACI4B,MAAM,GAAG;IACL,KAAKL,cAAL,CAAoBM,IAApB,CAAyB,QAAzB,EAAmC,MAAM;MACrC,KAAKhB,SAAL;MACA,KAAKK,QAAL,CAAcM,QAAd,GAAyB,KAAzB;MACA,KAAKN,QAAL,CAAcU,MAAd;IACH,CAJD;EAKH;EAED;AACJ;AACA;AACA;AACA;;;EACIJ,QAAQ,GAAG;IACP,KAAKD,cAAL,CAAoBM,IAApB,CAAyB,QAAzB,EAAmC,MAAM;MACrC,KAAKnB,IAAL,CAAUoB,KAAV;MACA,KAAKjB,SAAL;MACA,KAAKK,QAAL,CAAcM,QAAd,GAAyB,IAAzB;MACA,KAAKN,QAAL,CAAcU,MAAd;IACH,CALD;EAMH;EAED;AACJ;AACA;AACA;AACA;;;EACIG,MAAM,GAAG;IACL,KAAK5B,MAAL,GAAc,KAAKD,EAAL,CAAQE,qBAAR,EAAd;IACA,KAAKC,KAAL,GAAa,KAAKF,MAAL,CAAYE,KAAzB;IACA,KAAKC,MAAL,GAAc,KAAKH,MAAL,CAAYG,MAA1B;IACA,KAAKC,GAAL,CAASE,IAAT,CAAc,KAAKJ,KAAnB,EAA0B,KAAKC,MAA/B;EACH;EAED;AACJ;AACA;AACA;AACA;;;EACI0B,EAAE,CAAClB,KAAD,EAAQmB,EAAR,EAAY;IACV,KAAKnB,KAAL,CAAWkB,EAAX,CAAclB,KAAd,EAAqBmB,EAArB;EACH;EAED;AACJ;AACA;AACA;AACA;;;EACIC,IAAI,CAACpB,KAAD,EAAQ,GAAGqB,IAAX,EAAiB;IACjB,KAAKrB,KAAL,CAAWoB,IAAX,CAAgBpB,KAAhB,EAAuB,GAAGqB,IAA1B;EACH;EAED;AACJ;AACA;AACA;AACA;;;EACIC,GAAG,CAACtB,KAAD,EAAQmB,EAAR,EAAY;IACX,KAAKnB,KAAL,CAAWsB,GAAX,CAAetB,KAAf,EAAsBmB,EAAtB;EACH;EAED;AACJ;AACA;AACA;AACA;;;EACIpB,SAAS,GAAG;IACR;IACA,KAAKzB,WAAL,GAAmBd,KAAK,CAACC,KAAK,CAAC,KAAKyB,GAAL,CAASzB,KAAV,CAAN,EAAwB,KAAKyB,GAAL,CAASZ,WAAjC,CAAxB,CAFQ,CAGR;;IACAZ,KAAK,CAAC6D,kBAAN,CAAyB,KAAKnC,EAA9B,EAAkC,KAAKd,WAAvC;EACH;EAED;AACJ;AACA;AACA;AACA;;;EACIkD,QAAQ,CAAC/D,KAAD,EAAQ;IACZ,KAAK2C,QAAL,CAAcqB,cAAd;IACA,KAAKvC,GAAL,CAASzB,KAAT,GAAiBA,KAAjB;IACA,KAAKiD,QAAL;EACH;EAED;AACJ;AACA;AACA;AACA;;;EACIgB,QAAQ,GAAG;IACP,OAAO,KAAKxC,GAAL,CAASzB,KAAhB;EACH;EAED;AACJ;AACA;AACA;AACA;;;EACIkE,cAAc,CAACC,MAAD,EAAS;IACnB,KAAK1C,GAAL,CAASZ,WAAT,GAAuBsD,MAAvB;IACA,KAAKlB,QAAL;EACH;EAED;AACJ;AACA;AACA;AACA;;;EACImB,oBAAoB,GAAG;IACnB,OAAO,KAAK3C,GAAL,CAASZ,WAAhB;EACH;EAED;AACJ;AACA;AACA;AACA;;;EACIwD,cAAc,CAACC,IAAD,EAAO;IACjB,OAAOA,IAAI,KAAKC,SAAT,GAAqB,KAAK1D,WAA1B,GAAwC,KAAKA,WAAL,CAAiByD,IAAjB,CAA/C;EACH;EAED;AACJ;AACA;AACA;AACA;AACA;;;EACIE,SAAS,GAAG;IACR,OAAO,KAAK/C,GAAL,CAASb,MAAhB;EACH;EAED;AACJ;AACA;AACA;AACA;AACA;;;EACI6D,SAAS,CAAC7D,MAAD,EAAS;IACd;IACA,IAAI,CAACJ,eAAe,CAAC4C,QAAhB,CAAyBxC,MAAzB,CAAL,EAAuC;MACnCA,MAAM,GAAG,kBAAT;IACH;;IACD,KAAKa,GAAL,CAASb,MAAT,GAAkBA,MAAlB;IACA,KAAK+B,QAAL,CAAc8B,SAAd;IACA,KAAKpB,MAAL;EACH;EAED;AACJ;AACA;AACA;AACA;;;EACIqB,WAAW,CAAC,GAAGd,IAAJ,EAAU;IACjB,KAAKlB,OAAL,CAAaiC,IAAb,CAAkB,GAAGf,IAArB;EACH;EAED;AACJ;AACA;AACA;AACA;;;EACIgB,OAAO,CAACC,IAAD,EAAO;IACV,KAAKH,WAAL,CAAiB,mBAAjB;IACA,KAAKhC,OAAL,CAAaoC,YAAb;IACA,KAAKnC,QAAL,CAAcoC,UAAd,GAA2BF,IAA3B;IACA,KAAK5B,QAAL;EACH;EAED;AACJ;AACA;AACA;AACA;;;EACgB,MAAN+B,MAAM,CAAC,GAAGpB,IAAJ,EAAU;IAClB,IAAIqB,MAAM,GAAG,MAAM,KAAKpC,QAAL,CAAcmC,MAAd,CAAqB,GAAGpB,IAAxB,CAAnB;IACA,OAAOqB,MAAP;EACH;EAED;AACJ;AACA;AACA;AACA;;;EACIC,KAAK,CAACC,CAAD,EAAIC,CAAJ,EAAO;IACR,OAAO;MACHD,CAAC,EAAEA,CAAC,GAAG,KAAKvD,MAAL,CAAYyD,IADhB;MAEHD,CAAC,EAAEA,CAAC,GAAG,KAAKxD,MAAL,CAAY0D;IAFhB,CAAP;EAIH;EAED;AACJ;AACA;AACA;AACA;AACA;;;EACIC,OAAO,CAACC,IAAD,EAAO;IACV,IAAI,CAAC,CAAC,UAAD,EAAa,MAAb,EAAqBpC,QAArB,CAA8BoC,IAA9B,CAAL,EAA0C;MACtC;IACH;;IACD,KAAK/D,GAAL,CAASd,QAAT,GAAoB6E,IAAI,KAAK,UAA7B;;IACA,IAAI,KAAK/D,GAAL,CAASd,QAAb,EAAuB;MACnB;MACA,KAAKgC,QAAL,CAAcqB,cAAd;IACH;;IACD,KAAKL,IAAL,CAAU,aAAV,EAAyB6B,IAAzB;EACH;;AAnTS;;AAsTd,eAAejE,OAAf"},"metadata":{},"sourceType":"module"}