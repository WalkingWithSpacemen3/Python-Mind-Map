{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport merge from 'deepmerge';\nimport LogicalStructure from './layouts/LogicalStructure';\nimport MindMap from './layouts/MindMap';\nimport CatalogOrganization from './layouts/CatalogOrganization';\nimport OrganizationStructure from './layouts/OrganizationStructure';\nimport TextEdit from './TextEdit';\nimport { copyNodeTree, simpleDeepClone, walk } from './utils';\nimport { shapeList } from './Shape';\nimport { lineStyleProps } from './themes/default'; // 布局列表\n\nconst layouts = {\n  // 逻辑结构图\n  logicalStructure: LogicalStructure,\n  // 思维导图\n  mindMap: MindMap,\n  // 目录组织图\n  catalogOrganization: CatalogOrganization,\n  // 组织结构图\n  organizationStructure: OrganizationStructure\n};\n/** \n * javascript comment \n * @Author: 王林25 \n * @Date: 2021-04-08 16:25:07 \n * @Desc: 渲染\n */\n\nclass Render {\n  /** \n   * javascript comment \n   * @Author: 王林25 \n   * @Date: 2021-04-08 16:25:32 \n   * @Desc: 构造函数 \n   */\n  constructor(opt = {}) {\n    this.opt = opt;\n    this.mindMap = opt.mindMap;\n    this.themeConfig = this.mindMap.themeConfig;\n    this.draw = this.mindMap.draw; // 渲染树，操作过程中修改的都是这里的数据\n\n    this.renderTree = merge({}, this.mindMap.opt.data || {}); // 是否重新渲染\n\n    this.reRender = false; // 当前激活的节点列表\n\n    this.activeNodeList = []; // 根节点\n\n    this.root = null; // 文本编辑框，需要再bindEvent之前实例化，否则单击事件只能触发隐藏文本编辑框，而无法保存文本修改\n\n    this.textEdit = new TextEdit(this); // 布局\n\n    this.setLayout(); // 绑定事件\n\n    this.bindEvent(); // 注册命令\n\n    this.registerCommands(); // 注册快捷键\n\n    this.registerShortcutKeys();\n  }\n  /** \n   * javascript comment \n   * @Author: 王林25 \n   * @Date: 2021-07-13 16:20:07 \n   * @Desc: 设置布局结构 \n   */\n\n\n  setLayout() {\n    this.layout = new (layouts[this.mindMap.opt.layout] ? layouts[this.mindMap.opt.layout] : layouts.logicalStructure)(this);\n  }\n  /** \n   * @Author: 王林 \n   * @Date: 2021-06-20 10:34:06 \n   * @Desc:  绑定事件\n   */\n\n\n  bindEvent() {\n    // 点击事件\n    this.mindMap.on('draw_click', () => {\n      // 清除激活状态\n      if (this.activeNodeList.length > 0) {\n        this.mindMap.execCommand('CLEAR_ACTIVE_NODE');\n      }\n    });\n  }\n  /** \n   * @Author: 王林 \n   * @Date: 2021-05-04 13:19:06 \n   * @Desc: 注册命令 \n   */\n\n\n  registerCommands() {\n    // 全选\n    this.selectAll = this.selectAll.bind(this);\n    this.mindMap.command.add('SELECT_ALL', this.selectAll); // 回退\n\n    this.back = this.back.bind(this);\n    this.mindMap.command.add('BACK', this.back); // 前进\n\n    this.forward = this.forward.bind(this);\n    this.mindMap.command.add('FORWARD', this.forward); // 插入同级节点\n\n    this.insertNode = this.insertNode.bind(this);\n    this.mindMap.command.add('INSERT_NODE', this.insertNode); // 插入子节点\n\n    this.insertChildNode = this.insertChildNode.bind(this);\n    this.mindMap.command.add('INSERT_CHILD_NODE', this.insertChildNode); // 上移节点\n\n    this.upNode = this.upNode.bind(this);\n    this.mindMap.command.add('UP_NODE', this.upNode); // 下移节点\n\n    this.downNode = this.downNode.bind(this);\n    this.mindMap.command.add('DOWN_NODE', this.downNode); // 移动节点\n\n    this.insertAfter = this.insertAfter.bind(this);\n    this.mindMap.command.add('INSERT_AFTER', this.insertAfter);\n    this.insertBefore = this.insertBefore.bind(this);\n    this.mindMap.command.add('INSERT_BEFORE', this.insertBefore);\n    this.moveNodeTo = this.moveNodeTo.bind(this);\n    this.mindMap.command.add('MOVE_NODE_TO', this.moveNodeTo); // 删除节点\n\n    this.removeNode = this.removeNode.bind(this);\n    this.mindMap.command.add('REMOVE_NODE', this.removeNode); // 粘贴节点\n\n    this.pasteNode = this.pasteNode.bind(this);\n    this.mindMap.command.add('PASTE_NODE', this.pasteNode); // 剪切节点\n\n    this.cutNode = this.cutNode.bind(this);\n    this.mindMap.command.add('CUT_NODE', this.cutNode); // 修改节点样式\n\n    this.setNodeStyle = this.setNodeStyle.bind(this);\n    this.mindMap.command.add('SET_NODE_STYLE', this.setNodeStyle); // 切换节点是否激活\n\n    this.setNodeActive = this.setNodeActive.bind(this);\n    this.mindMap.command.add('SET_NODE_ACTIVE', this.setNodeActive); // 清除所有激活节点\n\n    this.clearAllActive = this.clearAllActive.bind(this);\n    this.mindMap.command.add('CLEAR_ACTIVE_NODE', this.clearAllActive); // 切换节点是否展开\n\n    this.setNodeExpand = this.setNodeExpand.bind(this);\n    this.mindMap.command.add('SET_NODE_EXPAND', this.setNodeExpand); // 展开所有节点\n\n    this.expandAllNode = this.expandAllNode.bind(this);\n    this.mindMap.command.add('EXPAND_ALL', this.expandAllNode); // 收起所有节点\n\n    this.unexpandAllNode = this.unexpandAllNode.bind(this);\n    this.mindMap.command.add('UNEXPAND_ALL', this.unexpandAllNode); // 展开到指定层级\n\n    this.expandToLevel = this.expandToLevel.bind(this);\n    this.mindMap.command.add('UNEXPAND_TO_LEVEL', this.expandToLevel); // 设置节点数据\n\n    this.setNodeData = this.setNodeData.bind(this);\n    this.mindMap.command.add('SET_NODE_DATA', this.setNodeData); // 设置节点文本\n\n    this.setNodeText = this.setNodeText.bind(this);\n    this.mindMap.command.add('SET_NODE_TEXT', this.setNodeText); // 设置节点图片\n\n    this.setNodeImage = this.setNodeImage.bind(this);\n    this.mindMap.command.add('SET_NODE_IMAGE', this.setNodeImage); // 设置节点图标\n\n    this.setNodeIcon = this.setNodeIcon.bind(this);\n    this.mindMap.command.add('SET_NODE_ICON', this.setNodeIcon); // 设置节点超链接\n\n    this.setNodeHyperlink = this.setNodeHyperlink.bind(this);\n    this.mindMap.command.add('SET_NODE_HYPERLINK', this.setNodeHyperlink); // 设置节点备注\n\n    this.setNodeNote = this.setNodeNote.bind(this);\n    this.mindMap.command.add('SET_NODE_NOTE', this.setNodeNote); // 设置节点标签\n\n    this.setNodeTag = this.setNodeTag.bind(this);\n    this.mindMap.command.add('SET_NODE_TAG', this.setNodeTag); // 添加节点概要\n\n    this.addGeneralization = this.addGeneralization.bind(this);\n    this.mindMap.command.add('ADD_GENERALIZATION', this.addGeneralization); // 删除节点概要\n\n    this.removeGeneralization = this.removeGeneralization.bind(this);\n    this.mindMap.command.add('REMOVE_GENERALIZATION', this.removeGeneralization); // 设置节点自定义位置\n\n    this.setNodeCustomPosition = this.setNodeCustomPosition.bind(this);\n    this.mindMap.command.add('SET_NODE_CUSTOM_POSITION', this.setNodeCustomPosition); // 一键整理布局\n\n    this.resetLayout = this.resetLayout.bind(this);\n    this.mindMap.command.add('RESET_LAYOUT', this.resetLayout); // 设置节点形状\n\n    this.setNodeShape = this.setNodeShape.bind(this);\n    this.mindMap.command.add('SET_NODE_SHAPE', this.setNodeShape);\n  }\n  /** \n   * @Author: 王林 \n   * @Date: 2021-07-11 16:55:44 \n   * @Desc: 注册快捷键 \n   */\n\n\n  registerShortcutKeys() {\n    // 插入下级节点\n    this.mindMap.keyCommand.addShortcut('Tab', () => {\n      this.mindMap.execCommand('INSERT_CHILD_NODE');\n    }); // 插入同级节点\n\n    this.insertNodeWrap = () => {\n      if (this.textEdit.showTextEdit) {\n        return;\n      }\n\n      this.mindMap.execCommand('INSERT_NODE');\n    };\n\n    this.mindMap.keyCommand.addShortcut('Enter', this.insertNodeWrap); // 插入概要\n\n    this.mindMap.keyCommand.addShortcut('Control+s', this.addGeneralization); // 展开/收起节点\n\n    this.toggleActiveExpand = this.toggleActiveExpand.bind(this);\n    this.mindMap.keyCommand.addShortcut('/', this.toggleActiveExpand); // 删除节点\n\n    this.removeNodeWrap = () => {\n      this.mindMap.execCommand('REMOVE_NODE');\n    };\n\n    this.mindMap.keyCommand.addShortcut('Del|Backspace', this.removeNodeWrap); // 节点编辑时某些快捷键会存在冲突，需要暂时去除\n\n    this.mindMap.on('before_show_text_edit', () => {\n      this.startTextEdit();\n    });\n    this.mindMap.on('hide_text_edit', () => {\n      this.endTextEdit();\n    }); // 全选\n\n    this.mindMap.keyCommand.addShortcut('Control+a', () => {\n      this.mindMap.execCommand('SELECT_ALL');\n    }); // 一键整理布局\n\n    this.mindMap.keyCommand.addShortcut('Control+l', this.resetLayout); // 上移节点\n\n    this.mindMap.keyCommand.addShortcut('Control+Up', this.upNode); // 下移节点\n\n    this.mindMap.keyCommand.addShortcut('Control+Down', this.downNode); // 复制节点、剪切节点、粘贴节点的快捷键需开发者自行注册实现，可参考demo\n  }\n  /** \n   * javascript comment \n   * @Author: 王林25 \n   * @Date: 2022-05-09 10:43:52 \n   * @Desc: 开启文字编辑，会禁用回车键和删除键相关快捷键防止冲突 \n   */\n\n\n  startTextEdit() {\n    this.mindMap.keyCommand.save(); // this.mindMap.keyCommand.removeShortcut('Del|Backspace')\n    // this.mindMap.keyCommand.removeShortcut('/')\n    // this.mindMap.keyCommand.removeShortcut('Enter', this.insertNodeWrap)\n  }\n  /** \n   * javascript comment \n   * @Author: 王林25 \n   * @Date: 2022-05-09 10:45:11 \n   * @Desc: 结束文字编辑，会恢复回车键和删除键相关快捷键\n   */\n\n\n  endTextEdit() {\n    this.mindMap.keyCommand.restore(); // this.mindMap.keyCommand.addShortcut('Del|Backspace', this.removeNodeWrap)\n    // this.mindMap.keyCommand.addShortcut('/', this.toggleActiveExpand)\n    // this.mindMap.keyCommand.addShortcut('Enter', this.insertNodeWrap)\n  }\n  /** \n   * javascript comment \n   * @Author: 王林25 \n   * @Date: 2021-04-08 16:27:55 \n   * @Desc:  渲染\n   */\n\n\n  render() {\n    if (this.reRender) {\n      this.clearActive();\n    }\n\n    this.layout.doLayout(root => {\n      this.root = root;\n      this.root.render();\n    });\n    this.mindMap.emit('node_active', null, this.activeNodeList);\n  }\n  /** \n   * @Author: 王林 \n   * @Date: 2021-04-12 22:45:01 \n   * @Desc: 清除当前激活的节点 \n   */\n\n\n  clearActive() {\n    this.activeNodeList.forEach(item => {\n      this.setNodeActive(item, false);\n    });\n    this.activeNodeList = [];\n  }\n  /** \n   * @Author: 王林 \n   * @Date: 2021-08-03 23:14:34 \n   * @Desc: 清除当前所有激活节点，并会触发事件 \n   */\n\n\n  clearAllActive() {\n    if (this.activeNodeList.length <= 0) {\n      return;\n    }\n\n    this.clearActive();\n    this.mindMap.emit('node_active', null, []);\n  }\n  /** \n   * @Author: 王林 \n   * @Date: 2021-07-11 10:54:00 \n   * @Desc:  添加节点到激活列表里\n   */\n\n\n  addActiveNode(node) {\n    let index = this.findActiveNodeIndex(node);\n\n    if (index === -1) {\n      this.activeNodeList.push(node);\n    }\n  }\n  /** \n   * @Author: 王林 \n   * @Date: 2021-07-10 10:04:04 \n   * @Desc: 在激活列表里移除某个节点 \n   */\n\n\n  removeActiveNode(node) {\n    let index = this.findActiveNodeIndex(node);\n\n    if (index === -1) {\n      return;\n    }\n\n    this.activeNodeList.splice(index, 1);\n  }\n  /** \n   * @Author: 王林 \n   * @Date: 2021-07-11 10:55:23 \n   * @Desc: 检索某个节点在激活列表里的索引 \n   */\n\n\n  findActiveNodeIndex(node) {\n    return this.activeNodeList.findIndex(item => {\n      return item === node;\n    });\n  }\n  /** \n   * @Author: 王林 \n   * @Date: 2021-05-04 13:46:08 \n   * @Desc: 获取节点在同级里的索引位置 \n   */\n\n\n  getNodeIndex(node) {\n    return node.parent ? node.parent.children.findIndex(item => {\n      return item === node;\n    }) : 0;\n  }\n  /** \n   * @Author: 王林 \n   * @Date: 2021-08-04 23:54:52 \n   * @Desc: 全选 \n   */\n\n\n  selectAll() {\n    walk(this.root, null, node => {\n      if (!node.nodeData.data.isActive) {\n        node.nodeData.data.isActive = true;\n        this.addActiveNode(node);\n        setTimeout(() => {\n          node.renderNode();\n        }, 0);\n      }\n    }, null, true, 0, 0);\n  }\n  /** \n   * @Author: 王林 \n   * @Date: 2021-07-11 22:34:12 \n   * @Desc: 回退 \n   */\n\n\n  back(step) {\n    this.clearAllActive();\n    let data = this.mindMap.command.back(step);\n\n    if (data) {\n      this.renderTree = data;\n      this.mindMap.reRender();\n    }\n  }\n  /** \n   * javascript comment \n   * @Author: 王林25 \n   * @Date: 2021-07-12 10:44:51 \n   * @Desc: 前进 \n   */\n\n\n  forward(step) {\n    this.clearAllActive();\n    let data = this.mindMap.command.forward(step);\n\n    if (data) {\n      this.renderTree = data;\n      this.mindMap.reRender();\n    }\n  }\n  /** \n   * @Author: 王林 \n   * @Date: 2021-05-04 13:19:54 \n   * @Desc: 插入同级节点，多个节点只会操作第一个节点\n   */\n\n\n  insertNode() {\n    if (this.activeNodeList.length <= 0) {\n      return;\n    }\n\n    let first = this.activeNodeList[0];\n\n    if (first.isRoot) {\n      this.insertChildNode();\n    } else {\n      let text = first.layerIndex === 1 ? '二级节点' : '分支主题';\n\n      if (first.layerIndex === 1) {\n        first.parent.initRender = true;\n      }\n\n      let index = this.getNodeIndex(first);\n      first.parent.nodeData.children.splice(index + 1, 0, {\n        \"inserting\": true,\n        \"data\": {\n          \"text\": text,\n          \"expand\": true\n        },\n        \"children\": []\n      });\n      this.mindMap.render();\n    }\n  }\n  /** \n   * @Author: 王林 \n   * @Date: 2021-05-04 13:31:02 \n   * @Desc: 插入子节点 \n   */\n\n\n  insertChildNode() {\n    if (this.activeNodeList.length <= 0) {\n      return;\n    }\n\n    this.activeNodeList.forEach((node, index) => {\n      if (!node.nodeData.children) {\n        node.nodeData.children = [];\n      }\n\n      let text = node.isRoot ? '二级节点' : '分支主题';\n      node.nodeData.children.push({\n        \"inserting\": true,\n        \"data\": {\n          \"text\": text,\n          \"expand\": true\n        },\n        \"children\": []\n      });\n\n      if (node.isRoot) {\n        node.initRender = true; // this.mindMap.batchExecution.push('renderNode' + index, () => {\n        //     node.renderNode()\n        // })\n      }\n    });\n    this.mindMap.render();\n  }\n  /** \n   * @Author: 王林 \n   * @Date: 2021-07-14 23:34:14 \n   * @Desc: 上移节点，多个节点只会操作第一个节点\n   */\n\n\n  upNode() {\n    if (this.activeNodeList.length <= 0) {\n      return;\n    }\n\n    let node = this.activeNodeList[0];\n\n    if (node.isRoot) {\n      return;\n    }\n\n    let parent = node.parent;\n    let childList = parent.children;\n    let index = childList.findIndex(item => {\n      return item === node;\n    });\n\n    if (index === -1 || index === 0) {\n      return;\n    }\n\n    let insertIndex = index - 1; // 节点实例\n\n    childList.splice(index, 1);\n    childList.splice(insertIndex, 0, node); // 节点数据\n\n    parent.nodeData.children.splice(index, 1);\n    parent.nodeData.children.splice(insertIndex, 0, node.nodeData);\n    this.mindMap.render();\n  }\n  /** \n   * @Author: 王林 \n   * @Date: 2021-07-14 23:34:18 \n   * @Desc: 下移节点，多个节点只会操作第一个节点 \n   */\n\n\n  downNode() {\n    if (this.activeNodeList.length <= 0) {\n      return;\n    }\n\n    let node = this.activeNodeList[0];\n\n    if (node.isRoot) {\n      return;\n    }\n\n    let parent = node.parent;\n    let childList = parent.children;\n    let index = childList.findIndex(item => {\n      return item === node;\n    });\n\n    if (index === -1 || index === childList.length - 1) {\n      return;\n    }\n\n    let insertIndex = index + 1; // 节点实例\n\n    childList.splice(index, 1);\n    childList.splice(insertIndex, 0, node); // 节点数据\n\n    parent.nodeData.children.splice(index, 1);\n    parent.nodeData.children.splice(insertIndex, 0, node.nodeData);\n    this.mindMap.render();\n  }\n  /** \n   * javascript comment \n   * @Author: 王林25 \n   * @Date: 2021-11-25 10:51:34 \n   * @Desc: 将节点移动到另一个节点的前面\n   */\n\n\n  insertBefore(node, exist) {\n    if (node.isRoot) {\n      return;\n    }\n\n    let parent = node.parent;\n    let childList = parent.children; // 要移动节点的索引\n\n    let index = childList.findIndex(item => {\n      return item === node;\n    });\n\n    if (index === -1) {\n      return;\n    } // 目标节点的索引\n\n\n    let existIndex = childList.findIndex(item => {\n      return item === exist;\n    });\n\n    if (existIndex === -1) {\n      return;\n    } // 当前节点在目标节点前面\n\n\n    if (index < existIndex) {\n      existIndex = existIndex - 1;\n    } else {\n      existIndex = existIndex;\n    } // 节点实例\n\n\n    childList.splice(index, 1);\n    childList.splice(existIndex, 0, node); // 节点数据\n\n    parent.nodeData.children.splice(index, 1);\n    parent.nodeData.children.splice(existIndex, 0, node.nodeData);\n    this.mindMap.render();\n  }\n  /** \n   * javascript comment \n   * @Author: 王林25 \n   * @Date: 2021-11-25 10:51:34 \n   * @Desc: 将节点移动到另一个节点的后面\n   */\n\n\n  insertAfter(node, exist) {\n    if (node.isRoot) {\n      return;\n    }\n\n    let parent = node.parent;\n    let childList = parent.children; // 要移动节点的索引\n\n    let index = childList.findIndex(item => {\n      return item === node;\n    });\n\n    if (index === -1) {\n      return;\n    } // 目标节点的索引\n\n\n    let existIndex = childList.findIndex(item => {\n      return item === exist;\n    });\n\n    if (existIndex === -1) {\n      return;\n    } // 当前节点在目标节点前面\n\n\n    if (index < existIndex) {\n      existIndex = existIndex;\n    } else {\n      existIndex = existIndex + 1;\n    } // 节点实例\n\n\n    childList.splice(index, 1);\n    childList.splice(existIndex, 0, node); // 节点数据\n\n    parent.nodeData.children.splice(index, 1);\n    parent.nodeData.children.splice(existIndex, 0, node.nodeData);\n    this.mindMap.render();\n  }\n  /** \n   * @Author: 王林 \n   * @Date: 2021-05-04 13:40:39 \n   * @Desc: 移除节点 \n   */\n\n\n  removeNode() {\n    if (this.activeNodeList.length <= 0) {\n      return;\n    }\n\n    for (let i = 0; i < this.activeNodeList.length; i++) {\n      let node = this.activeNodeList[i];\n\n      if (node.isGeneralization) {\n        // 删除概要节点\n        this.setNodeData(node.generalizationBelongNode, {\n          generalization: null\n        });\n        node.generalizationBelongNode.update();\n        this.removeActiveNode(node);\n        i--;\n      } else if (node.isRoot) {\n        node.children.forEach(child => {\n          child.remove();\n        });\n        node.children = [];\n        node.nodeData.children = [];\n        break;\n      } else {\n        this.removeActiveNode(node);\n        this.removeOneNode(node);\n        i--;\n      }\n    }\n\n    this.mindMap.emit('node_active', null, []);\n    this.mindMap.render();\n  }\n  /** \n   * @Author: 王林 \n   * @Date: 2021-07-15 22:46:27 \n   * @Desc: 移除某个指定节点 \n   */\n\n\n  removeOneNode(node) {\n    let index = this.getNodeIndex(node);\n    node.remove();\n    node.parent.children.splice(index, 1);\n    node.parent.nodeData.children.splice(index, 1);\n  }\n  /** \n   * javascript comment \n   * @Author: 王林25 \n   * @Date: 2021-07-15 09:53:23 \n   * @Desc: 复制节点，多个节点只会操作第一个节点 \n   */\n\n\n  copyNode() {\n    if (this.activeNodeList.length <= 0) {\n      return;\n    }\n\n    return copyNodeTree({}, this.activeNodeList[0]);\n  }\n  /** \n   * @Author: 王林 \n   * @Date: 2021-07-15 22:36:45 \n   * @Desc: 剪切节点，多个节点只会操作第一个节点\n   */\n\n\n  cutNode(callback) {\n    if (this.activeNodeList.length <= 0) {\n      return;\n    }\n\n    let node = this.activeNodeList[0];\n\n    if (node.isRoot) {\n      return null;\n    }\n\n    let copyData = copyNodeTree({}, node);\n    this.removeActiveNode(node);\n    this.removeOneNode(node);\n    this.mindMap.emit('node_active', null, this.activeNodeList);\n    this.mindMap.render();\n\n    if (callback && typeof callback === 'function') {\n      callback(copyData);\n    }\n  }\n  /** \n   * javascript comment \n   * @Author: 王林25 \n   * @Date: 2021-11-24 16:54:01 \n   * @Desc: 移动一个节点作为另一个节点的子节点 \n   */\n\n\n  moveNodeTo(node, toNode) {\n    if (node.isRoot) {\n      return;\n    }\n\n    let copyData = copyNodeTree({}, node);\n    this.removeActiveNode(node);\n    this.removeOneNode(node);\n    this.mindMap.emit('node_active', null, this.activeNodeList);\n    toNode.nodeData.children.push(copyData);\n    this.mindMap.render();\n  }\n  /** \n   * @Author: 王林 \n   * @Date: 2021-07-15 20:09:39 \n   * @Desc:  粘贴节点到节点\n   */\n\n\n  pasteNode(data) {\n    if (this.activeNodeList.length <= 0) {\n      return;\n    }\n\n    this.activeNodeList.forEach(item => {\n      item.nodeData.children.push(simpleDeepClone(data));\n    });\n    this.mindMap.render();\n  }\n  /** \n   * @Author: 王林 \n   * @Date: 2021-07-08 21:54:30 \n   * @Desc: 设置节点样式 \n   */\n\n\n  setNodeStyle(node, prop, value, isActive) {\n    let data = {};\n\n    if (isActive) {\n      data = {\n        activeStyle: { ...(node.nodeData.data.activeStyle || {}),\n          [prop]: value\n        }\n      };\n    } else {\n      data = {\n        [prop]: value\n      };\n    }\n\n    this.setNodeDataRender(node, data); // 更新了连线的样式\n\n    if (lineStyleProps.includes(prop)) {\n      (node.parent || node).renderLine(true);\n    }\n  }\n  /** \n   * @Author: 王林 \n   * @Date: 2021-07-08 22:13:03 \n   * @Desc: 设置节点是否激活 \n   */\n\n\n  setNodeActive(node, active) {\n    this.setNodeData(node, {\n      isActive: active\n    });\n    node.renderNode();\n  }\n  /** \n   * @Author: 王林 \n   * @Date: 2021-07-10 16:52:41 \n   * @Desc: 设置节点是否展开 \n   */\n\n\n  setNodeExpand(node, expand) {\n    this.setNodeData(node, {\n      expand\n    });\n\n    if (expand) {\n      // 展开\n      node.children.forEach(item => {\n        item.render();\n      });\n      node.renderLine();\n      node.updateExpandBtnNode();\n    } else {\n      // 收缩\n      node.children.forEach(item => {\n        item.remove();\n      });\n      node.removeLine();\n      node.updateExpandBtnNode();\n    }\n\n    this.mindMap.render();\n  }\n  /** \n   * @Author: 王林 \n   * @Date: 2021-07-15 23:23:37 \n   * @Desc: 展开所有 \n   */\n\n\n  expandAllNode() {\n    walk(this.renderTree, null, node => {\n      if (!node.data.expand) {\n        node.data.expand = true;\n      }\n    }, null, true, 0, 0);\n    this.mindMap.reRender();\n  }\n  /** \n   * @Author: 王林 \n   * @Date: 2021-07-15 23:27:14 \n   * @Desc: 收起所有 \n   */\n\n\n  unexpandAllNode() {\n    walk(this.renderTree, null, (node, parent, isRoot) => {\n      node._node = null;\n\n      if (!isRoot) {\n        node.data.expand = false;\n      }\n    }, null, true, 0, 0);\n    this.mindMap.reRender();\n  }\n  /** \n   * javascript comment \n   * @Author: 王林25 \n   * @Date: 2022-09-23 16:31:27 \n   * @Desc: 展开到指定层级 \n   */\n\n\n  expandToLevel(level) {\n    walk(this.renderTree, null, (node, parent, isRoot, layerIndex) => {\n      node._node = null;\n      node.data.expand = layerIndex < level;\n    }, null, true, 0, 0);\n    this.mindMap.reRender();\n  }\n  /** \n   * @Author: 王林 \n   * @Date: 2022-08-14 09:18:40 \n   * @Desc: 切换激活节点的展开状态 \n   */\n\n\n  toggleActiveExpand() {\n    this.activeNodeList.forEach(node => {\n      if (node.nodeData.children.length <= 0) {\n        return;\n      }\n\n      this.toggleNodeExpand(node);\n    });\n  }\n  /** \n   * @Author: 王林 \n   * @Date: 2021-07-11 17:15:33 \n   * @Desc: 切换节点展开状态 \n   */\n\n\n  toggleNodeExpand(node) {\n    this.mindMap.execCommand('SET_NODE_EXPAND', node, !node.nodeData.data.expand);\n  }\n  /** \n   * @Author: 王林 \n   * @Date: 2021-07-09 22:04:19 \n   * @Desc: 设置节点文本 \n   */\n\n\n  setNodeText(node, text) {\n    this.setNodeDataRender(node, {\n      text\n    });\n  }\n  /** \n   * @Author: 王林 \n   * @Date: 2021-07-10 08:37:40 \n   * @Desc: 设置节点图片 \n   */\n\n\n  setNodeImage(node, {\n    url,\n    title,\n    width,\n    height\n  }) {\n    this.setNodeDataRender(node, {\n      image: url,\n      imageTitle: title || '',\n      imageSize: {\n        width,\n        height\n      }\n    });\n  }\n  /** \n   * @Author: 王林 \n   * @Date: 2021-07-10 08:44:06 \n   * @Desc: 设置节点图标 \n   */\n\n\n  setNodeIcon(node, icons) {\n    this.setNodeDataRender(node, {\n      icon: icons\n    });\n  }\n  /** \n   * @Author: 王林 \n   * @Date: 2021-07-10 08:49:33 \n   * @Desc: 设置节点超链接 \n   */\n\n\n  setNodeHyperlink(node, link, title = '') {\n    this.setNodeDataRender(node, {\n      hyperlink: link,\n      hyperlinkTitle: title\n    });\n  }\n  /** \n   * @Author: 王林 \n   * @Date: 2021-07-10 08:52:59 \n   * @Desc: 设置节点备注 \n   */\n\n\n  setNodeNote(node, note) {\n    this.setNodeDataRender(node, {\n      note\n    });\n  }\n  /** \n   * @Author: 王林 \n   * @Date: 2021-07-10 08:54:53 \n   * @Desc: 设置节点标签 \n   */\n\n\n  setNodeTag(node, tag) {\n    this.setNodeDataRender(node, {\n      tag\n    });\n  }\n  /** \n   * @Author: 王林 \n   * @Date: 2022-07-30 20:52:42 \n   * @Desc: 添加节点概要\n   */\n\n\n  addGeneralization(data) {\n    if (this.activeNodeList.length <= 0) {\n      return;\n    }\n\n    this.activeNodeList.forEach(node => {\n      if (node.nodeData.data.generalization || node.isRoot) {\n        return;\n      }\n\n      this.setNodeData(node, {\n        generalization: data || {\n          text: '概要'\n        }\n      });\n      node.update();\n    });\n    this.mindMap.render();\n  }\n  /** \n   * @Author: 王林 \n   * @Date: 2022-07-30 21:16:33 \n   * @Desc: 删除节点概要\n   */\n\n\n  removeGeneralization() {\n    if (this.activeNodeList.length <= 0) {\n      return;\n    }\n\n    this.activeNodeList.forEach(node => {\n      if (!node.nodeData.data.generalization) {\n        return;\n      }\n\n      this.setNodeData(node, {\n        generalization: null\n      });\n      node.update();\n    });\n    this.mindMap.render();\n  }\n  /** \n   * javascript comment \n   * @Author: 王林25 \n   * @Date: 2022-08-02 19:04:24 \n   * @Desc: 设置节点自定义位置 \n   */\n\n\n  setNodeCustomPosition(node, left = undefined, top = undefined) {\n    let nodeList = [node] || this.activeNodeList;\n    nodeList.forEach(item => {\n      this.setNodeData(item, {\n        customLeft: left,\n        customTop: top\n      });\n    });\n  }\n  /** \n   * javascript comment \n   * @Author: 王林25 \n   * @Date: 2022-08-02 20:02:50 \n   * @Desc: 一键整理布局，即去除自定义位置 \n   */\n\n\n  resetLayout() {\n    walk(this.root, null, node => {\n      node.customLeft = undefined;\n      node.customTop = undefined;\n      this.setNodeData(node, {\n        customLeft: undefined,\n        customTop: undefined\n      });\n      this.mindMap.render();\n    }, null, true, 0, 0);\n  }\n  /** \n   * javascript comment \n   * @Author: 王林 \n   * @Date: 2022-09-12 21:44:01 \n   * @Desc: 设置节点形状 \n   */\n\n\n  setNodeShape(node, shape) {\n    if (!shape || !shapeList.includes(shape)) {\n      return;\n    }\n\n    let nodeList = [node] || this.activeNodeList;\n    nodeList.forEach(item => {\n      this.setNodeStyle(item, 'shape', shape);\n    });\n  }\n  /** \n   * @Author: 王林 \n   * @Date: 2021-05-04 14:19:48 \n   * @Desc: 更新节点数据 \n   */\n\n\n  setNodeData(node, data) {\n    Object.keys(data).forEach(key => {\n      node.nodeData.data[key] = data[key];\n    });\n  }\n  /** \n   * @Author: 王林 \n   * @Date: 2021-07-10 08:45:48 \n   * @Desc: 设置节点数据，并判断是否渲染 \n   */\n\n\n  setNodeDataRender(node, data) {\n    this.setNodeData(node, data);\n    let changed = node.getSize();\n    node.renderNode();\n\n    if (changed) {\n      if (node.isGeneralization) {\n        // 概要节点\n        node.generalizationBelongNode.updateGeneralization();\n      }\n\n      this.mindMap.render();\n    }\n  }\n\n}\n\nexport default Render;","map":{"version":3,"names":["merge","LogicalStructure","MindMap","CatalogOrganization","OrganizationStructure","TextEdit","copyNodeTree","simpleDeepClone","walk","shapeList","lineStyleProps","layouts","logicalStructure","mindMap","catalogOrganization","organizationStructure","Render","constructor","opt","themeConfig","draw","renderTree","data","reRender","activeNodeList","root","textEdit","setLayout","bindEvent","registerCommands","registerShortcutKeys","layout","on","length","execCommand","selectAll","bind","command","add","back","forward","insertNode","insertChildNode","upNode","downNode","insertAfter","insertBefore","moveNodeTo","removeNode","pasteNode","cutNode","setNodeStyle","setNodeActive","clearAllActive","setNodeExpand","expandAllNode","unexpandAllNode","expandToLevel","setNodeData","setNodeText","setNodeImage","setNodeIcon","setNodeHyperlink","setNodeNote","setNodeTag","addGeneralization","removeGeneralization","setNodeCustomPosition","resetLayout","setNodeShape","keyCommand","addShortcut","insertNodeWrap","showTextEdit","toggleActiveExpand","removeNodeWrap","startTextEdit","endTextEdit","save","restore","render","clearActive","doLayout","emit","forEach","item","addActiveNode","node","index","findActiveNodeIndex","push","removeActiveNode","splice","findIndex","getNodeIndex","parent","children","nodeData","isActive","setTimeout","renderNode","step","first","isRoot","text","layerIndex","initRender","childList","insertIndex","exist","existIndex","i","isGeneralization","generalizationBelongNode","generalization","update","child","remove","removeOneNode","copyNode","callback","copyData","toNode","prop","value","activeStyle","setNodeDataRender","includes","renderLine","active","expand","updateExpandBtnNode","removeLine","_node","level","toggleNodeExpand","url","title","width","height","image","imageTitle","imageSize","icons","icon","link","hyperlink","hyperlinkTitle","note","tag","left","undefined","top","nodeList","customLeft","customTop","shape","Object","keys","key","changed","getSize","updateGeneralization"],"sources":["C:/Users/13007/Documents/GinTest/vue/node_modules/simple-mind-map/src/Render.js"],"sourcesContent":["import merge from 'deepmerge'\nimport LogicalStructure from './layouts/LogicalStructure'\nimport MindMap from './layouts/MindMap'\nimport CatalogOrganization from './layouts/CatalogOrganization'\nimport OrganizationStructure from './layouts/OrganizationStructure'\nimport TextEdit from './TextEdit'\nimport { copyNodeTree, simpleDeepClone, walk } from './utils'\nimport { shapeList } from './Shape'\nimport { lineStyleProps } from './themes/default'\n\n// 布局列表\nconst layouts = {\n    // 逻辑结构图\n    logicalStructure: LogicalStructure,\n    // 思维导图\n    mindMap: MindMap,\n    // 目录组织图\n    catalogOrganization: CatalogOrganization,\n    // 组织结构图\n    organizationStructure: OrganizationStructure\n}\n\n/** \n * javascript comment \n * @Author: 王林25 \n * @Date: 2021-04-08 16:25:07 \n * @Desc: 渲染\n */\nclass Render {\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2021-04-08 16:25:32 \n     * @Desc: 构造函数 \n     */\n    constructor(opt = {}) {\n        this.opt = opt\n        this.mindMap = opt.mindMap\n        this.themeConfig = this.mindMap.themeConfig\n        this.draw = this.mindMap.draw\n        // 渲染树，操作过程中修改的都是这里的数据\n        this.renderTree = merge({}, this.mindMap.opt.data || {})\n        // 是否重新渲染\n        this.reRender = false\n        // 当前激活的节点列表\n        this.activeNodeList = []\n        // 根节点\n        this.root = null\n        // 文本编辑框，需要再bindEvent之前实例化，否则单击事件只能触发隐藏文本编辑框，而无法保存文本修改\n        this.textEdit = new TextEdit(this)\n        // 布局\n        this.setLayout()\n        // 绑定事件\n        this.bindEvent()\n        // 注册命令\n        this.registerCommands()\n        // 注册快捷键\n        this.registerShortcutKeys()\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2021-07-13 16:20:07 \n     * @Desc: 设置布局结构 \n     */\n    setLayout() {\n        this.layout = new (layouts[this.mindMap.opt.layout] ? layouts[this.mindMap.opt.layout] : layouts.logicalStructure)(this)\n    }\n\n    /** \n     * @Author: 王林 \n     * @Date: 2021-06-20 10:34:06 \n     * @Desc:  绑定事件\n     */\n    bindEvent() {\n        // 点击事件\n        this.mindMap.on('draw_click', () => {\n            // 清除激活状态\n            if (this.activeNodeList.length > 0) {\n                this.mindMap.execCommand('CLEAR_ACTIVE_NODE')\n            }\n        })\n    }\n\n    /** \n     * @Author: 王林 \n     * @Date: 2021-05-04 13:19:06 \n     * @Desc: 注册命令 \n     */\n    registerCommands() {\n        // 全选\n        this.selectAll = this.selectAll.bind(this)\n        this.mindMap.command.add('SELECT_ALL', this.selectAll)\n        // 回退\n        this.back = this.back.bind(this)\n        this.mindMap.command.add('BACK', this.back)\n        // 前进\n        this.forward = this.forward.bind(this)\n        this.mindMap.command.add('FORWARD', this.forward)\n        // 插入同级节点\n        this.insertNode = this.insertNode.bind(this)\n        this.mindMap.command.add('INSERT_NODE', this.insertNode)\n        // 插入子节点\n        this.insertChildNode = this.insertChildNode.bind(this)\n        this.mindMap.command.add('INSERT_CHILD_NODE', this.insertChildNode)\n        // 上移节点\n        this.upNode = this.upNode.bind(this)\n        this.mindMap.command.add('UP_NODE', this.upNode)\n        // 下移节点\n        this.downNode = this.downNode.bind(this)\n        this.mindMap.command.add('DOWN_NODE', this.downNode)\n        // 移动节点\n        this.insertAfter = this.insertAfter.bind(this)\n        this.mindMap.command.add('INSERT_AFTER', this.insertAfter)\n        this.insertBefore = this.insertBefore.bind(this)\n        this.mindMap.command.add('INSERT_BEFORE', this.insertBefore)\n        this.moveNodeTo = this.moveNodeTo.bind(this)\n        this.mindMap.command.add('MOVE_NODE_TO', this.moveNodeTo)\n        // 删除节点\n        this.removeNode = this.removeNode.bind(this)\n        this.mindMap.command.add('REMOVE_NODE', this.removeNode)\n        // 粘贴节点\n        this.pasteNode = this.pasteNode.bind(this)\n        this.mindMap.command.add('PASTE_NODE', this.pasteNode)\n        // 剪切节点\n        this.cutNode = this.cutNode.bind(this)\n        this.mindMap.command.add('CUT_NODE', this.cutNode)\n        // 修改节点样式\n        this.setNodeStyle = this.setNodeStyle.bind(this)\n        this.mindMap.command.add('SET_NODE_STYLE', this.setNodeStyle)\n        // 切换节点是否激活\n        this.setNodeActive = this.setNodeActive.bind(this)\n        this.mindMap.command.add('SET_NODE_ACTIVE', this.setNodeActive)\n        // 清除所有激活节点\n        this.clearAllActive = this.clearAllActive.bind(this)\n        this.mindMap.command.add('CLEAR_ACTIVE_NODE', this.clearAllActive)\n        // 切换节点是否展开\n        this.setNodeExpand = this.setNodeExpand.bind(this)\n        this.mindMap.command.add('SET_NODE_EXPAND', this.setNodeExpand)\n        // 展开所有节点\n        this.expandAllNode = this.expandAllNode.bind(this)\n        this.mindMap.command.add('EXPAND_ALL', this.expandAllNode)\n        // 收起所有节点\n        this.unexpandAllNode = this.unexpandAllNode.bind(this)\n        this.mindMap.command.add('UNEXPAND_ALL', this.unexpandAllNode)\n        // 展开到指定层级\n        this.expandToLevel = this.expandToLevel.bind(this)\n        this.mindMap.command.add('UNEXPAND_TO_LEVEL', this.expandToLevel)\n        // 设置节点数据\n        this.setNodeData = this.setNodeData.bind(this)\n        this.mindMap.command.add('SET_NODE_DATA', this.setNodeData)\n        // 设置节点文本\n        this.setNodeText = this.setNodeText.bind(this)\n        this.mindMap.command.add('SET_NODE_TEXT', this.setNodeText)\n        // 设置节点图片\n        this.setNodeImage = this.setNodeImage.bind(this)\n        this.mindMap.command.add('SET_NODE_IMAGE', this.setNodeImage)\n        // 设置节点图标\n        this.setNodeIcon = this.setNodeIcon.bind(this)\n        this.mindMap.command.add('SET_NODE_ICON', this.setNodeIcon)\n        // 设置节点超链接\n        this.setNodeHyperlink = this.setNodeHyperlink.bind(this)\n        this.mindMap.command.add('SET_NODE_HYPERLINK', this.setNodeHyperlink)\n        // 设置节点备注\n        this.setNodeNote = this.setNodeNote.bind(this)\n        this.mindMap.command.add('SET_NODE_NOTE', this.setNodeNote)\n        // 设置节点标签\n        this.setNodeTag = this.setNodeTag.bind(this)\n        this.mindMap.command.add('SET_NODE_TAG', this.setNodeTag)\n        // 添加节点概要\n        this.addGeneralization = this.addGeneralization.bind(this)\n        this.mindMap.command.add('ADD_GENERALIZATION', this.addGeneralization)\n        // 删除节点概要\n        this.removeGeneralization = this.removeGeneralization.bind(this)\n        this.mindMap.command.add('REMOVE_GENERALIZATION', this.removeGeneralization)\n        // 设置节点自定义位置\n        this.setNodeCustomPosition = this.setNodeCustomPosition.bind(this)\n        this.mindMap.command.add('SET_NODE_CUSTOM_POSITION', this.setNodeCustomPosition)\n        // 一键整理布局\n        this.resetLayout = this.resetLayout.bind(this)\n        this.mindMap.command.add('RESET_LAYOUT', this.resetLayout)\n        // 设置节点形状\n        this.setNodeShape = this.setNodeShape.bind(this)\n        this.mindMap.command.add('SET_NODE_SHAPE', this.setNodeShape)\n    }\n\n    /** \n     * @Author: 王林 \n     * @Date: 2021-07-11 16:55:44 \n     * @Desc: 注册快捷键 \n     */\n    registerShortcutKeys() {\n        // 插入下级节点\n        this.mindMap.keyCommand.addShortcut('Tab', () => {\n            this.mindMap.execCommand('INSERT_CHILD_NODE')\n        })\n        // 插入同级节点\n        this.insertNodeWrap = () => {\n            if (this.textEdit.showTextEdit) {\n                return\n            }\n            this.mindMap.execCommand('INSERT_NODE')\n        }\n        this.mindMap.keyCommand.addShortcut('Enter', this.insertNodeWrap)\n        // 插入概要\n        this.mindMap.keyCommand.addShortcut('Control+s', this.addGeneralization)\n        // 展开/收起节点\n        this.toggleActiveExpand = this.toggleActiveExpand.bind(this)\n        this.mindMap.keyCommand.addShortcut('/', this.toggleActiveExpand)\n        // 删除节点\n        this.removeNodeWrap = () => {\n            this.mindMap.execCommand('REMOVE_NODE')\n        }\n        this.mindMap.keyCommand.addShortcut('Del|Backspace', this.removeNodeWrap)\n        // 节点编辑时某些快捷键会存在冲突，需要暂时去除\n        this.mindMap.on('before_show_text_edit', () => {\n            this.startTextEdit()\n        })\n        this.mindMap.on('hide_text_edit', () => {\n            this.endTextEdit()\n        })\n        // 全选\n        this.mindMap.keyCommand.addShortcut('Control+a', () => {\n            this.mindMap.execCommand('SELECT_ALL')\n        })\n        // 一键整理布局\n        this.mindMap.keyCommand.addShortcut('Control+l', this.resetLayout)\n        // 上移节点\n        this.mindMap.keyCommand.addShortcut('Control+Up', this.upNode)\n        // 下移节点\n        this.mindMap.keyCommand.addShortcut('Control+Down', this.downNode)\n        // 复制节点、剪切节点、粘贴节点的快捷键需开发者自行注册实现，可参考demo\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2022-05-09 10:43:52 \n     * @Desc: 开启文字编辑，会禁用回车键和删除键相关快捷键防止冲突 \n     */\n    startTextEdit() {\n        this.mindMap.keyCommand.save()\n        // this.mindMap.keyCommand.removeShortcut('Del|Backspace')\n        // this.mindMap.keyCommand.removeShortcut('/')\n        // this.mindMap.keyCommand.removeShortcut('Enter', this.insertNodeWrap)\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2022-05-09 10:45:11 \n     * @Desc: 结束文字编辑，会恢复回车键和删除键相关快捷键\n     */\n    endTextEdit() {\n        this.mindMap.keyCommand.restore()\n        // this.mindMap.keyCommand.addShortcut('Del|Backspace', this.removeNodeWrap)\n        // this.mindMap.keyCommand.addShortcut('/', this.toggleActiveExpand)\n        // this.mindMap.keyCommand.addShortcut('Enter', this.insertNodeWrap)\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2021-04-08 16:27:55 \n     * @Desc:  渲染\n     */\n    render() {\n        if (this.reRender) {\n            this.clearActive()\n        }\n        this.layout.doLayout((root) => {\n            this.root = root\n            this.root.render()\n        })\n        this.mindMap.emit('node_active', null, this.activeNodeList)\n    }\n\n    /** \n     * @Author: 王林 \n     * @Date: 2021-04-12 22:45:01 \n     * @Desc: 清除当前激活的节点 \n     */\n    clearActive() {\n        this.activeNodeList.forEach((item) => {\n            this.setNodeActive(item, false)\n        })\n        this.activeNodeList = []\n    }\n\n    /** \n     * @Author: 王林 \n     * @Date: 2021-08-03 23:14:34 \n     * @Desc: 清除当前所有激活节点，并会触发事件 \n     */\n    clearAllActive() {\n        if (this.activeNodeList.length <= 0) {\n            return\n        }\n        this.clearActive()\n        this.mindMap.emit('node_active', null, [])\n    }\n\n    /** \n     * @Author: 王林 \n     * @Date: 2021-07-11 10:54:00 \n     * @Desc:  添加节点到激活列表里\n     */\n    addActiveNode(node) {\n        let index = this.findActiveNodeIndex(node)\n        if (index === -1) {\n            this.activeNodeList.push(node)\n        }\n    }\n\n    /** \n     * @Author: 王林 \n     * @Date: 2021-07-10 10:04:04 \n     * @Desc: 在激活列表里移除某个节点 \n     */\n    removeActiveNode(node) {\n        let index = this.findActiveNodeIndex(node)\n        if (index === -1) {\n            return\n        }\n        this.activeNodeList.splice(index, 1)\n    }\n\n    /** \n     * @Author: 王林 \n     * @Date: 2021-07-11 10:55:23 \n     * @Desc: 检索某个节点在激活列表里的索引 \n     */\n    findActiveNodeIndex(node) {\n        return this.activeNodeList.findIndex((item) => {\n            return item === node\n        })\n    }\n\n    /** \n     * @Author: 王林 \n     * @Date: 2021-05-04 13:46:08 \n     * @Desc: 获取节点在同级里的索引位置 \n     */\n    getNodeIndex(node) {\n        return node.parent ? node.parent.children.findIndex((item) => {\n            return item === node\n        }) : 0\n    }\n\n    /** \n     * @Author: 王林 \n     * @Date: 2021-08-04 23:54:52 \n     * @Desc: 全选 \n     */\n    selectAll() {\n        walk(this.root, null, (node) => {\n            if (!node.nodeData.data.isActive) {\n                node.nodeData.data.isActive = true\n                this.addActiveNode(node)\n                setTimeout(() => {\n                    node.renderNode()\n                }, 0);\n            }\n        }, null, true, 0, 0)\n    }\n\n    /** \n     * @Author: 王林 \n     * @Date: 2021-07-11 22:34:12 \n     * @Desc: 回退 \n     */\n    back(step) {\n        this.clearAllActive()\n        let data = this.mindMap.command.back(step)\n        if (data) {\n            this.renderTree = data\n            this.mindMap.reRender()\n        }\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2021-07-12 10:44:51 \n     * @Desc: 前进 \n     */\n    forward(step) {\n        this.clearAllActive()\n        let data = this.mindMap.command.forward(step)\n        if (data) {\n            this.renderTree = data\n            this.mindMap.reRender()\n        }\n    }\n\n    /** \n     * @Author: 王林 \n     * @Date: 2021-05-04 13:19:54 \n     * @Desc: 插入同级节点，多个节点只会操作第一个节点\n     */\n    insertNode() {\n        if (this.activeNodeList.length <= 0) {\n            return\n        }\n        let first = this.activeNodeList[0]\n        if (first.isRoot) {\n            this.insertChildNode()\n        } else {\n            let text = first.layerIndex === 1 ? '二级节点' : '分支主题'\n            if (first.layerIndex === 1) {\n                first.parent.initRender = true\n            }\n            let index = this.getNodeIndex(first)\n            first.parent.nodeData.children.splice(index + 1, 0, {\n                \"inserting\": true,\n                \"data\": {\n                    \"text\": text,\n                    \"expand\": true\n                },\n                \"children\": []\n            })\n            this.mindMap.render()\n        }\n    }\n\n    /** \n     * @Author: 王林 \n     * @Date: 2021-05-04 13:31:02 \n     * @Desc: 插入子节点 \n     */\n    insertChildNode() {\n        if (this.activeNodeList.length <= 0) {\n            return\n        }\n        this.activeNodeList.forEach((node, index) => {\n            if (!node.nodeData.children) {\n                node.nodeData.children = []\n            }\n            let text = node.isRoot ? '二级节点' : '分支主题'\n            node.nodeData.children.push({\n                \"inserting\": true,\n                \"data\": {\n                    \"text\": text,\n                    \"expand\": true\n                },\n                \"children\": []\n            })\n            if (node.isRoot) {\n                node.initRender = true\n                // this.mindMap.batchExecution.push('renderNode' + index, () => {\n                //     node.renderNode()\n                // })\n            }\n        })\n        this.mindMap.render()\n    }\n\n    /** \n     * @Author: 王林 \n     * @Date: 2021-07-14 23:34:14 \n     * @Desc: 上移节点，多个节点只会操作第一个节点\n     */\n    upNode() {\n        if (this.activeNodeList.length <= 0) {\n            return\n        }\n        let node = this.activeNodeList[0]\n        if (node.isRoot) {\n            return\n        }\n        let parent = node.parent\n        let childList = parent.children\n        let index = childList.findIndex((item) => {\n            return item === node\n        })\n        if (index === -1 || index === 0) {\n            return\n        }\n        let insertIndex = index - 1\n        // 节点实例\n        childList.splice(index, 1)\n        childList.splice(insertIndex, 0, node)\n        // 节点数据\n        parent.nodeData.children.splice(index, 1)\n        parent.nodeData.children.splice(insertIndex, 0, node.nodeData)\n        this.mindMap.render()\n    }\n\n    /** \n     * @Author: 王林 \n     * @Date: 2021-07-14 23:34:18 \n     * @Desc: 下移节点，多个节点只会操作第一个节点 \n     */\n    downNode() {\n        if (this.activeNodeList.length <= 0) {\n            return\n        }\n        let node = this.activeNodeList[0]\n        if (node.isRoot) {\n            return\n        }\n        let parent = node.parent\n        let childList = parent.children\n        let index = childList.findIndex((item) => {\n            return item === node\n        })\n        if (index === -1 || index === childList.length - 1) {\n            return\n        }\n        let insertIndex = index + 1\n        // 节点实例\n        childList.splice(index, 1)\n        childList.splice(insertIndex, 0, node)\n        // 节点数据\n        parent.nodeData.children.splice(index, 1)\n        parent.nodeData.children.splice(insertIndex, 0, node.nodeData)\n        this.mindMap.render()\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2021-11-25 10:51:34 \n     * @Desc: 将节点移动到另一个节点的前面\n     */\n    insertBefore(node, exist) {\n        if (node.isRoot) {\n            return\n        }\n        let parent = node.parent\n        let childList = parent.children\n        // 要移动节点的索引\n        let index = childList.findIndex((item) => {\n            return item === node\n        })\n        if (index === -1) {\n            return\n        }\n        // 目标节点的索引\n        let existIndex = childList.findIndex((item) => {\n            return item === exist\n        })\n        if (existIndex === -1) {\n            return\n        }\n        // 当前节点在目标节点前面\n        if (index < existIndex) {\n            existIndex = existIndex - 1\n        } else {\n            existIndex = existIndex\n        }\n        // 节点实例\n        childList.splice(index, 1)\n        childList.splice(existIndex, 0, node)\n        // 节点数据\n        parent.nodeData.children.splice(index, 1)\n        parent.nodeData.children.splice(existIndex, 0, node.nodeData)\n        this.mindMap.render()\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2021-11-25 10:51:34 \n     * @Desc: 将节点移动到另一个节点的后面\n     */\n    insertAfter(node, exist) {\n        if (node.isRoot) {\n            return\n        }\n        let parent = node.parent\n        let childList = parent.children\n        // 要移动节点的索引\n        let index = childList.findIndex((item) => {\n            return item === node\n        })\n        if (index === -1) {\n            return\n        }\n        // 目标节点的索引\n        let existIndex = childList.findIndex((item) => {\n            return item === exist\n        })\n        if (existIndex === -1) {\n            return\n        }\n        // 当前节点在目标节点前面\n        if (index < existIndex) {\n            existIndex = existIndex\n        } else {\n            existIndex = existIndex + 1\n        }\n        // 节点实例\n        childList.splice(index, 1)\n        childList.splice(existIndex, 0, node)\n        // 节点数据\n        parent.nodeData.children.splice(index, 1)\n        parent.nodeData.children.splice(existIndex, 0, node.nodeData)\n        this.mindMap.render()\n    }\n\n    /** \n     * @Author: 王林 \n     * @Date: 2021-05-04 13:40:39 \n     * @Desc: 移除节点 \n     */\n    removeNode() {\n        if (this.activeNodeList.length <= 0) {\n            return\n        }\n        for (let i = 0; i < this.activeNodeList.length; i++) {\n            let node = this.activeNodeList[i]\n            if (node.isGeneralization) {\n                // 删除概要节点\n                this.setNodeData(node.generalizationBelongNode, {\n                    generalization: null\n                })\n                node.generalizationBelongNode.update()\n                this.removeActiveNode(node)\n                i--\n            } else if (node.isRoot) {\n                node.children.forEach((child) => {\n                    child.remove()\n                })\n                node.children = []\n                node.nodeData.children = []\n                break\n            } else {\n                this.removeActiveNode(node)\n                this.removeOneNode(node)\n                i--\n            }\n        }\n        this.mindMap.emit('node_active', null, [])\n        this.mindMap.render()\n    }\n\n    /** \n     * @Author: 王林 \n     * @Date: 2021-07-15 22:46:27 \n     * @Desc: 移除某个指定节点 \n     */\n    removeOneNode(node) {\n        let index = this.getNodeIndex(node)\n        node.remove()\n        node.parent.children.splice(index, 1)\n        node.parent.nodeData.children.splice(index, 1)\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2021-07-15 09:53:23 \n     * @Desc: 复制节点，多个节点只会操作第一个节点 \n     */\n    copyNode() {\n        if (this.activeNodeList.length <= 0) {\n            return\n        }\n        return copyNodeTree({}, this.activeNodeList[0])\n    }\n\n    /** \n     * @Author: 王林 \n     * @Date: 2021-07-15 22:36:45 \n     * @Desc: 剪切节点，多个节点只会操作第一个节点\n     */\n    cutNode(callback) {\n        if (this.activeNodeList.length <= 0) {\n            return\n        }\n        let node = this.activeNodeList[0]\n        if (node.isRoot) {\n            return null\n        }\n        let copyData = copyNodeTree({}, node)\n        this.removeActiveNode(node)\n        this.removeOneNode(node)\n        this.mindMap.emit('node_active', null, this.activeNodeList)\n        this.mindMap.render()\n        if (callback && typeof callback === 'function') {\n            callback(copyData)\n        }\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2021-11-24 16:54:01 \n     * @Desc: 移动一个节点作为另一个节点的子节点 \n     */\n    moveNodeTo(node, toNode) {\n        if (node.isRoot) {\n            return\n        }\n        let copyData = copyNodeTree({}, node)\n        this.removeActiveNode(node)\n        this.removeOneNode(node)\n        this.mindMap.emit('node_active', null, this.activeNodeList)\n        toNode.nodeData.children.push(copyData)\n        this.mindMap.render()\n    }\n\n    /** \n     * @Author: 王林 \n     * @Date: 2021-07-15 20:09:39 \n     * @Desc:  粘贴节点到节点\n     */\n    pasteNode(data) {\n        if (this.activeNodeList.length <= 0) {\n            return\n        }\n        this.activeNodeList.forEach((item) => {\n            item.nodeData.children.push(simpleDeepClone(data))\n        })\n        this.mindMap.render()\n    }\n\n    /** \n     * @Author: 王林 \n     * @Date: 2021-07-08 21:54:30 \n     * @Desc: 设置节点样式 \n     */\n    setNodeStyle(node, prop, value, isActive) {\n        let data = {}\n        if (isActive) {\n            data = {\n                activeStyle: {\n                    ...(node.nodeData.data.activeStyle || {}),\n                    [prop]: value\n                }\n            }\n        } else {\n            data = {\n                [prop]: value\n            }\n        }\n        this.setNodeDataRender(node, data)\n        // 更新了连线的样式\n        if (lineStyleProps.includes(prop)) {\n            (node.parent || node).renderLine(true)\n        }\n    }\n\n    /** \n     * @Author: 王林 \n     * @Date: 2021-07-08 22:13:03 \n     * @Desc: 设置节点是否激活 \n     */\n    setNodeActive(node, active) {\n        this.setNodeData(node, {\n            isActive: active\n        })\n        node.renderNode()\n    }\n\n    /** \n     * @Author: 王林 \n     * @Date: 2021-07-10 16:52:41 \n     * @Desc: 设置节点是否展开 \n     */\n    setNodeExpand(node, expand) {\n        this.setNodeData(node, {\n            expand\n        })\n        if (expand) { // 展开\n            node.children.forEach((item) => {\n                item.render()\n            })\n            node.renderLine()\n            node.updateExpandBtnNode()\n        } else { // 收缩\n            node.children.forEach((item) => {\n                item.remove()\n            })\n            node.removeLine()\n            node.updateExpandBtnNode()\n        }\n        this.mindMap.render()\n    }\n\n    /** \n     * @Author: 王林 \n     * @Date: 2021-07-15 23:23:37 \n     * @Desc: 展开所有 \n     */\n    expandAllNode() {\n        walk(this.renderTree, null, (node) => {\n            if (!node.data.expand) {\n                node.data.expand = true\n            }\n        }, null, true, 0, 0)\n        this.mindMap.reRender()\n    }\n\n    /** \n     * @Author: 王林 \n     * @Date: 2021-07-15 23:27:14 \n     * @Desc: 收起所有 \n     */\n    unexpandAllNode() {\n        walk(this.renderTree, null, (node, parent, isRoot) => {\n            node._node = null\n            if (!isRoot) {\n                node.data.expand = false\n            }\n        }, null, true, 0, 0)\n        this.mindMap.reRender()\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2022-09-23 16:31:27 \n     * @Desc: 展开到指定层级 \n     */\n    expandToLevel(level) {\n        walk(this.renderTree, null, (node, parent, isRoot, layerIndex) => {\n            node._node = null\n            node.data.expand = layerIndex < level\n        }, null, true, 0, 0)\n        this.mindMap.reRender()\n    }\n\n    /** \n     * @Author: 王林 \n     * @Date: 2022-08-14 09:18:40 \n     * @Desc: 切换激活节点的展开状态 \n     */\n    toggleActiveExpand() {\n        this.activeNodeList.forEach((node) => {\n            if (node.nodeData.children.length <= 0) {\n                return\n            }\n            this.toggleNodeExpand(node)\n        })\n    }\n\n    /** \n     * @Author: 王林 \n     * @Date: 2021-07-11 17:15:33 \n     * @Desc: 切换节点展开状态 \n     */\n    toggleNodeExpand(node) {\n        this.mindMap.execCommand('SET_NODE_EXPAND', node, !node.nodeData.data.expand)\n    }\n\n    /** \n     * @Author: 王林 \n     * @Date: 2021-07-09 22:04:19 \n     * @Desc: 设置节点文本 \n     */\n    setNodeText(node, text) {\n        this.setNodeDataRender(node, {\n            text\n        })\n    }\n\n    /** \n     * @Author: 王林 \n     * @Date: 2021-07-10 08:37:40 \n     * @Desc: 设置节点图片 \n     */\n    setNodeImage(node, {\n        url,\n        title,\n        width,\n        height\n    }) {\n        this.setNodeDataRender(node, {\n            image: url,\n            imageTitle: title || '',\n            imageSize: {\n                width,\n                height,\n            },\n        })\n    }\n\n    /** \n     * @Author: 王林 \n     * @Date: 2021-07-10 08:44:06 \n     * @Desc: 设置节点图标 \n     */\n    setNodeIcon(node, icons) {\n        this.setNodeDataRender(node, {\n            icon: icons\n        })\n    }\n\n    /** \n     * @Author: 王林 \n     * @Date: 2021-07-10 08:49:33 \n     * @Desc: 设置节点超链接 \n     */\n    setNodeHyperlink(node, link, title = '') {\n        this.setNodeDataRender(node, {\n            hyperlink: link,\n            hyperlinkTitle: title,\n        })\n    }\n\n    /** \n     * @Author: 王林 \n     * @Date: 2021-07-10 08:52:59 \n     * @Desc: 设置节点备注 \n     */\n    setNodeNote(node, note) {\n        this.setNodeDataRender(node, {\n            note\n        })\n    }\n\n    /** \n     * @Author: 王林 \n     * @Date: 2021-07-10 08:54:53 \n     * @Desc: 设置节点标签 \n     */\n    setNodeTag(node, tag) {\n        this.setNodeDataRender(node, {\n            tag\n        })\n    }\n\n    /** \n     * @Author: 王林 \n     * @Date: 2022-07-30 20:52:42 \n     * @Desc: 添加节点概要\n     */\n    addGeneralization(data) {\n        if (this.activeNodeList.length <= 0) {\n            return\n        }\n        this.activeNodeList.forEach((node) => {\n            if (node.nodeData.data.generalization || node.isRoot) {\n                return\n            }\n            this.setNodeData(node, {\n                generalization: data || {\n                    text: '概要'\n                }\n            })\n            node.update()\n        })\n        this.mindMap.render()\n    }\n\n    /** \n     * @Author: 王林 \n     * @Date: 2022-07-30 21:16:33 \n     * @Desc: 删除节点概要\n     */\n    removeGeneralization() {\n        if (this.activeNodeList.length <= 0) {\n            return\n        }\n        this.activeNodeList.forEach((node) => {\n            if (!node.nodeData.data.generalization) {\n                return\n            }\n            this.setNodeData(node, {\n                generalization: null\n            })\n            node.update()\n        })\n        this.mindMap.render()\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2022-08-02 19:04:24 \n     * @Desc: 设置节点自定义位置 \n     */\n    setNodeCustomPosition(node, left = undefined, top = undefined) {\n        let nodeList = [node] || this.activeNodeList\n        nodeList.forEach((item) => {\n            this.setNodeData(item, {\n                customLeft: left,\n                customTop: top\n            })\n        })\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2022-08-02 20:02:50 \n     * @Desc: 一键整理布局，即去除自定义位置 \n     */\n    resetLayout() {\n        walk(this.root, null, (node) => {\n            node.customLeft = undefined\n            node.customTop = undefined\n            this.setNodeData(node, {\n                customLeft: undefined,\n                customTop: undefined\n            })\n            this.mindMap.render()\n        }, null, true, 0, 0)\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林 \n     * @Date: 2022-09-12 21:44:01 \n     * @Desc: 设置节点形状 \n     */\n    setNodeShape(node, shape) {\n        if (!shape || !shapeList.includes(shape)) {\n            return\n        }\n        let nodeList = [node] || this.activeNodeList\n        nodeList.forEach((item) => {\n            this.setNodeStyle(item, 'shape', shape)\n        })\n    }\n\n    /** \n     * @Author: 王林 \n     * @Date: 2021-05-04 14:19:48 \n     * @Desc: 更新节点数据 \n     */\n    setNodeData(node, data) {\n        Object.keys(data).forEach((key) => {\n            node.nodeData.data[key] = data[key]\n        })\n    }\n\n    /** \n     * @Author: 王林 \n     * @Date: 2021-07-10 08:45:48 \n     * @Desc: 设置节点数据，并判断是否渲染 \n     */\n    setNodeDataRender(node, data) {\n        this.setNodeData(node, data)\n        let changed = node.getSize()\n        node.renderNode()\n        if (changed) {\n            if (node.isGeneralization) {\n                // 概要节点\n                node.generalizationBelongNode.updateGeneralization()\n            }\n            this.mindMap.render()\n        }\n    }\n}\n\nexport default Render"],"mappings":"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"},"metadata":{},"sourceType":"module"}