{"ast":null,"code":"import axios from 'axios';\nimport router from \"../router\";\nconst request = axios.create({\n  baseURL: \"/\",\n  timeout: 5000\n}); // request 拦截器\n// 可以自请求发送前对请求做一些处理\n// // 比如统一加token，对请求参数统一加密\n// request.interceptors.request.use(config => {\n//     config.headers['Content-Type'] = 'application/json;charset=utf-8';\n//\n//     // config.headers['token'] = user.token;  // 设置请求头\n//     //取出sessionStorage里面缓存的用户信息\n//     const userJson = sessionStorage.getItem(\"user\")\n//     if (!userJson) {\n//         router.push(\"/login\")\n//     }\n//\n//     return config\n// }, error => {\n//     return Promise.reject(error)\n// });\n// response 拦截器\n// 可以在接口响应后统一处理结果\n\nrequest.interceptors.response.use(response => {\n  let res = response.data; // 如果是返回的文件\n\n  if (response.config.responseType === 'blob') {\n    return res;\n  } // 兼容服务端返回的字符串数据\n\n\n  if (typeof res === 'string') {\n    res = res ? JSON.parse(res) : res;\n  }\n\n  return res;\n}, error => {\n  console.log('err' + error); // for debug\n\n  return Promise.reject(error);\n});\nexport default request;","map":{"version":3,"names":["axios","router","request","create","baseURL","timeout","interceptors","response","use","res","data","config","responseType","JSON","parse","error","console","log","Promise","reject"],"sources":["C:/Users/13007/Documents/GinTest/vue/src/utils/request.js"],"sourcesContent":["import axios from 'axios'\nimport router from \"../router\";\n\nconst request = axios.create({\n    baseURL: \"/\",\n    timeout: 5000\n})\n\n// request 拦截器\n// 可以自请求发送前对请求做一些处理\n// // 比如统一加token，对请求参数统一加密\n// request.interceptors.request.use(config => {\n//     config.headers['Content-Type'] = 'application/json;charset=utf-8';\n//\n//     // config.headers['token'] = user.token;  // 设置请求头\n//     //取出sessionStorage里面缓存的用户信息\n//     const userJson = sessionStorage.getItem(\"user\")\n//     if (!userJson) {\n//         router.push(\"/login\")\n//     }\n//\n//     return config\n// }, error => {\n//     return Promise.reject(error)\n// });\n\n// response 拦截器\n// 可以在接口响应后统一处理结果\nrequest.interceptors.response.use(\n    response => {\n        let res = response.data;\n        // 如果是返回的文件\n        if (response.config.responseType === 'blob') {\n            return res\n        }\n        // 兼容服务端返回的字符串数据\n        if (typeof res === 'string') {\n            res = res ? JSON.parse(res) : res\n        }\n        return res;\n    },\n    error => {\n        console.log('err' + error) // for debug\n        return Promise.reject(error)\n    }\n)\n\n\nexport default request\n\n"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AAEA,MAAMC,OAAO,GAAGF,KAAK,CAACG,MAAN,CAAa;EACzBC,OAAO,EAAE,GADgB;EAEzBC,OAAO,EAAE;AAFgB,CAAb,CAAhB,C,CAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AACAH,OAAO,CAACI,YAAR,CAAqBC,QAArB,CAA8BC,GAA9B,CACID,QAAQ,IAAI;EACR,IAAIE,GAAG,GAAGF,QAAQ,CAACG,IAAnB,CADQ,CAER;;EACA,IAAIH,QAAQ,CAACI,MAAT,CAAgBC,YAAhB,KAAiC,MAArC,EAA6C;IACzC,OAAOH,GAAP;EACH,CALO,CAMR;;;EACA,IAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;IACzBA,GAAG,GAAGA,GAAG,GAAGI,IAAI,CAACC,KAAL,CAAWL,GAAX,CAAH,GAAqBA,GAA9B;EACH;;EACD,OAAOA,GAAP;AACH,CAZL,EAaIM,KAAK,IAAI;EACLC,OAAO,CAACC,GAAR,CAAY,QAAQF,KAApB,EADK,CACsB;;EAC3B,OAAOG,OAAO,CAACC,MAAR,CAAeJ,KAAf,CAAP;AACH,CAhBL;AAoBA,eAAeb,OAAf"},"metadata":{},"sourceType":"module"}