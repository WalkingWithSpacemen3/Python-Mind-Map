{"ast":null,"code":"import Base from './Base';\nimport { walk, asyncRun } from '../utils';\n/** \n * @Author: 王林 \n * @Date: 2021-04-12 22:25:58 \n * @Desc: 目录组织图 \n */\n\nclass CatalogOrganization extends Base {\n  /** \n   * @Author: 王林 \n   * @Date: 2021-04-12 22:26:31 \n   * @Desc: 构造函数 \n   */\n  constructor(opt = {}) {\n    super(opt);\n  }\n  /** \n   * javascript comment \n   * @Author: 王林25 \n   * @Date: 2021-04-06 14:04:20 \n   * @Desc: 布局\n   */\n\n\n  doLayout(callback) {\n    let task = [() => {\n      this.computedBaseValue();\n    }, () => {\n      this.computedLeftTopValue();\n    }, () => {\n      this.adjustLeftTopValue();\n    }, () => {\n      callback(this.root);\n    }];\n    asyncRun(task);\n  }\n  /** \n   * javascript comment \n   * @Author: 王林25 \n   * @Date: 2021-04-08 09:49:32 \n   * @Desc: 遍历数据计算节点的left、width、height\n   */\n\n\n  computedBaseValue() {\n    walk(this.renderer.renderTree, null, (cur, parent, isRoot, layerIndex) => {\n      let newNode = this.createNode(cur, parent, isRoot, layerIndex); // 根节点定位在画布中心位置\n\n      if (isRoot) {\n        this.setNodeCenter(newNode);\n      } else {\n        // 非根节点\n        if (parent._node.isRoot) {\n          newNode.top = parent._node.top + parent._node.height + this.getMarginX(layerIndex);\n        }\n      }\n\n      if (!cur.data.expand) {\n        return true;\n      }\n    }, (cur, parent, isRoot, layerIndex) => {\n      if (isRoot) {\n        let len = cur.data.expand === false ? 0 : cur._node.children.length;\n        cur._node.childrenAreaWidth = len ? cur._node.children.reduce((h, item) => {\n          return h + item.width;\n        }, 0) + (len + 1) * this.getMarginX(layerIndex + 1) : 0;\n      }\n    }, true, 0);\n  }\n  /** \n   * javascript comment \n   * @Author: 王林25 \n   * @Date: 2021-04-08 09:59:25 \n   * @Desc: 遍历节点树计算节点的left、top\n   */\n\n\n  computedLeftTopValue() {\n    walk(this.root, null, (node, parent, isRoot, layerIndex) => {\n      if (node.nodeData.data.expand && node.children && node.children.length) {\n        let marginX = this.getMarginX(layerIndex + 1);\n        let marginY = this.getMarginY(layerIndex + 1);\n\n        if (isRoot) {\n          let left = node.left + node.width / 2 - node.childrenAreaWidth / 2;\n          let totalLeft = left + marginX;\n          node.children.forEach(cur => {\n            cur.left = totalLeft;\n            totalLeft += cur.width + marginX;\n          });\n        } else {\n          let totalTop = node.top + node.height + marginY + node.expandBtnSize;\n          node.children.forEach(cur => {\n            cur.left = node.left + node.width * 0.5;\n            cur.top = totalTop;\n            totalTop += cur.height + marginY + node.expandBtnSize;\n          });\n        }\n      }\n    }, null, true);\n  }\n  /** \n   * javascript comment \n   * @Author: 王林25 \n   * @Date: 2021-04-08 10:04:05 \n   * @Desc: 调整节点left、top\n   */\n\n\n  adjustLeftTopValue() {\n    walk(this.root, null, (node, parent, isRoot, layerIndex) => {\n      if (!node.nodeData.data.expand) {\n        return;\n      } // 调整left\n\n\n      if (parent && parent.isRoot) {\n        let areaWidth = this.getNodeAreaWidth(node);\n        let difference = areaWidth - node.width;\n\n        if (difference > 0) {\n          this.updateBrothersLeft(node, difference / 2);\n        }\n      } // 调整top\n\n\n      let len = node.children.length;\n\n      if (parent && !parent.isRoot && len > 0) {\n        let marginY = this.getMarginY(layerIndex + 1);\n        let totalHeight = node.children.reduce((h, item) => {\n          return h + item.height;\n        }, 0) + (len + 1) * marginY + len * node.expandBtnSize;\n        this.updateBrothersTop(node, totalHeight);\n      }\n    }, null, true);\n  }\n  /** \n   * javascript comment \n   * @Author: 王林25 \n   * @Date: 2021-04-12 18:55:03 \n   * @Desc: 递归计算节点的宽度\n   */\n\n\n  getNodeAreaWidth(node) {\n    let widthArr = [];\n\n    let loop = (node, width) => {\n      if (node.children.length) {\n        width += node.width / 2;\n        node.children.forEach(item => {\n          loop(item, width);\n        });\n      } else {\n        width += node.width;\n        widthArr.push(width);\n      }\n    };\n\n    loop(node, 0);\n    return Math.max(...widthArr);\n  }\n  /** \n   * javascript comment \n   * @Author: 王林25 \n   * @Date: 2021-07-13 11:12:51 \n   * @Desc: 调整兄弟节点的left \n   */\n\n\n  updateBrothersLeft(node, addWidth) {\n    if (node.parent) {\n      let childrenList = node.parent.children;\n      let index = childrenList.findIndex(item => {\n        return item === node;\n      }); // 存在大于一个节点时，第一个或最后一个节点自身也需要移动，否则两边不对称\n\n      if ((index === 0 || index === childrenList.length - 1) && childrenList.length > 1) {\n        let _offset = index === 0 ? -addWidth : addWidth;\n\n        node.left += _offset;\n\n        if (node.children && node.children.length && !node.hasCustomPosition()) {\n          this.updateChildren(node.children, 'left', _offset);\n        }\n      }\n\n      childrenList.forEach((item, _index) => {\n        if (item.hasCustomPosition()) {\n          // 适配自定义位置\n          return;\n        }\n\n        let _offset = 0;\n\n        if (_index < index) {\n          // 左边的节点往左移\n          _offset = -addWidth;\n        } else if (_index > index) {\n          // 右边的节点往右移\n          _offset = addWidth;\n        }\n\n        item.left += _offset; // 同步更新子节点的位置\n\n        if (item.children && item.children.length) {\n          this.updateChildren(item.children, 'left', _offset);\n        }\n      }); // 更新父节点的位置\n\n      this.updateBrothersLeft(node.parent, addWidth);\n    }\n  }\n  /** \n   * javascript comment \n   * @Author: 王林25 \n   * @Date: 2021-04-07 14:26:03 \n   * @Desc: 调整兄弟节点的top\n   */\n\n\n  updateBrothersTop(node, addHeight) {\n    if (node.parent && !node.parent.isRoot) {\n      let childrenList = node.parent.children;\n      let index = childrenList.findIndex(item => {\n        return item === node;\n      });\n      childrenList.forEach((item, _index) => {\n        if (item.hasCustomPosition()) {\n          // 适配自定义位置\n          return;\n        }\n\n        let _offset = 0; // 下面的节点往下移\n\n        if (_index > index) {\n          _offset = addHeight;\n        }\n\n        item.top += _offset; // 同步更新子节点的位置\n\n        if (item.children && item.children.length) {\n          this.updateChildren(item.children, 'top', _offset);\n        }\n      }); // 更新父节点的位置\n\n      this.updateBrothersTop(node.parent, addHeight);\n    }\n  }\n  /** \n   * @Author: 王林 \n   * @Date: 2021-04-11 14:42:48 \n   * @Desc: 绘制连线，连接该节点到其子节点\n   */\n\n\n  renderLine(node, lines) {\n    if (node.children.length <= 0) {\n      return [];\n    }\n\n    let {\n      left,\n      top,\n      width,\n      height,\n      expandBtnSize\n    } = node;\n    let len = node.children.length;\n    let marginX = this.getMarginX(node.layerIndex + 1);\n\n    if (node.isRoot) {\n      // 根节点\n      let x1 = left + width / 2;\n      let y1 = top + height;\n      let s1 = marginX * 0.7;\n      let minx = Infinity;\n      let maxx = -Infinity;\n      node.children.forEach((item, index) => {\n        let x2 = item.left + item.width / 2;\n        let y2 = item.top;\n\n        if (x2 < minx) {\n          minx = x2;\n        }\n\n        if (x2 > maxx) {\n          maxx = x2;\n        }\n\n        let path = `M ${x2},${y1 + s1} L ${x2},${y1 + s1 > y2 ? y2 + item.height : y2}`; // 竖线\n\n        lines[index].plot(path);\n      });\n      minx = Math.min(minx, x1);\n      maxx = Math.max(maxx, x1); // 父节点的竖线\n\n      let line1 = this.draw.path();\n      node.style.line(line1);\n      line1.plot(`M ${x1},${y1} L ${x1},${y1 + s1}`);\n\n      node._lines.push(line1); // 水平线\n\n\n      if (len > 0) {\n        let lin2 = this.draw.path();\n        node.style.line(lin2);\n        lin2.plot(`M ${minx},${y1 + s1} L ${maxx},${y1 + s1}`);\n\n        node._lines.push(lin2);\n      }\n    } else {\n      // 非根节点\n      let y1 = top + height;\n      let maxy = -Infinity;\n      let x2 = node.left + node.width * 0.3;\n      node.children.forEach((item, index) => {\n        // 为了适配自定义位置，下面做了各种位置的兼容\n        let y2 = item.top + item.height / 2;\n\n        if (y2 > maxy) {\n          maxy = y2;\n        } // 水平线\n\n\n        let path = '';\n        let _left = item.left;\n\n        let _isLeft = item.left + item.width < x2;\n\n        let _isXCenter = false;\n\n        if (_isLeft) {\n          // 水平位置在父节点左边\n          _left = item.left + item.width;\n        } else if (item.left < x2 && item.left + item.width > x2) {\n          // 水平位置在父节点之间\n          _isXCenter = true;\n          y2 = item.top;\n          maxy = y2;\n        }\n\n        if (y2 > top && y2 < y1) {\n          // 自定义位置的情况：垂直位置节点在父节点之间\n          path = `M ${_isLeft ? node.left : node.left + node.width},${y2} L ${_left},${y2}`;\n        } else if (y2 < y1) {\n          // 自定义位置的情况：垂直位置节点在父节点上面\n          if (_isXCenter) {\n            y2 = item.top + item.height;\n            _left = x2;\n          }\n\n          path = `M ${x2},${top} L ${x2},${y2} L ${_left},${y2}`;\n        } else {\n          if (_isXCenter) {\n            _left = x2;\n          }\n\n          path = `M ${x2},${y2} L ${_left},${y2}`;\n        }\n\n        lines[index].plot(path);\n      }); // 竖线\n\n      if (len > 0) {\n        let lin2 = this.draw.path();\n        expandBtnSize = len > 0 ? expandBtnSize : 0;\n        node.style.line(lin2);\n\n        if (maxy < y1 + expandBtnSize) {\n          lin2.hide();\n        } else {\n          lin2.plot(`M ${x2},${y1 + expandBtnSize} L ${x2},${maxy}`);\n          lin2.show();\n        }\n\n        node._lines.push(lin2);\n      }\n    }\n  }\n  /** \n   * @Author: 王林 \n   * @Date: 2021-04-11 19:54:26 \n   * @Desc: 渲染按钮 \n   */\n\n\n  renderExpandBtn(node, btn) {\n    let {\n      width,\n      height,\n      expandBtnSize,\n      isRoot\n    } = node;\n\n    if (!isRoot) {\n      let {\n        translateX,\n        translateY\n      } = btn.transform();\n      btn.translate(width * 0.3 - expandBtnSize / 2 - translateX, height + expandBtnSize / 2 - translateY);\n    }\n  }\n  /** \n   * @Author: 王林 \n   * @Date: 2022-07-30 08:30:35 \n   * @Desc: 创建概要节点 \n   */\n\n\n  renderGeneralization(node, gLine, gNode) {\n    let {\n      top,\n      bottom,\n      right,\n      generalizationLineMargin,\n      generalizationNodeMargin\n    } = this.getNodeBoundaries(node, 'h');\n    let x1 = right + generalizationLineMargin;\n    let y1 = top;\n    let x2 = right + generalizationLineMargin;\n    let y2 = bottom;\n    let cx = x1 + 20;\n    let cy = y1 + (y2 - y1) / 2;\n    let path = `M ${x1},${y1} Q ${cx},${cy} ${x2},${y2}`;\n    gLine.plot(path);\n    gNode.left = right + generalizationNodeMargin;\n    gNode.top = top + (bottom - top - gNode.height) / 2;\n  }\n\n}\n\nexport default CatalogOrganization;","map":{"version":3,"names":["Base","walk","asyncRun","CatalogOrganization","constructor","opt","doLayout","callback","task","computedBaseValue","computedLeftTopValue","adjustLeftTopValue","root","renderer","renderTree","cur","parent","isRoot","layerIndex","newNode","createNode","setNodeCenter","_node","top","height","getMarginX","data","expand","len","children","length","childrenAreaWidth","reduce","h","item","width","node","nodeData","marginX","marginY","getMarginY","left","totalLeft","forEach","totalTop","expandBtnSize","areaWidth","getNodeAreaWidth","difference","updateBrothersLeft","totalHeight","updateBrothersTop","widthArr","loop","push","Math","max","addWidth","childrenList","index","findIndex","_offset","hasCustomPosition","updateChildren","_index","addHeight","renderLine","lines","x1","y1","s1","minx","Infinity","maxx","x2","y2","path","plot","min","line1","draw","style","line","_lines","lin2","maxy","_left","_isLeft","_isXCenter","hide","show","renderExpandBtn","btn","translateX","translateY","transform","translate","renderGeneralization","gLine","gNode","bottom","right","generalizationLineMargin","generalizationNodeMargin","getNodeBoundaries","cx","cy"],"sources":["C:/Users/13007/Documents/mindmap/node_modules/simple-mind-map/src/layouts/CatalogOrganization.js"],"sourcesContent":["import Base from './Base';\nimport {\n    walk,\n    asyncRun\n} from '../utils'\n\n/** \n * @Author: 王林 \n * @Date: 2021-04-12 22:25:58 \n * @Desc: 目录组织图 \n */\nclass CatalogOrganization extends Base {\n    /** \n     * @Author: 王林 \n     * @Date: 2021-04-12 22:26:31 \n     * @Desc: 构造函数 \n     */\n    constructor(opt = {}) {\n        super(opt)\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2021-04-06 14:04:20 \n     * @Desc: 布局\n     */\n    doLayout(callback) {\n        let task = [() => {\n            this.computedBaseValue()\n        }, () => {\n            this.computedLeftTopValue()\n        }, () => {\n            this.adjustLeftTopValue()\n        }, () => {\n            callback(this.root)\n        }]\n        asyncRun(task)\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2021-04-08 09:49:32 \n     * @Desc: 遍历数据计算节点的left、width、height\n     */\n    computedBaseValue() {\n        walk(this.renderer.renderTree, null, (cur, parent, isRoot, layerIndex) => {\n            let newNode = this.createNode(cur, parent, isRoot, layerIndex)\n            // 根节点定位在画布中心位置\n            if (isRoot) {\n                this.setNodeCenter(newNode)\n            } else {\n                // 非根节点\n                if (parent._node.isRoot) {\n                    newNode.top = parent._node.top + parent._node.height + this.getMarginX(layerIndex)\n                }\n            }\n            if (!cur.data.expand) {\n                return true;\n            }\n        }, (cur, parent, isRoot, layerIndex) => {\n            if (isRoot) {\n                let len = cur.data.expand === false ? 0 : cur._node.children.length\n                cur._node.childrenAreaWidth = len ? cur._node.children.reduce((h, item) => {\n                    return h + item.width\n                }, 0) + (len + 1) * this.getMarginX(layerIndex + 1) : 0\n            }\n        }, true, 0)\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2021-04-08 09:59:25 \n     * @Desc: 遍历节点树计算节点的left、top\n     */\n    computedLeftTopValue() {\n        walk(this.root, null, (node, parent, isRoot, layerIndex) => {\n            if (node.nodeData.data.expand && node.children && node.children.length) {\n                let marginX = this.getMarginX(layerIndex + 1)\n                let marginY = this.getMarginY(layerIndex + 1)\n                if (isRoot) {\n                    let left = node.left + node.width / 2 - node.childrenAreaWidth / 2\n                    let totalLeft = left + marginX\n                    node.children.forEach((cur) => {\n                        cur.left = totalLeft\n                        totalLeft += cur.width + marginX\n                    })\n                } else {\n                    let totalTop = node.top + node.height + marginY + node.expandBtnSize\n                    node.children.forEach((cur) => {\n                        cur.left = node.left + node.width * 0.5\n                        cur.top = totalTop\n                        totalTop += cur.height + marginY + node.expandBtnSize\n                    })\n                }\n            }\n        }, null, true)\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2021-04-08 10:04:05 \n     * @Desc: 调整节点left、top\n     */\n    adjustLeftTopValue() {\n        walk(this.root, null, (node, parent, isRoot, layerIndex) => {\n            if (!node.nodeData.data.expand) {\n                return;\n            }\n            // 调整left\n            if (parent && parent.isRoot) {\n                let areaWidth = this.getNodeAreaWidth(node)\n                let difference = areaWidth - node.width\n                if (difference > 0) {\n                    this.updateBrothersLeft(node, difference / 2)\n                }\n            }\n            // 调整top\n            let len = node.children.length\n            if (parent && !parent.isRoot && len > 0) {\n                let marginY = this.getMarginY(layerIndex + 1)\n                let totalHeight = node.children.reduce((h, item) => {\n                    return h + item.height\n                }, 0) + (len + 1) * marginY + len * node.expandBtnSize\n                this.updateBrothersTop(node, totalHeight)\n            }\n        }, null, true)\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2021-04-12 18:55:03 \n     * @Desc: 递归计算节点的宽度\n     */\n    getNodeAreaWidth(node) {\n        let widthArr = []\n        let loop = (node, width) => {\n            if (node.children.length) {\n                width += node.width / 2\n                node.children.forEach((item) => {\n                    loop(item, width)\n                })\n            } else {\n                width += node.width\n                widthArr.push(width)\n            }\n        }\n        loop(node, 0)\n        return Math.max(...widthArr)\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2021-07-13 11:12:51 \n     * @Desc: 调整兄弟节点的left \n     */\n    updateBrothersLeft(node, addWidth) {\n        if (node.parent) {\n            let childrenList = node.parent.children\n            let index = childrenList.findIndex((item) => {\n                return item === node\n            })\n            // 存在大于一个节点时，第一个或最后一个节点自身也需要移动，否则两边不对称\n            if ((index === 0 || index === childrenList.length - 1) && childrenList.length > 1) {\n                let _offset = index === 0 ? -addWidth : addWidth\n                node.left += _offset\n                if (node.children && node.children.length && !node.hasCustomPosition()) {\n                    this.updateChildren(node.children, 'left', _offset)\n                }\n            }\n            childrenList.forEach((item, _index) => {\n                if (item.hasCustomPosition()) {// 适配自定义位置\n                    return\n                }\n                let _offset = 0\n                if (_index < index) { // 左边的节点往左移\n                    _offset = -addWidth\n                } else if (_index > index) { // 右边的节点往右移\n                    _offset = addWidth\n                }\n                item.left += _offset\n                // 同步更新子节点的位置\n                if (item.children && item.children.length) {\n                    this.updateChildren(item.children, 'left', _offset)\n                }\n            })\n            // 更新父节点的位置\n            this.updateBrothersLeft(node.parent, addWidth)\n        }\n    }\n\n    /** \n     * javascript comment \n     * @Author: 王林25 \n     * @Date: 2021-04-07 14:26:03 \n     * @Desc: 调整兄弟节点的top\n     */\n    updateBrothersTop(node, addHeight) {\n        if (node.parent && !node.parent.isRoot) {\n            let childrenList = node.parent.children\n            let index = childrenList.findIndex((item) => {\n                return item === node\n            })\n            childrenList.forEach((item, _index) => {\n                if (item.hasCustomPosition()) {// 适配自定义位置\n                    return\n                }\n                let _offset = 0\n                // 下面的节点往下移\n                if (_index > index) {\n                    _offset = addHeight\n                }\n                item.top += _offset\n                // 同步更新子节点的位置\n                if (item.children && item.children.length) {\n                    this.updateChildren(item.children, 'top', _offset)\n                }\n            })\n            // 更新父节点的位置\n            this.updateBrothersTop(node.parent, addHeight)\n        }\n    }\n\n    /** \n     * @Author: 王林 \n     * @Date: 2021-04-11 14:42:48 \n     * @Desc: 绘制连线，连接该节点到其子节点\n     */\n    renderLine(node, lines) {\n        if (node.children.length <= 0) {\n            return [];\n        }\n        let {\n            left,\n            top,\n            width,\n            height,\n            expandBtnSize\n        } = node\n        let len = node.children.length\n        let marginX = this.getMarginX(node.layerIndex + 1)\n        if (node.isRoot) {\n            // 根节点\n            let x1 = left + width / 2\n            let y1 = top + height\n            let s1 = marginX * 0.7\n            let minx = Infinity\n            let maxx = -Infinity\n            node.children.forEach((item, index) => {\n                let x2 = item.left +item.width / 2\n                let y2 = item.top\n                if (x2 < minx) {\n                    minx = x2\n                }\n                if (x2 > maxx) {\n                    maxx = x2\n                }\n                let path = `M ${x2},${y1 + s1} L ${x2},${y1 + s1 > y2 ? y2 + item.height : y2}`\n                // 竖线\n                lines[index].plot(path)\n            })\n            minx = Math.min(minx, x1)\n            maxx = Math.max(maxx, x1)\n            // 父节点的竖线\n            let line1 = this.draw.path()\n            node.style.line(line1)\n            line1.plot(`M ${x1},${y1} L ${x1},${y1 + s1}`)\n            node._lines.push(line1)\n            // 水平线\n            if (len > 0) {\n                let lin2 = this.draw.path()\n                node.style.line(lin2)\n                lin2.plot(`M ${minx},${y1 + s1} L ${maxx},${y1 + s1}`)\n                node._lines.push(lin2)\n            }\n        } else {\n            // 非根节点\n            let y1 = top + height\n            let maxy = -Infinity\n            let x2 = node.left + node.width * 0.3\n            node.children.forEach((item, index) => {\n                // 为了适配自定义位置，下面做了各种位置的兼容\n                let y2 = item.top + item.height / 2\n                if (y2 > maxy) {\n                    maxy = y2\n                }\n                // 水平线\n                let path = ''\n                let _left = item.left\n                let _isLeft = item.left + item.width < x2\n                let _isXCenter = false\n                if (_isLeft) {\n                    // 水平位置在父节点左边\n                    _left = item.left + item.width\n                } else if (item.left < x2 && item.left + item.width > x2) {\n                    // 水平位置在父节点之间\n                    _isXCenter = true\n                    y2 = item.top\n                    maxy = y2\n                }   \n                if (y2 > top && y2 < y1) {\n                    // 自定义位置的情况：垂直位置节点在父节点之间\n                    path = `M ${_isLeft ? node.left : node.left + node.width},${y2} L ${_left},${y2}`\n                } else if (y2 < y1) {\n                    // 自定义位置的情况：垂直位置节点在父节点上面\n                    if (_isXCenter) {\n                        y2 = item.top + item.height\n                        _left = x2\n                    }\n                    path = `M ${x2},${top} L ${x2},${y2} L ${_left},${y2}`\n                } else {\n                    if (_isXCenter) {\n                        _left = x2\n                    }\n                    path = `M ${x2},${y2} L ${_left},${y2}`\n                }\n                lines[index].plot(path)\n            })\n            // 竖线\n            if (len > 0) {\n                let lin2 = this.draw.path()\n                expandBtnSize = len > 0 ? expandBtnSize : 0\n                node.style.line(lin2)\n                if (maxy < y1 + expandBtnSize) {\n                    lin2.hide()\n                } else {\n                    lin2.plot(`M ${x2},${y1 + expandBtnSize} L ${x2},${maxy}`)\n                    lin2.show()\n                }\n                node._lines.push(lin2)\n            }\n        }\n    }\n\n    /** \n     * @Author: 王林 \n     * @Date: 2021-04-11 19:54:26 \n     * @Desc: 渲染按钮 \n     */\n    renderExpandBtn(node, btn) {\n        let {\n            width,\n            height,\n            expandBtnSize,\n            isRoot\n        } = node\n        if (!isRoot) {\n            let {\n                translateX,\n                translateY\n            } = btn.transform()\n            btn.translate(width * 0.3 - expandBtnSize / 2 - translateX, height + expandBtnSize / 2 - translateY)\n        }\n    }\n\n    /** \n     * @Author: 王林 \n     * @Date: 2022-07-30 08:30:35 \n     * @Desc: 创建概要节点 \n     */\n    renderGeneralization(node, gLine, gNode) {\n        let { top, bottom, right, generalizationLineMargin, generalizationNodeMargin } = this.getNodeBoundaries(node, 'h')\n        let x1 = right + generalizationLineMargin\n        let y1 = top\n        let x2 = right + generalizationLineMargin\n        let y2 = bottom\n        let cx = x1 + 20\n        let cy = y1 + (y2 - y1) / 2\n        let path = `M ${x1},${y1} Q ${cx},${cy} ${x2},${y2}`\n        gLine.plot(path)\n        gNode.left = right + generalizationNodeMargin\n        gNode.top = top + (bottom - top - gNode.height) / 2\n    }\n}\n\nexport default CatalogOrganization"],"mappings":"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"},"metadata":{},"sourceType":"module"}